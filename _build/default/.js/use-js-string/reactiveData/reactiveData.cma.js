// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: ReactiveData
//# unitInfo: Requires: React, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__Int, Stdlib__List, Stdlib__Map, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ReactiveData_Rlist_merge$3 = "ReactiveData.Rlist.merge",
    cst_merge_invalid_index$1 = "merge: invalid index",
    cst_src_reactiveData_ml = "src/reactiveData.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    React = global_data.React,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Set = global_data.Stdlib__Set;
   function Make(D){
    var merge = D[1], map_patch = D[2], map_data = D[3], empty = [0, D[4]];
    function create(l){
     var
      match = caml_call1(React[1][2], 0),
      send = match[2],
      initial_event = match[1],
      current = [0, l],
      event =
        caml_call2
         (React[1][10],
          function(msg){
           if(0 === msg[0]){
            var p = msg[1];
            current[1] = caml_call2(merge, p, current[1]);
           }
           else{var l = msg[1]; current[1] = l;}
           return msg;
          },
          initial_event);
     return [0, [1, [0, current, event]], send];
    }
    function from_event(l, initial_event){
     var
      current = [0, l],
      event =
        caml_call2
         (React[1][10],
          function(msg){
           if(0 === msg[0]){
            var p = msg[1];
            current[1] = caml_call2(merge, p, current[1]);
           }
           else{var l = msg[1]; current[1] = l;}
           return msg;
          },
          initial_event);
     return [1, [0, current, event]];
    }
    function const$0(x){return [0, x];}
    function map_msg(f, param){
     if(0 === param[0]){
      var p = param[1];
      return [0, caml_call2(map_patch, f, p)];
     }
     var l = param[1];
     return [1, caml_call2(map_data, f, l)];
    }
    function map(f, s){
     if(0 === s[0]){var x = s[1]; return [0, caml_call2(map_data, f, x)];}
     var
      s$0 = s[1],
      current = [0, caml_call2(map_data, f, s$0[1][1])],
      event =
        caml_call2
         (React[1][10],
          function(msg){
           var msg$0 = map_msg(f, msg);
           if(0 === msg$0[0]){
            var p = msg$0[1];
            current[1] = caml_call2(merge, p, current[1]);
           }
           else{var l = msg$0[1]; current[1] = l;}
           return msg$0;
          },
          s$0[2]);
     return [1, [0, current, event]];
    }
    function value(s){
     if(0 === s[0]){var c = s[1]; return c;}
     var s$0 = s[1];
     return s$0[1][1];
    }
    function event(s){
     if(0 === s[0]) return React[1][1];
     var s$0 = s[1];
     return s$0[2];
    }
    function patch(s, p){return caml_call2(s, 0, [0, p]);}
    function set(s, p){return caml_call2(s, 0, [1, p]);}
    function fold(f, s, acc){
     if(0 === s[0]){
      var c = s[1], _aD_ = caml_call2(f, acc, [1, c]);
      return caml_call1(React[2][1], _aD_);
     }
     var s$0 = s[1], acc$0 = caml_call2(f, acc, [1, s$0[1][1]]);
     return caml_call4(React[2][21], 0, f, acc$0, s$0[2]);
    }
    function signal(opt, s){
     var eq = opt ? opt[1] : caml_equal;
     if(0 === s[0]){var c = s[1]; return caml_call1(React[2][1], c);}
     var
      s$0 = s[1],
      _aA_ = s$0[2],
      _aB_ = s$0[1][1],
      _aC_ = [0, caml_call1(D[5], eq)];
     return caml_call4
             (React[2][21],
              _aC_,
              function(l, msg){
               if(0 === msg[0]){
                var p = msg[1];
                return caml_call2(merge, p, l);
               }
               var l$0 = msg[1];
               return l$0;
              },
              _aB_,
              _aA_);
    }
    function from_signal(opt, s){
     var eq = opt ? opt[1] : caml_equal;
     function f(d$0, d){return [0, caml_call3(D[6], eq, d, d$0)];}
     var _az_ = caml_call2(React[2][14], f, s);
     return from_event(caml_call1(React[2][3], s), _az_);
    }
    return [0,
            empty,
            create,
            from_event,
            from_signal,
            const$0,
            patch,
            set,
            map_msg,
            map,
            value,
            fold,
            signal,
            event];
   }
   var
    map_data = Stdlib_List[20],
    cst_ReactiveData_Rlist_merge = cst_ReactiveData_Rlist_merge$3,
    cst_ReactiveData_Rlist_merge$0 = cst_ReactiveData_Rlist_merge$3,
    cst_ReactiveData_Rlist_merge$1 = cst_ReactiveData_Rlist_merge$3,
    cst_ReactiveData_Rlist_merge$2 = cst_ReactiveData_Rlist_merge$3,
    cst_invalid_index = "invalid index",
    _a_ = [0, cst_src_reactiveData_ml, 207, 4],
    cst_merge_invalid_index = cst_merge_invalid_index$1,
    cst_merge_invalid_index$0 = cst_merge_invalid_index$1,
    cst_linear_merge_X_not_support = "linear_merge: X not supported",
    _b_ = [0, cst_src_reactiveData_ml, 233, 4];
   function map_patch(f){
    return caml_call1
            (Stdlib_List[20],
             function(param){
              switch(param[0]){
                case 0:
                 var x = param[2], i = param[1];
                 return [0, i, caml_call1(f, x)];
                case 1:
                 var i$0 = param[1]; return [1, i$0];
                case 2:
                 var x$0 = param[2], i$1 = param[1];
                 return [2, i$1, caml_call1(f, x$0)];
                default: var j = param[2], i$2 = param[1]; return [3, i$2, j];
              }
             });
   }
   function merge(p$5, l$7){
    a:
    {
     b:
     c:
     {
      var n = 0, p$3 = p$5;
      for(;;){
       if(0 > n)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       if(! p$3) break;
       var match$1 = p$3[1];
       if(3 === match$1[0]) break b;
       var i$3 = match$1[1], p$4 = p$3[2];
       if(n > i$3) break c;
       n = i$3;
       p$3 = p$4;
      }
      var _ao_ = 1;
      break a;
     }
     var _ao_ = 0;
    }
    if(! _ao_)
     return caml_call3
             (Stdlib_List[26],
              function(l$2, op){
               switch(op[0]){
                 case 0:
                  var
                   x = op[2],
                   i = op[1],
                   i$0 =
                     0 <= i
                      ? i
                      : (caml_call1(Stdlib_List[1], l$2) + 1 | 0) + i | 0,
                   acc = 0,
                   n = i$0,
                   l = l$2;
                  for(;;){
                   if(0 === n)
                    return caml_call2(Stdlib_List[13], acc, [0, x, l]);
                   if(! l)
                    return caml_call1(Stdlib[2], cst_ReactiveData_Rlist_merge);
                   var
                    xs = l[2],
                    x$0 = l[1],
                    n$0 = n - 1 | 0,
                    acc$0 = [0, x$0, acc];
                   acc = acc$0;
                   n = n$0;
                   l = xs;
                  }
                  break;
                 case 1:
                  var
                   i$1 = op[1],
                   i$2 =
                     0 <= i$1 ? i$1 : caml_call1(Stdlib_List[1], l$2) + i$1 | 0,
                   acc$1 = 0,
                   n$1 = i$2,
                   l$0 = l$2;
                  for(;;){
                   if(0 === n$1 && l$0){
                    var l$1 = l$0[2];
                    return caml_call2(Stdlib_List[13], acc$1, l$1);
                   }
                   if(! l$0)
                    return caml_call1(Stdlib[2], cst_ReactiveData_Rlist_merge$0);
                   var
                    xs$0 = l$0[2],
                    x$1 = l$0[1],
                    n$2 = n$1 - 1 | 0,
                    acc$2 = [0, x$1, acc$1];
                   acc$1 = acc$2;
                   n$1 = n$2;
                   l$0 = xs$0;
                  }
                  break;
                 case 2:
                  var
                   x$2 = op[2],
                   i$3 = op[1],
                   i$4 =
                     0 <= i$3 ? i$3 : caml_call1(Stdlib_List[1], l$2) + i$3 | 0,
                   a = caml_call1(Stdlib_Array[11], l$2);
                  caml_check_bound(a, i$4)[1 + i$4] = x$2;
                  return caml_call1(Stdlib_Array[10], a);
                 default:
                  var
                   offset = op[2],
                   i$5 = op[1],
                   a$0 = caml_call1(Stdlib_Array[11], l$2),
                   len = a$0.length - 1,
                   i$6 = 0 <= i$5 ? i$5 : len + i$5 | 0,
                   v = caml_check_bound(a$0, i$6)[1 + i$6];
                  if(0 < offset){
                   if(len <= (i$6 + offset | 0))
                    caml_call1(Stdlib[2], cst_ReactiveData_Rlist_merge$1);
                   var _ap_ = (i$6 + offset | 0) - 1 | 0;
                   if(_ap_ >= i$6){
                    var j = i$6;
                    for(;;){
                     var
                      _ar_ = j + 1 | 0,
                      _as_ = caml_check_bound(a$0, _ar_)[1 + _ar_];
                     caml_check_bound(a$0, j)[1 + j] = _as_;
                     var _at_ = j + 1 | 0;
                     if(_ap_ === j) break;
                     j = _at_;
                    }
                   }
                   var _aq_ = i$6 + offset | 0;
                   caml_check_bound(a$0, _aq_)[1 + _aq_] = v;
                  }
                  else{
                   if((i$6 + offset | 0) < 0)
                    caml_call1(Stdlib[2], cst_ReactiveData_Rlist_merge$2);
                   var _au_ = (i$6 + offset | 0) + 1 | 0;
                   if(i$6 >= _au_){
                    var j$0 = i$6;
                    for(;;){
                     var
                      _aw_ = j$0 - 1 | 0,
                      _ax_ = caml_check_bound(a$0, _aw_)[1 + _aw_];
                     caml_check_bound(a$0, j$0)[1 + j$0] = _ax_;
                     var _ay_ = j$0 - 1 | 0;
                     if(_au_ === j$0) break;
                     j$0 = _ay_;
                    }
                   }
                   var _av_ = i$6 + offset | 0;
                   caml_check_bound(a$0, _av_)[1 + _av_] = v;
                  }
                  return caml_call1(Stdlib_Array[10], a$0);
               }
              },
              l$7,
              p$5);
    var acc$1 = 0, i0 = 0, p = p$5, l$1 = l$7;
    for(;;){
     a:
     {
      if(p){
       var match = p[1];
       if(3 !== match[0]){
        var i$1 = match[1];
        if(i0 < i$1){
         var i$2 = i$1 - i0 | 0;
         b:
         {
          c:
          {
           var acc = acc$1, i = i$2, l = l$1;
           for(;;){
            if(0 > i)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
            if(0 >= i) break;
            if(! l) break c;
            var l$0 = l[2], h = l[1], acc$0 = [0, h, acc], i$0 = i - 1 | 0;
            acc = acc$0;
            i = i$0;
            l = l$0;
           }
           var _an_ = [0, l, acc];
           break b;
          }
          var _an_ = caml_call1(Stdlib[1], cst_invalid_index);
         }
         var acc$2 = _an_[2], l$2 = _an_[1];
         break a;
        }
       }
      }
      var acc$2 = acc$1, l$2 = l$1;
     }
     if(! p) return caml_call2(Stdlib_List[13], acc$2, l$2);
     var match$0 = p[1];
     switch(match$0[0]){
       case 0:
        var p$0 = p[2], x = match$0[2], i0$0 = match$0[1], l$3 = [0, x, l$2];
        acc$1 = acc$2;
        i0 = i0$0;
        p = p$0;
        l$1 = l$3;
        break;
       case 1:
        var p$1 = p[2], i0$1 = match$0[1];
        if(! l$2) return caml_call1(Stdlib[1], cst_merge_invalid_index);
        var l$4 = l$2[2];
        acc$1 = acc$2;
        i0 = i0$1;
        p = p$1;
        l$1 = l$4;
        break;
       case 2:
        var p$2 = p[2], x$0 = match$0[2], i0$2 = match$0[1];
        if(! l$2) return caml_call1(Stdlib[1], cst_merge_invalid_index$0);
        var l$5 = l$2[2], l$6 = [0, x$0, l$5];
        acc$1 = acc$2;
        i0 = i0$2;
        p = p$2;
        l$1 = l$6;
        break;
       default: return caml_call1(Stdlib[2], cst_linear_merge_X_not_support);
     }
    }
   }
   function equal(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var x2 = l2$0[1], l1$1 = l1$0[2], x1 = l1$0[1], l2$1 = l2$0[2];
       if(caml_call2(f, x1, x2)){l1$0 = l1$1; l2$0 = l2$1; continue;}
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function mem(l){
    var hash = Stdlib_Hashtbl[28];
    function equal(_am_, _al_){return _am_ === _al_ ? 1 : 0;}
    var
     H = caml_call1(Stdlib_Hashtbl[26], [0, equal, hash]),
     h = caml_call1(H[1], 16);
    caml_call2
     (Stdlib_List[18], function(x){return caml_call3(H[5], h, x, 0);}, l);
    return caml_call1(H[11], h);
   }
   function diff(eq, lx$1, ly$3){
    function add(acc, i, v){return [0, [0, i, v], acc];}
    function remove(acc, i){return [0, [1, i], acc];}
    var
     memx = mem(lx$1),
     memy = mem(ly$3),
     acc = 0,
     left = 1,
     lx = lx$1,
     ly = ly$3,
     n = 0;
    for(;;)
     if(lx){
      var lx$0 = lx[2], x = lx[1];
      if(ly){
       var y = ly[1], ly$0 = ly[2];
       if(caml_call2(eq, x, y)){
        var n$0 = n + 1 | 0;
        lx = lx$0;
        ly = ly$0;
        n = n$0;
       }
       else if(caml_call1(memy, x))
        if(caml_call1(memx, y))
         if(left){
          var acc$0 = remove(acc, n);
          acc = acc$0;
          left = 0;
          lx = lx$0;
         }
         else{
          var ly$1 = ly[2], acc$1 = add(acc, n, y), n$1 = n + 1 | 0;
          acc = acc$1;
          left = 1;
          ly = ly$1;
          n = n$1;
         }
        else{
         var acc$2 = add(acc, n, y), n$2 = n + 1 | 0;
         acc = acc$2;
         ly = ly$0;
         n = n$2;
        }
       else{var acc$3 = remove(acc, n); acc = acc$3; lx = lx$0;}
      }
      else{var acc$4 = remove(acc, n); acc = acc$4; lx = lx$0; ly = 0;}
     }
     else{
      if(! ly) break;
      var
       ly$2 = ly[2],
       y$0 = ly[1],
       acc$5 = add(acc, n, y$0),
       n$3 = n + 1 | 0;
      acc = acc$5;
      lx = 0;
      ly = ly$2;
      n = n$3;
     }
    var opt = 0, param = acc;
    for(;;){
     var acc$6 = opt ? opt[1] : 0;
     if(! param) return acc$6;
     var
      t = param[2],
      h = param[1],
      acc$7 = [0, h, acc$6],
      opt$0 = [0, acc$7];
     opt = opt$0;
     param = t;
    }
   }
   var
    include = Make([0, merge, map_patch, map_data, 0, equal, diff]),
    empty = include[1],
    create = include[2],
    from_event = include[3],
    from_signal = include[4],
    const$0 = include[5],
    patch = include[6],
    set = include[7],
    map_msg = include[8],
    map = include[9],
    value = include[10],
    fold = include[11],
    signal = include[12],
    event = include[13],
    _c_ = [0, 0, 0],
    _d_ = [0, cst_src_reactiveData_ml, 410, 17],
    _e_ = [0, cst_src_reactiveData_ml, 447, 26],
    _f_ = [0, cst_src_reactiveData_ml, 547, 6];
   function cons(x, s){return caml_call2(patch, s, [0, [0, 0, x], 0]);}
   function snoc(x, s){return caml_call2(patch, s, [0, [0, -1, x], 0]);}
   function insert(x, i, s){return caml_call2(patch, s, [0, [0, i, x], 0]);}
   function update(x, i, s){return caml_call2(patch, s, [0, [2, i, x], 0]);}
   function move(i, j, s){return caml_call2(patch, s, [0, [3, i, j], 0]);}
   function remove(i, s){return caml_call2(patch, s, [0, [1, i], 0]);}
   function index(opt, l, x){
    var eq = opt ? opt[1] : caml_equal, n = 0, param = l;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var hd = param[1];
     if(caml_call2(eq, hd, x)) return n;
     var tl = param[2], n$0 = n + 1 | 0;
     n = n$0;
     param = tl;
    }
   }
   function update_eq(eq, param, x, y){
    var
     handle = param[2],
     data = param[1],
     i = index(eq, caml_call1(value, data), x);
    return update(y, i, handle);
   }
   function remove_last(param){
    var handle = param[2], data = param[1], _ak_ = caml_call1(value, data);
    return remove(caml_call1(Stdlib_List[1], _ak_) - 1 | 0, handle);
   }
   function remove_eq(eq, param, x){
    var
     handle = param[2],
     data = param[1],
     i = index(eq, caml_call1(value, data), x);
    return remove(i, handle);
   }
   function singleton(x){return caml_call1(const$0, [0, x, 0]);}
   function singleton_s(s){
    var
     first = [0, 1],
     match = caml_call1(React[1][2], 0),
     send = match[2],
     e = match[1],
     result = caml_call2(from_event, 0, e),
     s$0 =
       caml_call3
        (React[2][11],
         0,
         function(x){
          return first[1]
                  ? (first
                     [1]
                    = 0,
                    caml_call2(send, 0, [0, [0, [0, 0, x], 0]]))
                  : caml_call2(send, 0, [0, [0, [2, 0, x], 0]]);
         },
         s);
    caml_call2
     (React[1][3],
      e,
      function(param){caml_call1(React[2][3], s$0); return 0;});
    return result;
   }
   function concat(x, y){
    var
     v1 = caml_call1(value, x),
     v2 = caml_call1(value, y),
     size1 = [0, 0],
     size2 = [0, 0];
    function size_with_patch(sizex, param){
     switch(param[0]){
       case 0:
        sizex[1]++; return;
       case 1:
        sizex[1]--; return;
       default: return;
     }
    }
    function size_with_set(sizex, l){
     sizex[1] = caml_call1(Stdlib_List[1], l);
    }
    size_with_set(size1, v1);
    size_with_set(size2, v2);
    var
     update_patch1 =
       caml_call1
        (Stdlib_List[20],
         function(p){
          switch(p[0]){
            case 0:
             var
              x = p[2],
              pos = p[1],
              i = 0 <= pos ? pos : pos - size2[1] | 0,
              m = [0, i, x];
             break;
            case 1:
             var
              pos$0 = p[1],
              pos$1 = 0 <= pos$0 ? pos$0 : pos$0 - size2[1] | 0,
              m = [1, pos$1];
             break;
            case 2:
             var
              x$0 = p[2],
              pos$2 = p[1],
              pos$3 = 0 <= pos$2 ? pos$2 : pos$2 - size2[1] | 0,
              m = [2, pos$3, x$0];
             break;
            default:
             var
              j = p[2],
              i$0 = p[1],
              i$1 = 0 <= i$0 ? i$0 : i$0 - size2[1] | 0,
              m = [3, i$1, j];
          }
          size_with_patch(size1, m);
          return m;
         }),
     update_patch2 =
       caml_call1
        (Stdlib_List[20],
         function(p){
          switch(p[0]){
            case 0:
             var
              x = p[2],
              pos = p[1],
              _ag_ = 0 <= pos ? size1[1] + pos | 0 : pos,
              m = [0, _ag_, x];
             break;
            case 1:
             var
              pos$0 = p[1],
              _ah_ = 0 <= pos$0 ? size1[1] + pos$0 | 0 : pos$0,
              m = [1, _ah_];
             break;
            case 2:
             var
              x$0 = p[2],
              pos$1 = p[1],
              _ai_ = 0 <= pos$1 ? size1[1] + pos$1 | 0 : pos$1,
              m = [2, _ai_, x$0];
             break;
            default:
             var
              j = p[2],
              i = p[1],
              _aj_ = 0 <= i ? size1[1] + i | 0 : i,
              m = [3, _aj_, j];
          }
          size_with_patch(size2, m);
          return m;
         }),
     _X_ = caml_call1(event, y),
     _Y_ =
       [0,
        caml_call2(React[1][10], function(e){return [0, 15437, e];}, _X_),
        0],
     _Z_ = caml_call1(event, x),
     ___ =
       [0,
        caml_call2(React[1][10], function(e){return [0, 15436, e];}, _Z_),
        _Y_],
     tuple_ev =
       caml_call3
        (React[1][23],
         function(acc, x){
          var p1 = acc[1];
          if(! p1 && typeof x !== "number" && 15436 === x[1]){
           var x$1 = x[2], p2 = acc[2];
           return [0, [0, x$1], p2];
          }
          if(! acc[2] && typeof x !== "number" && 15437 === x[1]){var x$0 = x[2]; return [0, p1, [0, x$0]];}
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         },
         _c_,
         ___),
     merged_ev =
       caml_call2
        (React[1][10],
         function(p){
          var _$_ = p[1];
          if(! _$_){
           var _ae_ = p[2];
           if(! _ae_)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
           var match$1 = _ae_[1];
           if(0 === match$1[0]){
            var p2$2 = match$1[1];
            return [0, caml_call1(update_patch2, p2$2)];
           }
           var p2$3 = match$1[1];
           size_with_set(size2, p2$3);
           var _af_ = caml_call1(value, x);
           return [1, caml_call2(Stdlib[37], _af_, p2$3)];
          }
          var _aa_ = _$_[1];
          if(0 === _aa_[0]){
           var _ab_ = p[2], p1 = _aa_[1];
           if(! _ab_) return [0, caml_call1(update_patch1, p1)];
           var match = _ab_[1];
           if(0 === match[0]){
            var
             p2 = match[1],
             p1$0 = caml_call1(update_patch1, p1),
             p2$0 = caml_call1(update_patch2, p2);
            return [0, caml_call2(Stdlib[37], p1$0, p2$0)];
           }
           var s2 = match[1], s1 = caml_call1(value, x);
           size_with_set(size1, s1);
           size_with_set(size2, s2);
           return [1, caml_call2(Stdlib[37], s1, s2)];
          }
          var _ac_ = p[2], p1$1 = _aa_[1];
          if(! _ac_){
           size_with_set(size1, p1$1);
           var _ad_ = caml_call1(value, y);
           return [1, caml_call2(Stdlib[37], p1$1, _ad_)];
          }
          var match$0 = _ac_[1];
          if(0 === match$0[0]){
           size_with_set(size1, p1$1);
           var s2$0 = caml_call1(value, y);
           size_with_set(size2, s2$0);
           return [1, caml_call2(Stdlib[37], p1$1, s2$0)];
          }
          var p2$1 = match$0[1];
          size_with_set(size1, p1$1);
          size_with_set(size2, p2$1);
          return [1, caml_call2(Stdlib[37], p1$1, p2$1)];
         },
         tuple_ev);
    return caml_call2(from_event, caml_call2(Stdlib[37], v1, v2), merged_ev);
   }
   function inverse(param){
    switch(param[0]){
      case 0:
       var x = param[2], i = param[1]; return [0, (- i | 0) - 1 | 0, x];
      case 1:
       var i$0 = param[1]; return [1, (- i$0 | 0) - 1 | 0];
      case 2:
       var x$0 = param[2], i$1 = param[1];
       return [2, (- i$1 | 0) - 1 | 0, x$0];
      default:
       var j = param[2], i$2 = param[1];
       return [3, (- i$2 | 0) - 1 | 0, - j | 0];
    }
   }
   function rev(t){
    var
     _V_ = caml_call1(event, t),
     e =
       caml_call2
        (React[1][10],
         function(param){
          if(0 === param[0]){
           var p = param[1];
           return [0, caml_call2(Stdlib_List[20], inverse, p)];
          }
          var l = param[1];
          return [1, caml_call1(Stdlib_List[10], l)];
         },
         _V_),
     _W_ = caml_call1(value, t);
    return caml_call2(from_event, caml_call1(Stdlib_List[10], _W_), e);
   }
   function filter(pred, l){
    var
     IntMap = caml_call1(Stdlib_Map[1], [0, Stdlib_Int[9]]),
     index = [0, IntMap[1]],
     size = [0, 0];
    function filter_list(l){
     size[1] = caml_call1(Stdlib_List[1], l);
     index[1] = IntMap[1];
     var l$0 = l, res = 0, their_i = 0, my_i = -1;
     for(;;){
      if(! l$0) return caml_call1(Stdlib_List[10], res);
      var xs = l$0[2], x = l$0[1];
      if(caml_call1(pred, x)){
       index[1] = caml_call3(IntMap[2], their_i, my_i + 1 | 0, index[1]);
       var
        my_i$0 = my_i + 1 | 0,
        their_i$0 = their_i + 1 | 0,
        res$0 = [0, x, res];
       l$0 = xs;
       res = res$0;
       their_i = their_i$0;
       my_i = my_i$0;
      }
      else{var their_i$1 = their_i + 1 | 0; l$0 = xs; their_i = their_i$1;}
     }
    }
    function normalise(i){return 0 <= i ? i : (size[1] + 1 | 0) + i | 0;}
    function update_index_insert(insert_pos_full_list, visible){
     var
      insert_pos_full_list$0 = normalise(insert_pos_full_list),
      match = caml_call2(IntMap[30], insert_pos_full_list$0, index[1]),
      updatables = match[3],
      displaced = match[2],
      left_alone = match[1];
     if(displaced)
      var
       displaced_in_filtered = displaced[1],
       updatables$0 =
         caml_call3
          (IntMap[2],
           insert_pos_full_list$0,
           displaced_in_filtered,
           updatables);
     else
      var updatables$0 = updatables;
     function update_j(j_full_list, j_filtered_list){
      var
       new_j_filtered = visible ? j_filtered_list + 1 | 0 : j_filtered_list;
      index[1] =
       caml_call3(IntMap[2], j_full_list + 1 | 0, new_j_filtered, index[1]);
      return 0;
     }
     caml_call2(IntMap[23], update_j, updatables$0);
     var
      insert_pos_filtered =
        caml_call1(IntMap[31], left_alone)
         ? 0
         : caml_call1(IntMap[13], left_alone)[2] + 1 | 0;
     if(visible)
      index[1] =
       caml_call3
        (IntMap[2], insert_pos_full_list$0, insert_pos_filtered, index[1]);
     size[1]++;
     return insert_pos_filtered;
    }
    function update_index_move(from_full_list, to_full_list, to_filtered){
     var
      was_visible = to_filtered ? 1 : 0,
      forward = from_full_list < to_full_list ? 1 : 0;
     if(forward){
      var _N_ = from_full_list + 1 | 0;
      if(to_full_list >= _N_){
       var i_full = _N_;
       for(;;){
        var delta = was_visible ? -1 : 0;
        try{
         var
          i_filtered = caml_call2(IntMap[17], i_full, index[1]),
          new_val = i_filtered + delta | 0;
         index[1] = caml_call3(IntMap[2], i_full - 1 | 0, new_val, index[1]);
        }
        catch(_T_){
         var _O_ = caml_wrap_exception(_T_);
         if(_O_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_O_, 0);
        }
        var _P_ = i_full + 1 | 0;
        if(to_full_list === i_full) break;
        i_full = _P_;
       }
      }
     }
     else{
      var _Q_ = from_full_list - 1 | 0;
      if(_Q_ >= to_full_list){
       var i_full$0 = _Q_;
       for(;;){
        try{
         var
          delta$0 = was_visible ? 1 : 0,
          i_filtered$0 = caml_call2(IntMap[17], i_full$0, index[1]),
          new_val$0 = i_filtered$0 + delta$0 | 0;
         index[1] =
          caml_call3(IntMap[2], i_full$0 + 1 | 0, new_val$0, index[1]);
        }
        catch(_U_){
         var _R_ = caml_wrap_exception(_U_);
         if(_R_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_R_, 0);
        }
        var _S_ = i_full$0 - 1 | 0;
        if(to_full_list === i_full$0) break;
        i_full$0 = _S_;
       }
      }
     }
     if(to_filtered){
      var to_filtered$0 = to_filtered[1];
      index[1] = caml_call3(IntMap[2], to_full_list, to_filtered$0, index[1]);
      return;
     }
     index[1] = caml_call2(IntMap[6], to_full_list, index[1]);
    }
    function convert_p(param){
     switch(param[0]){
       case 0:
        var x = param[2], i = param[1];
        if(caml_call1(pred, x)){
         var my_i = update_index_insert(i, 1);
         return [0, [0, my_i, x], 0];
        }
        update_index_insert(i, 0);
        return 0;
       case 1:
        var i$0 = param[1], remove_pos_full_list = normalise(i$0);
        try{
         var
          j = caml_call2(IntMap[17], remove_pos_full_list, index[1]),
          _A_ = [0, [1, j], 0],
          ret = _A_;
        }
        catch(_M_){
         var _z_ = caml_wrap_exception(_M_);
         if(_z_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_z_, 0);
         var ret = 0;
        }
        var
         was_visible = caml_call2(IntMap[32], remove_pos_full_list, index[1]),
         updatables =
           caml_call2(IntMap[30], remove_pos_full_list, index[1])[3],
         update_j =
           function(j_full_list, j_filtered_list){
            var
             new_j = was_visible ? j_filtered_list : j_filtered_list - 1 | 0;
            index[1] =
             caml_call3(IntMap[2], j_full_list - 1 | 0, new_j, index[1]);
            return 0;
           };
        if(! caml_call1(IntMap[31], index[1])){
         var last_i = caml_call1(IntMap[13], index[1])[1];
         index[1] = caml_call2(IntMap[6], last_i, index[1]);
        }
        size[1]--;
        caml_call2(IntMap[23], update_j, updatables);
        return ret;
       case 2:
        var
         x$0 = param[2],
         i$1 = param[1],
         update_pos_full_list = normalise(i$1);
        try{
         var old_j = caml_call2(IntMap[17], update_pos_full_list, index[1]);
         if(caml_call1(pred, x$0))
          var _C_ = [0, [2, old_j, x$0], 0];
         else{
          var
           updatables$0 =
             caml_call2(IntMap[30], update_pos_full_list, index[1])[3],
           update_j$0 =
             function(j_full_list, j_filtered_list){
              index[1] =
               caml_call3
                (IntMap[2], j_full_list, j_filtered_list - 1 | 0, index[1]);
              return 0;
             };
          index[1] = caml_call2(IntMap[6], update_pos_full_list, index[1]);
          caml_call2(IntMap[23], update_j$0, updatables$0);
          var _C_ = [0, [1, old_j], 0];
         }
         return _C_;
        }
        catch(_K_){
         var _B_ = caml_wrap_exception(_K_);
         if(_B_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_B_, 0);
         if(! caml_call1(pred, x$0)) return 0;
         var
          match = caml_call2(IntMap[30], update_pos_full_list, index[1]),
          updatables$1 = match[3],
          none = match[2],
          left_alone = match[1];
         if(0 !== none)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
         var
          update_j$1 =
            function(j_full_list, j_filtered_list){
             index[1] =
              caml_call3
               (IntMap[2], j_full_list, j_filtered_list + 1 | 0, index[1]);
             return 0;
            };
         try{
          var
           _y_ = caml_call1(IntMap[13], left_alone)[2],
           previous_pos_filtered = _y_;
         }
         catch(_L_){
          var _x_ = caml_wrap_exception(_L_);
          if(_x_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_x_, 0);
          var previous_pos_filtered = -1;
         }
         var new_pos_filtered_list = previous_pos_filtered + 1 | 0;
         index[1] =
          caml_call3
           (IntMap[2], update_pos_full_list, new_pos_filtered_list, index[1]);
         caml_call2(IntMap[23], update_j$1, updatables$1);
         return [0, [0, new_pos_filtered_list, x$0], 0];
        }
       default:
        var
         offset_full = param[2],
         origin_full = param[1],
         origin_full$0 = normalise(origin_full),
         dest_full = origin_full$0 + offset_full | 0;
        try{
         var
          origin_filtered = caml_call2(IntMap[17], origin_full$0, index[1]);
         try{
          var
           _H_ = caml_call2(IntMap[17], dest_full, index[1]),
           dest_filtered = _H_;
         }
         catch(_J_){
          var _E_ = caml_wrap_exception(_J_);
          if(_E_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_E_, 0);
          var
           small_ones = caml_call2(IntMap[30], origin_full$0, index[1])[1],
           _F_ =
             caml_call1(IntMap[31], small_ones)
              ? 0
              : caml_call1(IntMap[13], small_ones)[2] + 1 | 0,
           dest_filtered = _F_;
         }
         update_index_move(origin_full$0, dest_full, [0, dest_filtered]);
         var
          _G_ =
            dest_filtered !== origin_filtered
             ? [0,
               [3, origin_filtered, dest_filtered - origin_filtered | 0],
               0]
             : 0;
         return _G_;
        }
        catch(_I_){
         var _D_ = caml_wrap_exception(_I_);
         if(_D_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_D_, 0);
         update_index_move(origin_full$0, dest_full, 0);
         return 0;
        }
     }
    }
    function filter_e(param){
     if(0 === param[0]){
      var p = param[1], _w_ = caml_call2(Stdlib_List[20], convert_p, p);
      return [0, caml_call1(Stdlib_List[14], _w_)];
     }
     var l = param[1];
     return [1, filter_list(l)];
    }
    var
     _v_ = caml_call1(event, l),
     e = caml_call2(React[1][10], filter_e, _v_);
    return caml_call2(from_event, filter_list(caml_call1(value, l)), e);
   }
   var IntSet = caml_call1(Stdlib_Set[1], [0, Stdlib_Int[9]]), _g_ = [0, 68];
   function for_all(fn, data){
    function maybe_update(acc, i, v){
     return caml_call1(fn, v) ? acc : caml_call2(IntSet[2], i, acc);
    }
    var acc = IntSet[1], i = 0;
    function init(param$0){
     var i$0 = i, acc$0 = acc, param = param$0;
     for(;;){
      if(! param) return acc$0;
      var
       tl = param[2],
       v = param[1],
       acc$1 = maybe_update(acc$0, i$0, v),
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      acc$0 = acc$1;
      param = tl;
     }
    }
    function update_idx_after(i, f, acc){
     return caml_call2
             (IntSet[25],
              function(i$0){return i <= i$0 ? caml_call2(f, i$0, 1) : i$0;},
              acc);
    }
    function f(acc, param){
     if(0 === param[0]){
      var updates = param[1];
      return caml_call3
              (Stdlib_List[26],
               function(acc, param){
                switch(param[0]){
                  case 0:
                   var
                    v = param[2],
                    i = param[1],
                    acc$0 =
                      update_idx_after
                       (i, function(_u_, _t_){return _u_ + _t_ | 0;}, acc);
                   return maybe_update(acc$0, i, v);
                  case 1:
                   var i$0 = param[1];
                   return update_idx_after
                           (i$0,
                            function(_s_, _r_){return _s_ - _r_ | 0;},
                            caml_call2(IntSet[4], i$0, acc));
                  case 2:
                   var v$0 = param[2], i$1 = param[1];
                   return maybe_update
                           (caml_call2(IntSet[4], i$1, acc), i$1, v$0);
                  default:
                   var
                    i$2 = param[2],
                    i$3 = param[1],
                    _o_ = caml_call2(IntSet[31], i$2, acc);
                   if(caml_call2(IntSet[31], i$3, acc) === _o_) return acc;
                   if(caml_call2(IntSet[31], i$3, acc)){
                    var _p_ = caml_call2(IntSet[4], i$3, acc);
                    return caml_call2(IntSet[2], i$2, _p_);
                   }
                   var _q_ = caml_call2(IntSet[4], i$2, acc);
                   return caml_call2(IntSet[2], i$3, _q_);
                }
               },
               acc,
               updates);
     }
     var x = param[1];
     return init(x);
    }
    var
     _l_ = caml_call1(event, data),
     _m_ = init(caml_call1(value, data)),
     _n_ = caml_call4(React[2][21], 0, f, _m_, _l_);
    return caml_call1(caml_call2(React[2][11], 0, IntSet[30]), _n_);
   }
   var
    ReactiveData =
      [0,
       [0,
        empty,
        create,
        from_event,
        from_signal,
        const$0,
        patch,
        set,
        map_msg,
        map,
        value,
        fold,
        signal,
        event,
        cons,
        snoc,
        insert,
        remove,
        remove_last,
        remove_eq,
        update,
        update_eq,
        move,
        singleton,
        singleton_s,
        concat,
        rev,
        filter,
        for_all],
       function(M){
        function merge(p, acc){
         return caml_call3
                 (Stdlib_List[26],
                  function(acc, p){
                   if(3404203 <= p[1]){
                    var k = p[2];
                    return caml_call2(M[6], k, acc);
                   }
                   var match = p[2], a = match[2], k$0 = match[1];
                   return caml_call3(M[2], k$0, a, acc);
                  },
                  acc,
                  p);
        }
        function map_patch(f){
         return caml_call1
                 (Stdlib_List[20],
                  function(param){
                   if(3404203 <= param[1]){
                    var k = param[2];
                    return [0, 3404203, k];
                   }
                   var match = param[2], a = match[2], k$0 = match[1];
                   return [0, 3254785, [0, k$0, caml_call1(f, a)]];
                  });
        }
        function map_data(f, d){return caml_call2(M[25], f, d);}
        var empty = M[1];
        function equal(f){return caml_call1(M[33], f);}
        function diff(eq, x, y){
         function g(key, v, w){
          if(v){
           var v$0 = v[1];
           if(! w) return _g_;
           var w$0 = w[1];
           return caml_call2(eq, v$0, w$0) ? 0 : [0, [0, 85, w$0]];
          }
          if(! w) return 0;
          var v$1 = w[1];
          return [0, [0, 65, v$1]];
         }
         var m = caml_call3(M[7], g, x, y);
         function g$0(key, x, acc){
          if(typeof x === "number") return [0, [0, 3404203, key], acc];
          if(85 <= x[1]){
           var v = x[2];
           return [0, [0, 3404203, key], [0, [0, 3254785, [0, key, v]], acc]];
          }
          var v$0 = x[2];
          return [0, [0, 3254785, [0, key, v$0]], acc];
         }
         var _k_ = caml_call3(M[24], g$0, m, 0);
         return caml_call1(Stdlib_List[10], _k_);
        }
        var
         include = Make([0, merge, map_patch, map_data, empty, equal, diff]),
         empty$0 = include[1],
         create = include[2],
         from_event = include[3],
         from_signal = include[4],
         const$0 = include[5],
         patch = include[6],
         set = include[7],
         map_msg = include[8],
         map = include[9],
         value = include[10],
         fold = include[11],
         signal = include[12],
         event = include[13];
        function filter(pred, m){
         function convert_p(param){
          if(3404203 <= param[1]){
           var k = param[2];
           return [0, [0, 3404203, k], 0];
          }
          var match = param[2], v = match[2], k$0 = match[1];
          return caml_call2(pred, k$0, v)
                  ? [0, [0, 3254785, [0, k$0, v]], 0]
                  : 0;
         }
         function filter_e(param){
          if(0 === param[0]){
           var p = param[1], _j_ = caml_call2(Stdlib_List[20], convert_p, p);
           return [0, caml_call1(Stdlib_List[14], _j_)];
          }
          var m = param[1];
          return [1, caml_call2(M[27], pred, m)];
         }
         var
          _h_ = caml_call1(event, m),
          e = caml_call2(React[1][10], filter_e, _h_),
          _i_ = caml_call1(value, m);
         return caml_call2(from_event, caml_call2(M[27], pred, _i_), e);
        }
        return [0,
                empty$0,
                create,
                from_event,
                from_signal,
                const$0,
                patch,
                set,
                map_msg,
                map,
                value,
                fold,
                signal,
                event,
                filter];
       },
       Make];
   runtime.caml_register_global(24, ReactiveData, "ReactiveData");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
