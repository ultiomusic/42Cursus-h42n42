// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Lwt_react
//# unitInfo: Requires: Lwt, Lwt_mutex, Lwt_stream, React, Stdlib__Gc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Lwt_mutex = global_data.Lwt_mutex,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Lwt_stream = global_data.Lwt_stream,
    React = global_data.React,
    include = React[1],
    never = include[1],
    create = include[2],
    retain = include[3],
    stop = include[4],
    equal = include[5],
    trace = include[6],
    once = include[7],
    drop_once = include[8],
    app = include[9],
    map = include[10],
    stamp = include[11],
    filter = include[12],
    fmap = include[13],
    diff = include[14],
    changes = include[15],
    on = include[16],
    when = include[17],
    dismiss = include[18],
    until = include[19],
    accum = include[20],
    fold = include[21],
    select = include[22],
    merge = include[23],
    switch$0 = include[24],
    fix = include[25],
    l1 = include[26],
    l2 = include[27],
    l3 = include[28],
    l4 = include[29],
    l5 = include[30],
    l6 = include[31],
    Option = include[32];
   function with_finaliser(f, event){
    var r = [0, 0];
    caml_call2(Stdlib_Gc[3], function(_ae_){return caml_call1(f, 0);}, r);
    return caml_call2(map, function(x){return x;}, event);
   }
   function next(ev){
    var
     match = caml_call1(Lwt[22], 0),
     wakener = match[2],
     waiter = match[1],
     ev$0 =
       caml_call2
        (map,
         function(x){return caml_call2(Lwt[52], wakener, x);},
         caml_call1(once, ev));
    caml_call2
     (Lwt[24], waiter, function(param){return caml_call2(stop, 0, ev$0);});
    return waiter;
   }
   function limit(f, e){
    var
     limiter = [0, Lwt[36]],
     delayed = [0, 0],
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(x){
          if(! caml_call1(Lwt[76], limiter[1])){
           limiter[1] = caml_call1(f, 0);
           caml_call2(push, 0, x);
           return 0;
          }
          var match = delayed[1];
          if(match){var cell = match[1]; cell[1] = x; return 0;}
          var cell$0 = [0, x];
          delayed[1] = [0, cell$0];
          caml_call2
           (Lwt[29],
            limiter[1],
            function(param){
             if(caml_call1(Lwt[76], limiter[1])){delayed[1] = 0; return 0;}
             var x = cell$0[1];
             delayed[1] = 0;
             limiter[1] = caml_call1(f, 0);
             return caml_call2(push, 0, x);
            });
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function cancel_thread(t, param){return caml_call1(Lwt[23], t);}
   function from(f){
    var match = caml_call1(create, 0), push = match[2], event = match[1];
    function loop(param){
     var _ad_ = caml_call1(f, 0);
     return caml_call2
             (Lwt[33][1],
              _ad_,
              function(x){caml_call2(push, 0, x); return loop(0);});
    }
    var _ab_ = caml_call1(Lwt[57], 0), t = caml_call2(Lwt[33][1], _ab_, loop);
    return with_finaliser
            (function(_ac_){return cancel_thread(t, _ac_);}, event);
   }
   function to_stream(event){
    var
     match = caml_call1(Lwt_stream[5], 0),
     set_ref = match[3],
     push = match[2],
     stream = match[1];
    caml_call1
     (set_ref,
      caml_call2(map, function(x){return caml_call1(push, [0, x]);}, event));
    return stream;
   }
   function of_stream(stream){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     ___ = caml_call1(Lwt[57], 0),
     t =
       caml_call2
        (Lwt[33][1],
         ___,
         function(param){
          return caml_call2
                  (Lwt_stream[49],
                   function(v){
                    try{var _aa_ = caml_call2(push, 0, v); return _aa_;}
                    catch(exn$0){
                     var exn = caml_wrap_exception(exn$0);
                     return caml_call1(Lwt[12][1], exn);
                    }
                   },
                   stream);
         });
    return with_finaliser(function(_$_){return cancel_thread(t, _$_);}, event);
   }
   function delay(thread){
    var match = caml_call1(Lwt[79], thread);
    if(match){var e = match[1]; return e;}
    var
     match$0 = caml_call1(create, 0),
     send = match$0[2],
     event = match$0[1];
    caml_call2
     (Lwt[29],
      thread,
      function(e){caml_call2(send, 0, e); return caml_call2(stop, 0, event);});
    return caml_call2(switch$0, never, event);
   }
   function keep(e){caml_call2(map, function(_Z_){return 0;}, e); return 0;}
   function run_p(e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(t){
          caml_call2(Lwt[29], t, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function run_s(e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(t){
          var
           _Y_ = caml_call2(Lwt_mutex[6], mutex, function(param){return t;});
          caml_call2
           (Lwt[29], _Y_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function map_p(f, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(x){
          var _X_ = caml_call1(f, x);
          caml_call2
           (Lwt[29], _X_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function map_s(f, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _W_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29], _W_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function app_p(ef, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(param){
          var x = param[2], f = param[1], _V_ = caml_call1(f, x);
          caml_call2
           (Lwt[29], _V_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call2
          (app, caml_call2(map, function(f, x){return [0, f, x];}, ef), e));
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function app_s(ef, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(param){
          var
           x = param[2],
           f = param[1],
           _U_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29], _U_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call2
          (app, caml_call2(map, function(f, x){return [0, f, x];}, ef), e));
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function filter_p(f, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(x){
          var _T_ = caml_call1(f, x);
          caml_call2
           (Lwt[29],
            _T_,
            function(param){return param ? caml_call2(push, 0, x) : 0;});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function filter_s(f, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _S_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29],
            _S_,
            function(param){return param ? caml_call2(push, 0, x) : 0;});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function fmap_p(f, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(x){
          var _R_ = caml_call1(f, x);
          caml_call2
           (Lwt[29],
            _R_,
            function(param){
             if(! param) return 0;
             var x = param[1];
             return caml_call2(push, 0, x);
            });
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function fmap_s(f, e){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _Q_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29],
            _Q_,
            function(param){
             if(! param) return 0;
             var x = param[1];
             return caml_call2(push, 0, x);
            });
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function diff_s(f, e){
    var
     previous = [0, 0],
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var match = previous[1];
          if(match){
           var y = match[1];
           previous[1] = [0, x];
           var
            _P_ =
              caml_call2
               (Lwt_mutex[6],
                mutex,
                function(param){return caml_call2(f, x, y);});
           caml_call2
            (Lwt[29], _P_, function(v){return caml_call2(push, 0, v);});
           return 0;
          }
          previous[1] = [0, x];
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function accum_s(ef, acc){
    var
     acc$0 = [0, acc],
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(f){
          var
           _O_ =
             caml_call2
              (Lwt_mutex[6],
               mutex,
               function(param){return caml_call1(f, acc$0[1]);});
          caml_call2
           (Lwt[29],
            _O_,
            function(x){acc$0[1] = x; return caml_call2(push, 0, x);});
          return 0;
         },
         ef);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function fold_s(f, acc, e){
    var
     acc$0 = [0, acc],
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _N_ =
             caml_call2
              (Lwt_mutex[6],
               mutex,
               function(param){return caml_call2(f, acc$0[1], x);});
          caml_call2
           (Lwt[29],
            _N_,
            function(x){acc$0[1] = x; return caml_call2(push, 0, x);});
          return 0;
         },
         e);
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function rev_fold(f, acc, param){
    if(! param) return caml_call1(Lwt[4], acc);
    var l = param[2], x = param[1], _M_ = rev_fold(f, acc, l);
    return caml_call2
            (Lwt[33][1], _M_, function(acc){return caml_call2(f, acc, x);});
   }
   function merge_s(f, acc, el){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(l){
          var
           _L_ =
             caml_call2
              (Lwt_mutex[6],
               mutex,
               function(param){return rev_fold(f, acc, l);});
          caml_call2
           (Lwt[29], _L_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call3(merge, function(acc, x){return [0, x, acc];}, 0, el));
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   var
    include$0 = React[2],
    const$0 = include$0[1],
    create$0 = include$0[2],
    value = include$0[3],
    retain$0 = include$0[4],
    eq_fun = include$0[5],
    stop$0 = include$0[6],
    equal$0 = include$0[7],
    trace$0 = include$0[8],
    hold = include$0[9],
    app$0 = include$0[10],
    map$0 = include$0[11],
    filter$0 = include$0[12],
    fmap$0 = include$0[13],
    diff$0 = include$0[14],
    changes$0 = include$0[15],
    sample = include$0[16],
    on$0 = include$0[17],
    when$0 = include$0[18],
    dismiss$0 = include$0[19],
    accum$0 = include$0[20],
    fold$0 = include$0[21],
    merge$0 = include$0[22],
    switch$1 = include$0[23],
    bind = include$0[24],
    fix$0 = include$0[25],
    l1$0 = include$0[26],
    l2$0 = include$0[27],
    l3$0 = include$0[28],
    l4$0 = include$0[29],
    l5$0 = include$0[30],
    l6$0 = include$0[31],
    Bool = include$0[32],
    Int = include$0[33],
    Float = include$0[34],
    Pair = include$0[35],
    Option$0 = include$0[36],
    Compare = include$0[37],
    Make = include$0[38],
    Special = include$0[39];
   function with_finaliser$0(f, signal){
    var r = [0, 0];
    caml_call2(Stdlib_Gc[3], function(_K_){return caml_call1(f, 0);}, r);
    return caml_call3(map$0, 0, function(x){return x;}, signal);
   }
   function limit$0(eq, f, s){
    var
     limiter = [0, caml_call1(f, 0)],
     delayed = [0, 0],
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     iter =
       caml_call2
        (fmap,
         function(x){
          if(! caml_call1(Lwt[76], limiter[1])){
           limiter[1] = caml_call1(f, 0);
           caml_call2(push, 0, x);
           return 0;
          }
          var match = delayed[1];
          if(match){var cell = match[1]; cell[1] = x; return 0;}
          var cell$0 = [0, x];
          delayed[1] = [0, cell$0];
          caml_call2
           (Lwt[29],
            limiter[1],
            function(param){
             if(caml_call1(Lwt[76], limiter[1])){delayed[1] = 0; return 0;}
             var x = cell$0[1];
             delayed[1] = 0;
             limiter[1] = caml_call1(f, 0);
             return caml_call2(push, 0, x);
            });
          return 0;
         },
         caml_call1(changes$0, s)),
     _J_ = caml_call1(select, [0, iter, [0, event, 0]]);
    return caml_call3(hold, eq, caml_call1(value, s), _J_);
   }
   function keep$0(s){
    caml_call3(map$0, 0, function(_I_){return 0;}, s);
    return 0;
   }
   function run_s$0(eq, s){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(t){
          var
           _H_ = caml_call2(Lwt_mutex[6], mutex, function(param){return t;});
          caml_call2
           (Lwt[29], _H_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call1(changes$0, s)),
     _F_ =
       caml_call2
        (Lwt_mutex[6], mutex, function(param){return caml_call1(value, s);});
    return caml_call2
            (Lwt[33][1],
             _F_,
             function(x){
              var
               _G_ =
                 caml_call3
                  (hold, eq, x, caml_call1(select, [0, iter, [0, event, 0]]));
              return caml_call1(Lwt[4], _G_);
             });
   }
   function map_s$0(eq, f, s){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _E_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29], _E_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call1(changes$0, s)),
     _C_ =
       caml_call2
        (Lwt_mutex[6],
         mutex,
         function(param){return caml_call1(f, caml_call1(value, s));});
    return caml_call2
            (Lwt[33][1],
             _C_,
             function(x){
              var
               _D_ =
                 caml_call3
                  (hold, eq, x, caml_call1(select, [0, iter, [0, event, 0]]));
              return caml_call1(Lwt[4], _D_);
             });
   }
   function app_s$0(eq, sf, s){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     _x_ = caml_call1(changes$0, s),
     iter =
       caml_call2
        (fmap,
         function(param){
          var
           x = param[2],
           f = param[1],
           _B_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29], _B_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call2
          (app,
           caml_call2
            (map,
             function(f, x){return [0, f, x];},
             caml_call1(changes$0, sf)),
           _x_)),
     _y_ =
       caml_call2
        (Lwt_mutex[6],
         mutex,
         function(param){
          var _A_ = caml_call1(value, s);
          return caml_call1(caml_call1(value, sf), _A_);
         });
    return caml_call2
            (Lwt[33][1],
             _y_,
             function(x){
              var
               _z_ =
                 caml_call3
                  (hold, eq, x, caml_call1(select, [0, iter, [0, event, 0]]));
              return caml_call1(Lwt[4], _z_);
             });
   }
   function filter_s$0(eq, f, i, s){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _w_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29],
            _w_,
            function(param){return param ? caml_call2(push, 0, x) : 0;});
          return 0;
         },
         caml_call1(changes$0, s)),
     x = caml_call1(value, s),
     _t_ =
       caml_call2
        (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
    return caml_call2
            (Lwt[33][1],
             _t_,
             function(param){
              if(param){
               var
                _u_ =
                  caml_call3
                   (hold, eq, x, caml_call1(select, [0, iter, [0, event, 0]]));
               return caml_call1(Lwt[4], _u_);
              }
              var
               _v_ =
                 caml_call3
                  (hold, eq, i, caml_call1(select, [0, iter, [0, event, 0]]));
              return caml_call1(Lwt[4], _v_);
             });
   }
   function fmap_s$0(eq, f, i, s){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _s_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29],
            _s_,
            function(param){
             if(! param) return 0;
             var x = param[1];
             return caml_call2(push, 0, x);
            });
          return 0;
         },
         caml_call1(changes$0, s)),
     _p_ =
       caml_call2
        (Lwt_mutex[6],
         mutex,
         function(param){return caml_call1(f, caml_call1(value, s));});
    return caml_call2
            (Lwt[33][1],
             _p_,
             function(param){
              if(param){
               var
                x = param[1],
                _q_ =
                  caml_call3
                   (hold, eq, x, caml_call1(select, [0, iter, [0, event, 0]]));
               return caml_call1(Lwt[4], _q_);
              }
              var
               _r_ =
                 caml_call3
                  (hold, eq, i, caml_call1(select, [0, iter, [0, event, 0]]));
              return caml_call1(Lwt[4], _r_);
             });
   }
   function diff_s$0(f, s){
    var
     previous = [0, caml_call1(value, s)],
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var y = previous[1];
          previous[1] = x;
          var
           _o_ =
             caml_call2
              (Lwt_mutex[6],
               mutex,
               function(param){return caml_call2(f, x, y);});
          caml_call2
           (Lwt[29], _o_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call1(changes$0, s));
    return caml_call1(select, [0, iter, [0, event, 0]]);
   }
   function sample_s(f, e, s){
    return map_s
            (function(x){return caml_call2(f, x, caml_call1(value, s));}, e);
   }
   function accum_s$0(eq, ef, i){
    return caml_call3(hold, eq, i, accum_s(ef, i));
   }
   function fold_s$0(eq, f, i, e){
    return caml_call3(hold, eq, i, fold_s(f, i, e));
   }
   function rev_fold$0(f, acc, param){
    if(! param) return caml_call1(Lwt[4], acc);
    var l = param[2], x = param[1], _n_ = rev_fold$0(f, acc, l);
    return caml_call2
            (Lwt[33][1], _n_, function(acc){return caml_call2(f, acc, x);});
   }
   function merge_s$0(eq, f, acc, sl){
    var
     s = caml_call4(merge$0, 0, function(acc, x){return [0, x, acc];}, 0, sl),
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(l){
          var
           _m_ =
             caml_call2
              (Lwt_mutex[6],
               mutex,
               function(param){return rev_fold$0(f, acc, l);});
          caml_call2
           (Lwt[29], _m_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call1(changes$0, s)),
     _k_ =
       caml_call2
        (Lwt_mutex[6],
         mutex,
         function(param){return rev_fold$0(f, acc, caml_call1(value, s));});
    return caml_call2
            (Lwt[33][1],
             _k_,
             function(x){
              var
               _l_ =
                 caml_call3
                  (hold, eq, x, caml_call1(select, [0, iter, [0, event, 0]]));
              return caml_call1(Lwt[4], _l_);
             });
   }
   function l1_s(eq, f, s1){return map_s$0(eq, f, s1);}
   function l2_s(eq, f, s1, s2){
    return map_s$0
            (eq,
             function(param){
              var x2 = param[2], x1 = param[1];
              return caml_call2(f, x1, x2);
             },
             caml_call4
              (l2$0,
               [0, function(_j_, param){return 0;}],
               function(x1, x2){return [0, x1, x2];},
               s1,
               s2));
   }
   function l3_s(eq, f, s1, s2, s3){
    return map_s$0
            (eq,
             function(param){
              var x3 = param[3], x2 = param[2], x1 = param[1];
              return caml_call3(f, x1, x2, x3);
             },
             caml_call5
              (l3$0,
               [0, function(_i_, param){return 0;}],
               function(x1, x2, x3){return [0, x1, x2, x3];},
               s1,
               s2,
               s3));
   }
   function l4_s(eq, f, s1, s2, s3, s4){
    return map_s$0
            (eq,
             function(param){
              var x4 = param[4], x3 = param[3], x2 = param[2], x1 = param[1];
              return caml_call4(f, x1, x2, x3, x4);
             },
             caml_call6
              (l4$0,
               [0, function(_h_, param){return 0;}],
               function(x1, x2, x3, x4){return [0, x1, x2, x3, x4];},
               s1,
               s2,
               s3,
               s4));
   }
   function l5_s(eq, f, s1, s2, s3, s4, s5){
    return map_s$0
            (eq,
             function(param){
              var
               x5 = param[5],
               x4 = param[4],
               x3 = param[3],
               x2 = param[2],
               x1 = param[1];
              return caml_call5(f, x1, x2, x3, x4, x5);
             },
             caml_call7
              (l5$0,
               [0, function(_g_, param){return 0;}],
               function(x1, x2, x3, x4, x5){return [0, x1, x2, x3, x4, x5];},
               s1,
               s2,
               s3,
               s4,
               s5));
   }
   function l6_s(eq, f, s1, s2, s3, s4, s5, s6){
    return map_s$0
            (eq,
             function(param){
              var
               x6 = param[6],
               x5 = param[5],
               x4 = param[4],
               x3 = param[3],
               x2 = param[2],
               x1 = param[1];
              return caml_call6(f, x1, x2, x3, x4, x5, x6);
             },
             caml_call8
              (l6$0,
               [0, function(_f_, param){return 0;}],
               function(x1, x2, x3, x4, x5, x6){
                return [0, x1, x2, x3, x4, x5, x6];
               },
               s1,
               s2,
               s3,
               s4,
               s5,
               s6));
   }
   function bind_s(eq, s, f){
    var
     match = caml_call1(create, 0),
     push = match[2],
     event = match[1],
     mutex = caml_call1(Lwt_mutex[1], 0),
     iter =
       caml_call2
        (fmap,
         function(x){
          var
           _e_ =
             caml_call2
              (Lwt_mutex[6], mutex, function(param){return caml_call1(f, x);});
          caml_call2
           (Lwt[29], _e_, function(v){return caml_call2(push, 0, v);});
          return 0;
         },
         caml_call1(changes$0, s)),
     _a_ =
       caml_call2
        (Lwt_mutex[6],
         mutex,
         function(param){return caml_call1(f, caml_call1(value, s));});
    return caml_call2
            (Lwt[33][1],
             _a_,
             function(x){
              var
               _b_ =
                 caml_call2
                  (switch$1,
                   eq,
                   caml_call3
                    (hold,
                     [0, function(_d_, _c_){return _d_ === _c_ ? 1 : 0;}],
                     x,
                     caml_call1(select, [0, iter, [0, event, 0]])));
              return caml_call1(Lwt[4], _b_);
             });
   }
   var
    Lwt_react =
      [0,
       [0,
        never,
        create,
        retain,
        stop,
        equal,
        trace,
        once,
        drop_once,
        app,
        map,
        stamp,
        filter,
        fmap,
        diff,
        changes,
        on,
        when,
        dismiss,
        until,
        accum,
        fold,
        select,
        merge,
        switch$0,
        fix,
        l1,
        l2,
        l3,
        l4,
        l5,
        l6,
        Option,
        with_finaliser,
        next,
        limit,
        from,
        to_stream,
        of_stream,
        delay,
        keep,
        app_s,
        app_p,
        map_s,
        map_p,
        filter_s,
        filter_p,
        fmap_s,
        fmap_p,
        diff_s,
        accum_s,
        fold_s,
        merge_s,
        run_s,
        run_p],
       [0,
        const$0,
        create$0,
        value,
        retain$0,
        eq_fun,
        stop$0,
        equal$0,
        trace$0,
        hold,
        app$0,
        map$0,
        filter$0,
        fmap$0,
        diff$0,
        changes$0,
        sample,
        on$0,
        when$0,
        dismiss$0,
        accum$0,
        fold$0,
        merge$0,
        switch$1,
        fix$0,
        l1$0,
        l2$0,
        l3$0,
        l4$0,
        l5$0,
        l6$0,
        Bool,
        Int,
        Float,
        Pair,
        Option$0,
        Compare,
        Make,
        Special,
        const$0,
        bind,
        bind_s,
        with_finaliser$0,
        limit$0,
        keep$0,
        app_s$0,
        map_s$0,
        filter_s$0,
        fmap_s$0,
        diff_s$0,
        sample_s,
        accum_s$0,
        fold_s$0,
        merge_s$0,
        l1_s,
        l2_s,
        l3_s,
        l4_s,
        l5_s,
        l6_s,
        run_s$0]];
   runtime.caml_register_global(5, Lwt_react, "Lwt_react");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
