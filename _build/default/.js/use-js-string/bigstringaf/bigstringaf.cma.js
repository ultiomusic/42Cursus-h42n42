// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Bigstringaf
//# unitInfo: Requires: Stdlib, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = " }",
    cst_len = ", len: ",
    cst_Bigstringaf = "Bigstringaf.",
    cst_blit$2 = "blit",
    cst_blit_from_bytes$2 = "blit_from_bytes",
    cst_blit_from_string$2 = "blit_from_string",
    cst_blit_to_bytes$2 = "blit_to_bytes",
    cst_memchr$1 = "memchr",
    cst_memcmp$2 = "memcmp",
    cst_memcmp_string$2 = "memcmp_string",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_uint8_get16 = runtime.caml_ba_uint8_get16,
    caml_ba_uint8_get32 = runtime.caml_ba_uint8_get32,
    caml_ba_uint8_get64 = runtime.caml_ba_uint8_get64,
    caml_ba_uint8_set16 = runtime.caml_ba_uint8_set16,
    caml_ba_uint8_set32 = runtime.caml_ba_uint8_set32,
    caml_ba_uint8_set64 = runtime.caml_ba_uint8_set64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [11, cst_len, [4, 0, 0, 0, [11, cst, 0]]],
    partial$0 = [11, cst_len, [4, 0, 0, 0, [11, cst, 0]]],
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray;
   function create(size){
    return caml_call3
            (Stdlib_Bigarray[20][1],
             Stdlib_Bigarray[14],
             Stdlib_Bigarray[16],
             size);
   }
   var
    empty = create(0),
    length = caml_ba_dim_1,
    sub = runtime.caml_ba_sub,
    _a_ =
      [0,
       [11,
        cst_Bigstringaf,
        [2,
         0,
         [11,
          " invalid range: { buffer_len: ",
          [4,
           0,
           0,
           0,
           [11,
            ", off: ",
            [4, 0, 0, 0, [11, cst_len, [4, 0, 0, 0, [11, cst, 0]]]]]]]]],
       "Bigstringaf.%s invalid range: { buffer_len: %d, off: %d, len: %d }"],
    _b_ =
      [0,
       [11,
        cst_Bigstringaf,
        [2,
         0,
         [11,
          " invalid range: { src_len: ",
          [4,
           0,
           0,
           0,
           [11,
            ", src_off: ",
            [4,
             0,
             0,
             0,
             [11,
              ", dst_len: ",
              [4, 0, 0, 0, [11, ", dst_off: ", [4, 0, 0, 0, partial$0]]]]]]]]]],
       "Bigstringaf.%s invalid range: { src_len: %d, src_off: %d, dst_len: %d, dst_off: %d, len: %d }"],
    _c_ =
      [0,
       [11,
        cst_Bigstringaf,
        [2,
         0,
         [11,
          " invalid range: { buf1_len: ",
          [4,
           0,
           0,
           0,
           [11,
            ", buf1_off: ",
            [4,
             0,
             0,
             0,
             [11,
              ", buf2_len: ",
              [4, 0, 0, 0, [11, ", buf2_off: ", [4, 0, 0, 0, partial]]]]]]]]]],
       "Bigstringaf.%s invalid range: { buf1_len: %d, buf1_off: %d, buf2_len: %d, buf2_off: %d, len: %d }"],
    cst_copy = "copy",
    cst_substring = "substring",
    cst_of_string = "of_string",
    cst_blit = cst_blit$2,
    cst_blit$0 = cst_blit$2,
    cst_blit$1 = cst_blit$2,
    cst_blit_from_string = cst_blit_from_string$2,
    cst_blit_from_string$0 = cst_blit_from_string$2,
    cst_blit_from_string$1 = cst_blit_from_string$2,
    cst_blit_from_bytes = cst_blit_from_bytes$2,
    cst_blit_from_bytes$0 = cst_blit_from_bytes$2,
    cst_blit_from_bytes$1 = cst_blit_from_bytes$2,
    cst_blit_to_bytes = cst_blit_to_bytes$2,
    cst_blit_to_bytes$0 = cst_blit_to_bytes$2,
    cst_blit_to_bytes$1 = cst_blit_to_bytes$2,
    cst_memcmp = cst_memcmp$2,
    cst_memcmp$0 = cst_memcmp$2,
    cst_memcmp$1 = cst_memcmp$2,
    cst_memcmp_string = cst_memcmp_string$2,
    cst_memcmp_string$0 = cst_memcmp_string$2,
    cst_memcmp_string$1 = cst_memcmp_string$2,
    cst_memchr = cst_memchr$1,
    cst_memchr$0 = cst_memchr$1;
   function invalid_bounds(op, buffer_len, off, len){
    var message = caml_call5(Stdlib_Printf[4], _a_, op, buffer_len, off, len);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], message], 1);
   }
   function invalid_bounds_blit(op, src_len, src_off, dst_len, dst_off, len){
    var
     message =
       caml_call7
        (Stdlib_Printf[4], _b_, op, src_len, src_off, dst_len, dst_off, len);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], message], 1);
   }
   function invalid_bounds_memcmp
   (op, buf1_len, buf1_off, buf2_len, buf2_off, len){
    var
     message =
       caml_call7
        (Stdlib_Printf[4],
         _c_,
         op,
         buf1_len,
         buf1_off,
         buf2_len,
         buf2_off,
         len);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], message], 1);
   }
   function copy(t, off, len){
    var buffer_len = caml_ba_dim_1(t), _ax_ = len < 0 ? 1 : 0;
    if(_ax_)
     var _ay_ = _ax_;
    else
     var
      _az_ = off < 0 ? 1 : 0,
      _ay_ = _az_ || ((buffer_len - off | 0) < len ? 1 : 0);
    if(_ay_) invalid_bounds(cst_copy, buffer_len, off, len);
    var dst = create(len);
    runtime.bigstringaf_blit_to_bigstring(t, off, dst, 0, len);
    return dst;
   }
   function substring(t, off, len){
    var buffer_len = caml_ba_dim_1(t), _au_ = len < 0 ? 1 : 0;
    if(_au_)
     var _av_ = _au_;
    else
     var
      _aw_ = off < 0 ? 1 : 0,
      _av_ = _aw_ || ((buffer_len - off | 0) < len ? 1 : 0);
    if(_av_) invalid_bounds(cst_substring, buffer_len, off, len);
    var b = caml_create_bytes(len);
    runtime.bigstringaf_blit_to_bytes(t, off, b, 0, len);
    return caml_call1(Stdlib_Bytes[44], b);
   }
   function to_string(t){
    var len = caml_ba_dim_1(t), b = caml_create_bytes(len);
    runtime.bigstringaf_blit_to_bytes(t, 0, b, 0, len);
    return caml_call1(Stdlib_Bytes[44], b);
   }
   function of_string(off, len, s){
    var buffer_len = caml_ml_string_length(s), _ar_ = len < 0 ? 1 : 0;
    if(_ar_)
     var _as_ = _ar_;
    else
     var
      _at_ = off < 0 ? 1 : 0,
      _as_ = _at_ || ((buffer_len - off | 0) < len ? 1 : 0);
    if(_as_) invalid_bounds(cst_of_string, buffer_len, off, len);
    var b = create(len);
    runtime.bigstringaf_blit_from_bytes(s, off, b, 0, len);
    return b;
   }
   function blit(src, src_off, dst, dst_off, len){
    var src_len = caml_ba_dim_1(src), dst_len = caml_ba_dim_1(dst);
    if(len < 0)
     invalid_bounds_blit(cst_blit, src_len, src_off, dst_len, dst_off, len);
    var
     _an_ = src_off < 0 ? 1 : 0,
     _ao_ = _an_ || ((src_len - src_off | 0) < len ? 1 : 0);
    if(_ao_)
     invalid_bounds_blit(cst_blit$0, src_len, src_off, dst_len, dst_off, len);
    var
     _ap_ = dst_off < 0 ? 1 : 0,
     _aq_ = _ap_ || ((dst_len - dst_off | 0) < len ? 1 : 0);
    if(_aq_)
     invalid_bounds_blit(cst_blit$1, src_len, src_off, dst_len, dst_off, len);
    return runtime.bigstringaf_blit_to_bigstring
            (src, src_off, dst, dst_off, len);
   }
   function blit_from_string(src, src_off, dst, dst_off, len){
    var src_len = caml_ml_string_length(src), dst_len = caml_ba_dim_1(dst);
    if(len < 0)
     invalid_bounds_blit
      (cst_blit_from_string, src_len, src_off, dst_len, dst_off, len);
    var
     _aj_ = src_off < 0 ? 1 : 0,
     _ak_ = _aj_ || ((src_len - src_off | 0) < len ? 1 : 0);
    if(_ak_)
     invalid_bounds_blit
      (cst_blit_from_string$0, src_len, src_off, dst_len, dst_off, len);
    var
     _al_ = dst_off < 0 ? 1 : 0,
     _am_ = _al_ || ((dst_len - dst_off | 0) < len ? 1 : 0);
    if(_am_)
     invalid_bounds_blit
      (cst_blit_from_string$1, src_len, src_off, dst_len, dst_off, len);
    return runtime.bigstringaf_blit_from_bytes
            (src, src_off, dst, dst_off, len);
   }
   function blit_from_bytes(src, src_off, dst, dst_off, len){
    var src_len = caml_ml_bytes_length(src), dst_len = caml_ba_dim_1(dst);
    if(len < 0)
     invalid_bounds_blit
      (cst_blit_from_bytes, src_len, src_off, dst_len, dst_off, len);
    var
     _af_ = src_off < 0 ? 1 : 0,
     _ag_ = _af_ || ((src_len - src_off | 0) < len ? 1 : 0);
    if(_ag_)
     invalid_bounds_blit
      (cst_blit_from_bytes$0, src_len, src_off, dst_len, dst_off, len);
    var
     _ah_ = dst_off < 0 ? 1 : 0,
     _ai_ = _ah_ || ((dst_len - dst_off | 0) < len ? 1 : 0);
    if(_ai_)
     invalid_bounds_blit
      (cst_blit_from_bytes$1, src_len, src_off, dst_len, dst_off, len);
    return runtime.bigstringaf_blit_from_bytes
            (src, src_off, dst, dst_off, len);
   }
   function blit_to_bytes(src, src_off, dst, dst_off, len){
    var src_len = caml_ba_dim_1(src), dst_len = caml_ml_bytes_length(dst);
    if(len < 0)
     invalid_bounds_blit
      (cst_blit_to_bytes, src_len, src_off, dst_len, dst_off, len);
    var
     _ab_ = src_off < 0 ? 1 : 0,
     _ac_ = _ab_ || ((src_len - src_off | 0) < len ? 1 : 0);
    if(_ac_)
     invalid_bounds_blit
      (cst_blit_to_bytes$0, src_len, src_off, dst_len, dst_off, len);
    var
     _ad_ = dst_off < 0 ? 1 : 0,
     _ae_ = _ad_ || ((dst_len - dst_off | 0) < len ? 1 : 0);
    if(_ae_)
     invalid_bounds_blit
      (cst_blit_to_bytes$1, src_len, src_off, dst_len, dst_off, len);
    return runtime.bigstringaf_blit_to_bytes(src, src_off, dst, dst_off, len);
   }
   function memcmp(buf1, buf1_off, buf2, buf2_off, len){
    var buf1_len = caml_ba_dim_1(buf1), buf2_len = caml_ba_dim_1(buf2);
    if(len < 0)
     invalid_bounds_memcmp
      (cst_memcmp, buf1_len, buf1_off, buf2_len, buf2_off, len);
    var
     _Z_ = buf1_off < 0 ? 1 : 0,
     ___ = _Z_ || ((buf1_len - buf1_off | 0) < len ? 1 : 0);
    if(___)
     invalid_bounds_memcmp
      (cst_memcmp$0, buf1_len, buf1_off, buf2_len, buf2_off, len);
    var
     _$_ = buf2_off < 0 ? 1 : 0,
     _aa_ = _$_ || ((buf2_len - buf2_off | 0) < len ? 1 : 0);
    if(_aa_)
     invalid_bounds_memcmp
      (cst_memcmp$1, buf1_len, buf1_off, buf2_len, buf2_off, len);
    return runtime.bigstringaf_memcmp_bigstring
            (buf1, buf1_off, buf2, buf2_off, len);
   }
   function memcmp_string(buf1, buf1_off, buf2, buf2_off, len){
    var
     buf1_len = caml_ba_dim_1(buf1),
     buf2_len = caml_ml_string_length(buf2);
    if(len < 0)
     invalid_bounds_memcmp
      (cst_memcmp_string, buf1_len, buf1_off, buf2_len, buf2_off, len);
    var
     _V_ = buf1_off < 0 ? 1 : 0,
     _W_ = _V_ || ((buf1_len - buf1_off | 0) < len ? 1 : 0);
    if(_W_)
     invalid_bounds_memcmp
      (cst_memcmp_string$0, buf1_len, buf1_off, buf2_len, buf2_off, len);
    var
     _X_ = buf2_off < 0 ? 1 : 0,
     _Y_ = _X_ || ((buf2_len - buf2_off | 0) < len ? 1 : 0);
    if(_Y_)
     invalid_bounds_memcmp
      (cst_memcmp_string$1, buf1_len, buf1_off, buf2_len, buf2_off, len);
    return runtime.bigstringaf_memcmp_string
            (buf1, buf1_off, buf2, buf2_off, len);
   }
   function memchr(buf, buf_off, chr, len){
    var buf_len = caml_ba_dim_1(buf);
    if(len < 0) invalid_bounds(cst_memchr, buf_len, buf_off, len);
    var
     _T_ = buf_off < 0 ? 1 : 0,
     _U_ = _T_ || ((buf_len - buf_off | 0) < len ? 1 : 0);
    if(_U_) invalid_bounds(cst_memchr$0, buf_len, buf_off, len);
    return runtime.bigstringaf_memchr(buf, buf_off, chr, len);
   }
   function caml_bigstring_set_16(bs, off, i){
    return caml_ba_uint8_set16(bs, off, caml_bswap16(i));
   }
   function caml_bigstring_set_32(bs, off, i){
    return caml_ba_uint8_set32(bs, off, caml_int32_bswap(i));
   }
   function caml_bigstring_set_64(bs, off, i){
    return caml_ba_uint8_set64(bs, off, caml_int64_bswap(i));
   }
   function caml_bigstring_get_16(bs, off){
    return caml_bswap16(caml_ba_uint8_get16(bs, off));
   }
   function caml_bigstring_get_32(bs, off){
    return caml_int32_bswap(caml_ba_uint8_get32(bs, off));
   }
   function caml_bigstring_get_64(bs, off){
    return caml_int64_bswap(caml_ba_uint8_get64(bs, off));
   }
   function get_int16_sign_extended(x, off){
    var _R_ = Stdlib_Sys[10] - 16 | 0, _S_ = Stdlib_Sys[10] - 16 | 0;
    return caml_bigstring_get_16(x, off) << _S_ >> _R_;
   }
   if(Stdlib_Sys[11])
    var
     set_int16_be = caml_ba_uint8_set16,
     set_int16_le = caml_bigstring_set_16;
   else
    var
     set_int16_be = caml_bigstring_set_16,
     set_int16_le = caml_ba_uint8_set16;
   if(Stdlib_Sys[11])
    var
     set_int32_be = caml_ba_uint8_set32,
     set_int32_le = caml_bigstring_set_32;
   else
    var
     set_int32_be = caml_bigstring_set_32,
     set_int32_le = caml_ba_uint8_set32;
   if(Stdlib_Sys[11])
    var
     set_int64_be = caml_ba_uint8_set64,
     set_int64_le = caml_bigstring_set_64;
   else
    var
     set_int64_be = caml_bigstring_set_64,
     set_int64_le = caml_ba_uint8_set64;
   if(Stdlib_Sys[11])
    var
     get_int16_be = caml_ba_uint8_get16,
     get_int16_le = caml_bigstring_get_16;
   else
    var
     get_int16_be = caml_bigstring_get_16,
     get_int16_le = caml_ba_uint8_get16;
   function get_int16_sign_extended_noswap(x, off){
    var _P_ = Stdlib_Sys[10] - 16 | 0, _Q_ = Stdlib_Sys[10] - 16 | 0;
    return caml_ba_uint8_get16(x, off) << _Q_ >> _P_;
   }
   if(Stdlib_Sys[11])
    var
     get_int16_sign_extended_noswap$0 = get_int16_sign_extended_noswap,
     get_int16_sign_extended_le = get_int16_sign_extended;
   else
    var
     get_int16_sign_extended_noswap$0 = get_int16_sign_extended,
     get_int16_sign_extended_le = get_int16_sign_extended_noswap;
   if(Stdlib_Sys[11])
    var
     get_int32_be = caml_ba_uint8_get32,
     get_int32_le = caml_bigstring_get_32;
   else
    var
     get_int32_be = caml_bigstring_get_32,
     get_int32_le = caml_ba_uint8_get32;
   if(Stdlib_Sys[11])
    var
     get_int64_be = caml_ba_uint8_get64,
     get_int64_le = caml_bigstring_get_64;
   else
    var
     get_int64_be = caml_bigstring_get_64,
     get_int64_le = caml_ba_uint8_get64;
   function caml_bigstring_unsafe_set_16(bs, off, i){
    return caml_ba_uint8_set16(bs, off, caml_bswap16(i));
   }
   function caml_bigstring_unsafe_set_32(bs, off, i){
    return caml_ba_uint8_set32(bs, off, caml_int32_bswap(i));
   }
   function caml_bigstring_unsafe_set_64(bs, off, i){
    return caml_ba_uint8_set64(bs, off, caml_int64_bswap(i));
   }
   function caml_bigstring_unsafe_get_16(bs, off){
    return caml_bswap16(caml_ba_uint8_get16(bs, off));
   }
   function caml_bigstring_unsafe_get_32(bs, off){
    return caml_int32_bswap(caml_ba_uint8_get32(bs, off));
   }
   function caml_bigstring_unsafe_get_64(bs, off){
    return caml_int64_bswap(caml_ba_uint8_get64(bs, off));
   }
   if(Stdlib_Sys[11])
    var
     unsafe_set_int16_be = caml_ba_uint8_set16,
     unsafe_set_int16_le = caml_bigstring_unsafe_set_16;
   else
    var
     unsafe_set_int16_be = caml_bigstring_unsafe_set_16,
     unsafe_set_int16_le = caml_ba_uint8_set16;
   if(Stdlib_Sys[11])
    var
     unsafe_set_int32_be = caml_ba_uint8_set32,
     unsafe_set_int32_le = caml_bigstring_unsafe_set_32;
   else
    var
     unsafe_set_int32_be = caml_bigstring_unsafe_set_32,
     unsafe_set_int32_le = caml_ba_uint8_set32;
   if(Stdlib_Sys[11])
    var
     unsafe_set_int64_be = caml_ba_uint8_set64,
     unsafe_set_int64_le = caml_bigstring_unsafe_set_64;
   else
    var
     unsafe_set_int64_be = caml_bigstring_unsafe_set_64,
     unsafe_set_int64_le = caml_ba_uint8_set64;
   if(Stdlib_Sys[11])
    var
     unsafe_get_int16_be = caml_ba_uint8_get16,
     unsafe_get_int16_le = caml_bigstring_unsafe_get_16;
   else
    var
     unsafe_get_int16_be = caml_bigstring_unsafe_get_16,
     unsafe_get_int16_le = caml_ba_uint8_get16;
   function unsafe_get_int16_sign_extended(x, off){
    var _N_ = Stdlib_Sys[10] - 16 | 0, _O_ = Stdlib_Sys[10] - 16 | 0;
    return unsafe_get_int16_le(x, off) << _O_ >> _N_;
   }
   function unsafe_get_int16_sign_extended$0(x, off){
    var _L_ = Stdlib_Sys[10] - 16 | 0, _M_ = Stdlib_Sys[10] - 16 | 0;
    return unsafe_get_int16_be(x, off) << _M_ >> _L_;
   }
   if(Stdlib_Sys[11])
    var
     unsafe_get_int32_be = caml_ba_uint8_get32,
     unsafe_get_int32_le = caml_bigstring_unsafe_get_32;
   else
    var
     unsafe_get_int32_be = caml_bigstring_unsafe_get_32,
     unsafe_get_int32_le = caml_ba_uint8_get32;
   if(Stdlib_Sys[11])
    var
     unsafe_get_int64_be = caml_ba_uint8_get64,
     unsafe_get_int64_le = caml_bigstring_unsafe_get_64;
   else
    var
     unsafe_get_int64_be = caml_bigstring_unsafe_get_64,
     unsafe_get_int64_le = caml_ba_uint8_get64;
   var
    Bigstringaf =
      [0,
       create,
       empty,
       of_string,
       copy,
       sub,
       length,
       substring,
       to_string,
       get_int16_le,
       get_int16_sign_extended_le,
       set_int16_le,
       get_int32_le,
       set_int32_le,
       get_int64_le,
       set_int64_le,
       get_int16_be,
       get_int16_sign_extended_noswap$0,
       set_int16_be,
       get_int32_be,
       set_int32_be,
       get_int64_be,
       set_int64_be,
       blit,
       blit_from_string,
       blit_from_bytes,
       blit_to_bytes,
       memcmp,
       memcmp_string,
       memchr,
       unsafe_get_int16_le,
       unsafe_get_int16_be,
       unsafe_get_int16_sign_extended,
       unsafe_get_int16_sign_extended$0,
       unsafe_set_int16_le,
       unsafe_set_int16_be,
       unsafe_get_int32_le,
       unsafe_get_int32_be,
       unsafe_set_int32_le,
       unsafe_set_int32_be,
       unsafe_get_int64_le,
       unsafe_get_int64_be,
       unsafe_set_int64_le,
       unsafe_set_int64_be,
       function(_K_, _J_, _I_, _H_, _G_){
        return runtime.bigstringaf_blit_to_bigstring(_K_, _J_, _I_, _H_, _G_);
       },
       function(_F_, _E_, _D_, _C_, _B_){
        return runtime.bigstringaf_blit_from_bytes(_F_, _E_, _D_, _C_, _B_);
       },
       function(_A_, _z_, _y_, _x_, _w_){
        return runtime.bigstringaf_blit_from_bytes(_A_, _z_, _y_, _x_, _w_);
       },
       function(_v_, _u_, _t_, _s_, _r_){
        return runtime.bigstringaf_blit_to_bytes(_v_, _u_, _t_, _s_, _r_);
       },
       function(_q_, _p_, _o_, _n_, _m_){
        return runtime.bigstringaf_memcmp_bigstring(_q_, _p_, _o_, _n_, _m_);
       },
       function(_l_, _k_, _j_, _i_, _h_){
        return runtime.bigstringaf_memcmp_string(_l_, _k_, _j_, _i_, _h_);
       },
       function(_g_, _f_, _e_, _d_){
        return runtime.bigstringaf_memchr(_g_, _f_, _e_, _d_);
       }];
   runtime.caml_register_global(31, Bigstringaf, "Bigstringaf");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
