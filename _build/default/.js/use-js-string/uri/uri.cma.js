// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Uri
//# unitInfo: Requires: Angstrom, CamlinternalLazy, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__Lazy, Stdlib__List, Stdlib__Option, Stdlib__Printf, Stdlib__Result, Stdlib__String, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$34 = "",
    cst$37 = ",",
    cst$36 = ".",
    cst$39 = "..",
    cst$33 = "/",
    cst$38 = "//",
    cst$35 = ":",
    cst_http = "http",
    cst_https = "https",
    cst_int_of_hex_char$1 = "int_of_hex_char",
    cst_localhost$0 = "localhost",
    caml_check_bound = runtime.caml_check_bound,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$32 = cst$33,
    x = cst_http,
    x$0 = cst_https,
    cst$31 = cst$34,
    cst$30 = cst$33,
    cst$28 = cst$34,
    cst$24 = cst$35,
    cst$25 = cst$35,
    cst$26 = "::",
    cst$23 = cst$34,
    cst$21 = cst$36,
    cst$22 = cst$36,
    cst$20 = cst$34,
    cst$19 = cst$34,
    cst$18 = cst$33,
    cst$17 = cst$37,
    cst$16 = cst$33,
    cst$15 = cst$34,
    cst$13 = cst$34,
    cst$14 = cst$34,
    cst$12 = cst$34,
    cst$9 = cst$38,
    cst$10 = cst$35,
    cst$11 = "./",
    cst$8 = cst$37,
    cst$7 = "&",
    cst$6 = cst$33,
    cst$5 = cst$33,
    cst$4 = cst$34,
    cst$2 = cst$33,
    cst$3 = cst$33,
    cst$0 = cst$33,
    cst$1 = cst$33,
    cst = cst$34,
    cst$27 = cst$34,
    cst$29 = cst$38,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Angstrom = global_data.Angstrom,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stringext = global_data.Stringext,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Result = global_data.Stdlib__Result;
   function iter_concat(fn, sep, buf, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var last = param$0[1];
     if(! param$0[2]) return caml_call2(fn, buf, last);
     var rest = param$0[2];
     caml_call2(fn, buf, last);
     caml_call2(Stdlib_Buffer[16], buf, sep);
     param$0 = rest;
    }
   }
   function compare_opt(c, t$0, t){
    if(! t$0) return t ? -1 : 0;
    var a = t$0[1];
    if(! t) return 1;
    var b = t[1];
    return caml_call2(c, a, b);
   }
   function compare_list(f, t$0, t){
    var t$2 = t$0, t$1 = t;
    for(;;){
     if(! t$2) return t$1 ? -1 : 0;
     var xs = t$2[2], x = t$2[1];
     if(! t$1) return 1;
     var ys = t$1[2], y = t$1[1], c = caml_call2(f, x, y);
     if(0 !== c) return c;
     t$2 = xs;
     t$1 = ys;
    }
   }
   function sub_delims(a){
    var i = 0;
    for(;;){
     var c = caml_string_get("!$&'()*+,;=", i);
     caml_check_bound(a, c)[1 + c] = 1;
     var _dg_ = i + 1 | 0;
     if(10 === i) return a;
     i = _dg_;
    }
   }
   var
    safe_chars = caml_make_vect(256, 0),
    i = 0,
    _au_ = [0, 0],
    _ap_ = [0, 3854881, "host is required for HTTP(S) uris"],
    _ar_ = [0, -1042355253],
    _as_ = [0, 804243368],
    _aq_ =
      [0,
       [11,
        "Only http and https URIs are supported. ",
        [2, 0, [11, " is invalid.", 0]]],
       "Only http and https URIs are supported. %s is invalid."],
    _at_ = [1, [0, 3854881, "No scheme present in URI"]],
    _ao_ = [0, cst$34],
    _an_ = [0, 0],
    _v_ = [0, 0, 0],
    cst_too_many_parts_in_IPv6_add = "too many parts in IPv6 address",
    _u_ = [0, cst$34, 0],
    cst_invalid_octect = "invalid octect",
    _k_ = [0, [11, "/?", [2, 0, 0]], "/?%s"],
    _j_ = [0, [2, 0, [12, 63, [2, 0, 0]]], "%s?%s"],
    cst_localhost = cst_localhost$0,
    _f_ = [0, cst$34, 0],
    _g_ = [0, cst$34, 0],
    _h_ = [0, 2],
    _i_ = [0, [0, cst$34, 0], 0],
    _c_ = [0, 2],
    _d_ = [0, cst$34, 0],
    cst_int_of_hex_char = cst_int_of_hex_char$1,
    cst_int_of_hex_char$0 = cst_int_of_hex_char$1,
    _b_ = [0, [12, 37, [4, 8, [0, 2, 2], 0, 0]], "%%%02X"],
    _a_ = [0, cst$33, 0],
    _W_ = [0, 0, 0, 0];
   for(;;){
    var
     c =
       caml_string_get
        ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-~",
         i);
    caml_check_bound(safe_chars, c)[1 + c] = 1;
    var _av_ = i + 1 | 0;
    if(65 === i) break;
    i = _av_;
   }
   var pchar = sub_delims(caml_call1(Stdlib_Array[7], safe_chars));
   caml_check_bound(pchar, 58)[59] = 1;
   caml_check_bound(pchar, 64)[65] = 1;
   var safe_chars_for_scheme = caml_call1(Stdlib_Array[7], safe_chars);
   caml_check_bound(safe_chars_for_scheme, 43)[44] = 1;
   var safe_chars_for_path = sub_delims(caml_call1(Stdlib_Array[7], pchar));
   caml_check_bound(safe_chars_for_path, 47)[48] = 0;
   var safe_chars_for_query = caml_call1(Stdlib_Array[7], pchar);
   caml_check_bound(safe_chars_for_query, 47)[48] = 1;
   caml_check_bound(safe_chars_for_query, 63)[64] = 1;
   caml_check_bound(safe_chars_for_query, 38)[39] = 0;
   caml_check_bound(safe_chars_for_query, 59)[60] = 0;
   caml_check_bound(safe_chars_for_query, 43)[44] = 0;
   var
    safe_chars_for_query_key =
      caml_call1(Stdlib_Array[7], safe_chars_for_query);
   caml_check_bound(safe_chars_for_query_key, 61)[62] = 0;
   var
    safe_chars_for_query_value =
      caml_call1(Stdlib_Array[7], safe_chars_for_query);
   caml_check_bound(safe_chars_for_query_value, 44)[45] = 0;
   var safe_chars_for_userinfo = caml_call1(Stdlib_Array[7], safe_chars);
   caml_check_bound(safe_chars_for_userinfo, 58)[59] = 0;
   function safe_chars_for_component(param){
    if(typeof param === "number")
     if(-145160102 <= param){
      if(127343601 <= param){
       if(795008922 === param) return safe_chars_for_query_value;
       if(892015045 === param) return safe_chars_for_path;
      }
      else if(61643255 !== param && 127343600 <= param)
       return safe_chars_for_query;
     }
     else if(-250086679 <= param){
      if(-178940859 === param) return safe_chars_for_scheme;
      if(-145160103 <= param) return safe_chars_for_userinfo;
     }
     else{
      if(-911188600 === param) return safe_chars_for_query_key;
      if(-250086680 <= param) return safe_chars_for_query;
     }
    else if(-198771759 === param[1]){
     var
      match = param[2],
      unsafe = match[3],
      safe = match[2],
      component = match[1],
      _c$_ = safe_chars_for_component(component),
      safe_chars$0 = caml_call1(Stdlib_Array[7], _c$_),
      _db_ = caml_ml_string_length(safe) - 1 | 0,
      _da_ = 0;
     if(_db_ >= 0){
      var i$0 = _da_;
      for(;;){
       var c$0 = caml_string_get(safe, i$0);
       caml_check_bound(safe_chars$0, c$0)[1 + c$0] = 1;
       var _df_ = i$0 + 1 | 0;
       if(_db_ === i$0) break;
       i$0 = _df_;
      }
     }
     var _dd_ = caml_ml_string_length(unsafe) - 1 | 0, _dc_ = 0;
     if(_dd_ >= 0){
      var i = _dc_;
      for(;;){
       var c = caml_string_get(unsafe, i);
       caml_check_bound(safe_chars$0, c)[1 + c] = 0;
       var _de_ = i + 1 | 0;
       if(_dd_ === i) break;
       i = _de_;
      }
     }
     return safe_chars$0;
    }
    return safe_chars;
   }
   function normalize_host(hso){return hso;}
   function canonicalize_port(port){return port;}
   function canonicalize_path(path){return path;}
   var
    Generic =
      [0,
       safe_chars_for_component,
       normalize_host,
       canonicalize_port,
       canonicalize_path],
    safe_chars_for_component$0 = Generic[1];
   function normalize_host$0(hs){return caml_call1(Stdlib_String[27], hs);}
   function canonicalize_port$0(param){
    if(! param) return 0;
    var x = param[1];
    return 80 === x ? 0 : [0, x];
   }
   function canonicalize_path$0(x){return x ? x : _a_;}
   var
    Http =
      [0,
       safe_chars_for_component$0,
       normalize_host$0,
       canonicalize_port$0,
       canonicalize_path$0],
    safe_chars_for_component$1 = Http[1],
    normalize_host$1 = Http[2],
    canonicalize_path$1 = Http[4];
   function canonicalize_port$1(param){
    if(! param) return 0;
    var x = param[1];
    return 443 === x ? 0 : [0, x];
   }
   var
    Https =
      [0,
       safe_chars_for_component$1,
       normalize_host$1,
       canonicalize_port$1,
       canonicalize_path$1],
    safe_chars_for_component$2 = Generic[1],
    canonicalize_port$2 = Generic[3],
    canonicalize_path$2 = Generic[4];
   function normalize_host$2(hs){
    var hs$0 = caml_call1(Stdlib_String[27], hs);
    return hs$0 === cst_localhost$0 ? cst : hs$0;
   }
   var
    File =
      [0,
       safe_chars_for_component$2,
       normalize_host$2,
       canonicalize_port$2,
       canonicalize_path$2],
    safe_chars_for_component$3 = Generic[1],
    normalize_host$3 = Generic[2],
    canonicalize_port$3 = Generic[3],
    canonicalize_path$3 = Generic[4],
    Urn =
      [0,
       safe_chars_for_component$3,
       normalize_host$3,
       canonicalize_port$3,
       canonicalize_path$3];
   function module_of_scheme(param){
    if(! param) return Generic;
    var s = param[1], match = caml_call1(Stdlib_String[27], s);
    return match !== "file"
            ? match
              !== cst_http
              ? match !== cst_https ? match !== "urn" ? Generic : Urn : Https
              : Http
            : File;
   }
   function encode(scheme, opt, b){
    var
     component = opt ? opt[1] : 892015045,
     Scheme = module_of_scheme(scheme),
     safe_chars = Scheme[1].call(null, component),
     len = caml_ml_string_length(b),
     buf = caml_call1(Stdlib_Buffer[1], len),
     start = 0,
     cur = 0;
    for(;;){
     if(len <= cur){
      caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
      return caml_call1(Stdlib_Buffer[2], buf);
     }
     var c = caml_string_get(b, cur);
     if(caml_check_bound(safe_chars, c)[1 + c]){var cur$0 = cur + 1 | 0; cur = cur$0;}
     else{
      if(start < cur)
       caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
      var _c__ = caml_call2(Stdlib_Printf[4], _b_, c);
      caml_call2(Stdlib_Buffer[16], buf, _c__);
      var cur$1 = cur + 1 | 0, start$0 = cur + 1 | 0;
      start = start$0;
      cur = cur$1;
     }
    }
   }
   function int_of_hex_char(c){
    var c$0 = caml_call1(Stdlib_Char[4], c) - 48 | 0;
    if(9 >= c$0)
     return 0 <= c$0 ? c$0 : caml_call1(Stdlib[2], cst_int_of_hex_char$0);
    if(16 < c$0 && 23 > c$0) return c$0 - 7 | 0;
    return caml_call1(Stdlib[2], cst_int_of_hex_char);
   }
   function decode(b){
    var
     len = caml_ml_string_length(b),
     buf = caml_call1(Stdlib_Buffer[1], len),
     start = 0,
     cur = 0;
    for(;;){
     if(len <= cur)
      caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
     else{
      if(37 !== caml_string_get(b, cur)){
       var cur$1 = cur + 1 | 0;
       cur = cur$1;
       continue;
      }
      caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
      var start$0 = cur + 1 | 0;
      if(len <= start$0)
       caml_call2(Stdlib_Buffer[12], buf, 37);
      else{
       try{var highbits = int_of_hex_char(caml_string_get(b, start$0));}
       catch(_c9_){
        caml_call2(Stdlib_Buffer[12], buf, 37);
        start = start$0;
        cur = start$0;
        continue;
       }
       var cur$0 = start$0 + 1 | 0;
       if(len > cur$0){
        a:
        {
         try{var lowbits = int_of_hex_char(caml_string_get(b, cur$0));}
         catch(_c8_){
          caml_call2(Stdlib_Buffer[12], buf, 37);
          var _c6_ = caml_string_get(b, cur$0 - 1 | 0);
          caml_call2(Stdlib_Buffer[12], buf, _c6_);
          var start_at = cur$0;
          break a;
         }
         var _c7_ = caml_call1(Stdlib_Char[1], (highbits << 4) + lowbits | 0);
         caml_call2(Stdlib_Buffer[12], buf, _c7_);
         var start_at = cur$0 + 1 | 0;
        }
        start = start_at;
        cur = start_at;
        continue;
       }
       caml_call2(Stdlib_Buffer[12], buf, 37);
       var _c5_ = caml_string_get(b, cur$0 - 1 | 0);
       caml_call2(Stdlib_Buffer[12], buf, _c5_);
      }
     }
     return caml_call1(Stdlib_Buffer[2], buf);
    }
   }
   function pct_encode(scheme, opt, s){
    var
     component = opt ? opt[1] : 892015045,
     x = encode(scheme, [0, component], s);
    return x;
   }
   function pct_encoder(_c4_, _c3_, _c2_, _c1_, _c0_, _cZ_, opt, param){
    var
     scheme = _c4_ ? _c4_[1] : -178940859,
     userinfo = _c3_ ? _c3_[1] : -145160103,
     host = _c2_ ? _c2_[1] : 803994504,
     path = _c1_ ? _c1_[1] : 892015045,
     query_key = _c0_ ? _c0_[1] : -911188600,
     query_value = _cZ_ ? _cZ_[1] : 795008922,
     fragment = opt ? opt[1] : 127343600;
    return [0, scheme, userinfo, host, path, query_key, query_value, fragment];
   }
   function pct_decode(s){var x = decode(s); return x;}
   function compare(_cY_, param){
    var
     p = param[2],
     u = param[1],
     p$0 = _cY_[2],
     u$0 = _cY_[1],
     c = caml_call2(Stdlib_String[10], u$0, u);
    return 0 === c ? compare_opt(Stdlib_String[10], p$0, p) : c;
   }
   function userinfo_of_encoded(us){
    var match = caml_call3(Stringext[3], _c_, us, 58);
    if(! match) return _d_;
    var match$0 = match[2], u = match[1];
    if(match$0){
     var p = match$0[1], x$0 = decode(p), x = decode(u);
     return [0, x, [0, x$0]];
    }
    var x$1 = decode(u);
    return [0, x$1, 0];
   }
   function encoded_of_userinfo(scheme, component){
    return function(param){
     var po = param[2], u = param[1];
     if(po) var p = po[1], _cV_ = caml_ml_string_length(p); else var _cV_ = 0;
     var
      len = (1 + caml_ml_string_length(u) | 0) + _cV_ | 0,
      buf = caml_call1(Stdlib_Buffer[1], len),
      _cW_ = pct_encode(scheme, [0, component], u);
     caml_call2(Stdlib_Buffer[16], buf, _cW_);
     if(po){
      var p$0 = po[1];
      caml_call2(Stdlib_Buffer[12], buf, 58);
      var _cX_ = pct_encode(scheme, [0, component], p$0);
      caml_call2(Stdlib_Buffer[16], buf, _cX_);
     }
     var x = caml_call1(Stdlib_Buffer[2], buf);
     return x;};
   }
   function path_of_encoded(ps){
    var tokl = caml_call2(Stringext[4], ps, 47);
    return caml_call2(Stdlib_List[20], pct_decode, tokl);
   }
   function remove_dot_segments(p){
    var
     revp = caml_call1(Stdlib_List[10], p),
     ascension = 0,
     outp = 0,
     param$0 = revp;
    for(;;){
     a:
     {
      b:
      if(param$0){
       var _cR_ = param$0[1];
       c:
       {
        if(_cR_ !== cst$36){
         if(_cR_ !== cst$39){
          if(_cR_ !== cst$33) break a;
          var _cT_ = param$0[2];
          if(! _cT_) break b;
          var _cU_ = _cT_[1];
          if(_cU_ === cst$36){var r$3 = _cT_[2]; break c;}
          if(_cU_ !== cst$39){
           if(_cU_ === cst$33){
            var r$1 = _cT_[2];
            if(0 < ascension){
             var ascension$1 = ascension - 1 | 0;
             ascension = ascension$1;
             param$0 = [0, cst$2, r$1];
             continue;
            }
           }
           var r$0 = _cT_[2];
           if(0 >= ascension) break a;
           var ascension$0 = ascension - 1 | 0;
           ascension = ascension$0;
           param$0 = r$0;
           continue;
          }
          var r$2 = _cT_[2];
         }
         else
          var r$2 = param$0[2];
         var ascension$2 = ascension + 1 | 0;
         ascension = ascension$2;
         param$0 = r$2;
         continue;
        }
        var r$3 = param$0[2];
       }
       param$0 = r$3;
       continue;
      }
      if
       (0 < caml_call1(Stdlib_List[1], p)
        && caml_call1(Stdlib_List[6], p) === cst$33)
       return [0, cst$3, outp];
     }
     if(! param$0) break;
     var r = param$0[2], s = param$0[1], outp$0 = [0, s, outp];
     ascension = 0;
     outp = outp$0;
     param$0 = r;
    }
    if(0 >= ascension){
     if
      (0 < caml_call1(Stdlib_List[1], outp)
       && caml_call1(Stdlib_List[6], outp) === cst$33)
      return caml_call1(Stdlib_List[7], outp);
     return outp;
    }
    var lst = caml_call1(Stdlib_Array[10], caml_make_vect(ascension, cst$39));
    if(lst){
     var t = lst[2], h = lst[1], acc$1 = [0, h, 0], acc = acc$1, param = t;
     for(;;){
      if(! param){var _cS_ = acc; break;}
      var xs = param[2], x = param[1], acc$0 = [0, x, [0, cst$0, acc]];
      acc = acc$0;
      param = xs;
     }
    }
    else
     var _cS_ = 0;
    return caml_call2(Stdlib_List[13], [0, cst$1, _cS_], outp);
   }
   function encoded_of_path(scheme, component){
    return function(p){
     var
      len =
        caml_call3
         (Stdlib_List[26],
          function(c, tok){return caml_ml_string_length(tok) + c | 0;},
          0,
          p),
      buf = caml_call1(Stdlib_Buffer[1], len);
     iter_concat
      (function(buf, seg){
        if(seg === cst$33) return caml_call2(Stdlib_Buffer[12], buf, 47);
        var _cQ_ = pct_encode(scheme, [0, component], seg);
        return caml_call2(Stdlib_Buffer[16], buf, _cQ_);
       },
       cst$4,
       buf,
       p);
     var x = caml_call1(Stdlib_Buffer[2], buf);
     return x;};
   }
   function query_of_encoded(qs){
    var els = caml_call3(Stringext[3], 0, qs, 38);
    function plus_to_space(s){
     var
      s$0 = caml_call1(Stdlib_Bytes[45], s),
      _cO_ = runtime.caml_ml_bytes_length(s$0) - 1 | 0,
      _cN_ = 0;
     if(_cO_ >= 0){
      var i = _cN_;
      for(;;){
       if(43 === runtime.caml_bytes_get(s$0, i))
        runtime.caml_bytes_set(s$0, i, 32);
       var _cP_ = i + 1 | 0;
       if(_cO_ === i) break;
       i = _cP_;
      }
     }
     return caml_call1(Stdlib_Bytes[44], s$0);
    }
    if(els){
     var
      acc = 0,
      param =
        caml_call2
         (Stdlib_List[22],
          function(el){return caml_call3(Stringext[3], _h_, el, 61);},
          els);
     for(;;){
      if(! param) break;
      var _cJ_ = param[1];
      if(_cJ_){
       var match = _cJ_[2], k = _cJ_[1];
       if(match){
        var
         tl = param[2],
         v = match[1],
         _cK_ = plus_to_space(v),
         l = caml_call3(Stringext[3], 0, _cK_, 44),
         l$0 = l || _f_,
         n = [0, plus_to_space(k), l$0],
         acc$0 = [0, n, acc];
        acc = acc$0;
        param = tl;
       }
       else{
        var
         tl$0 = param[2],
         n$0 = [0, plus_to_space(k), 0],
         acc$1 = [0, n$0, acc];
        acc = acc$1;
        param = tl$0;
       }
      }
      else{
       var tl$1 = param[2], acc$2 = [0, _g_, acc];
       acc = acc$2;
       param = tl$1;
      }
     }
     var _cL_ = acc;
    }
    else
     var _cL_ = _i_;
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var
               v = param[2],
               k = param[1],
               _cM_ = caml_call2(Stdlib_List[20], pct_decode, v),
               x = decode(k);
              return [0, x, _cM_];
             },
             _cL_);
   }
   function encoded_of_query(scheme, opt, l){
    var
     pct_encoder$0 = opt ? opt[1] : pct_encoder(0, 0, 0, 0, 0, 0, 0, 0),
     len =
       caml_call3
        (Stdlib_List[26],
         function(a, param){
          var v = param[2], k = param[1];
          return ((a + caml_ml_string_length(k) | 0)
                 +
                  caml_call3
                   (Stdlib_List[26],
                    function(a, s){
                     return (a + caml_ml_string_length(s) | 0) + 1 | 0;
                    },
                    0,
                    v)
                 | 0)
                 + 2
                 | 0;
         },
         -1,
         l),
     buf = caml_call1(Stdlib_Buffer[1], len);
    iter_concat
     (function(buf, param){
       var
        v = param[2],
        k = param[1],
        _cG_ = pct_encode(scheme, [0, pct_encoder$0[5]], k);
       caml_call2(Stdlib_Buffer[16], buf, _cG_);
       var _cH_ = 0 !== v ? 1 : 0;
       return _cH_
               ? (caml_call2
                  (Stdlib_Buffer[12], buf, 61),
                 iter_concat
                  (function(buf, s){
                    var _cI_ = pct_encode(scheme, [0, pct_encoder$0[6]], s);
                    return caml_call2(Stdlib_Buffer[16], buf, _cI_);
                   },
                   cst$8,
                   buf,
                   v))
               : _cH_;
      },
      cst$7,
      buf,
      l);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function of_raw(qs){
    var
     lazy_query =
       caml_call1
        (Stdlib_Lazy[6], function(param){return query_of_encoded(qs);});
    return [1, [0, qs], lazy_query];
   }
   function kv(param){
    if(0 === param[0])
     var kv = param[1];
    else{
     var _cD_ = param[2], _cE_ = caml_obj_tag(_cD_);
     a:
     if(250 === _cE_)
      var _cF_ = _cD_[1];
     else{
      if(246 !== _cE_ && 244 !== _cE_){var _cF_ = _cD_; break a;}
      var _cF_ = caml_call1(CamlinternalLazy[2], _cD_);
     }
     var kv = _cF_;
    }
    return kv;
   }
   function encoded_of_query$0(scheme){
    return function(_cB_, _cC_){return encoded_of_query(scheme, _cB_, _cC_);};
   }
   var
    _e_ = Stdlib_String[10],
    empty = [0, 0, 0, 0, 0, 0, [1, 0, caml_call1(Stdlib_Lazy[4], 0)], 0],
    compare_decoded = Stdlib_String[10];
   function compare_host(h1, h2){
    if(typeof h1 !== "number"){
     var _cA_ = h1[1];
     if(-367671627 === _cA_){
      if(typeof h2 !== "number" && -367671627 === h2[1]){
       var ip2 = h2[2], ip1 = h1[2];
       return caml_call2(Stdlib_String[10], ip1, ip2);
      }
     }
     else
      if(267950263 === _cA_){
       if(typeof h2 !== "number" && 267950263 === h2[1]){
        var ip2$0 = h2[2], ip1$0 = h1[2];
        return caml_call2(Stdlib_String[10], ip1$0, ip2$0);
       }
      }
      else if
       (803994504 === _cA_ && typeof h2 !== "number" && 803994504 === h2[1]){
       var h2$0 = h2[2], h1$0 = h1[2];
       return caml_call2(compare_decoded, h1$0, h2$0);
      }
    }
    return -1;
   }
   function compare$0(t$0, t){
    var c$4 = compare_opt(compare_host, t$0[3], t[3]);
    if(0 !== c$4) return c$4;
    var c$3 = compare_opt(compare_decoded, t$0[1], t[1]);
    if(0 !== c$3) return c$3;
    var
     c =
       compare_opt
        (function(p$0, p){return p$0 < p ? -1 : p < p$0 ? 1 : 0;},
         t$0[4],
         t[4]);
    if(0 !== c) return c;
    var c$0 = compare_opt(compare, t$0[2], t[2]);
    if(0 !== c$0) return c$0;
    var c$2 = compare_list(_e_, t$0[5], t[5]);
    if(0 !== c$2) return c$2;
    var y = t[6], x = t$0[6];
    a:
    {
     if(0 === x[0]){
      var _cs_ = x[1];
      if(0 === y[0])
       var kvl$0 = y[1], kvl = _cs_;
      else{
       var _ct_ = y[2], _cu_ = caml_obj_tag(_ct_);
       b:
       if(250 === _cu_)
        var _cv_ = _ct_[1];
       else{
        if(246 !== _cu_ && 244 !== _cu_){var _cv_ = _ct_; break b;}
        var _cv_ = caml_call1(CamlinternalLazy[2], _ct_);
       }
       var kvl$0 = _cv_, kvl = _cs_;
      }
     }
     else{
      var _cw_ = x[2], raw = x[1];
      if(0 !== y[0]){
       var raw$0 = y[1], c$1 = compare_opt(Stdlib_String[10], raw, raw$0);
       break a;
      }
      var _cx_ = caml_obj_tag(_cw_);
      b:
      if(250 === _cx_)
       var _cy_ = _cw_[1];
      else{
       if(246 !== _cx_ && 244 !== _cx_){var _cy_ = _cw_; break b;}
       var _cy_ = caml_call1(CamlinternalLazy[2], _cw_);
      }
      var kvl$0 = y[1], kvl = _cy_;
     }
     var
      c$1 =
        compare_list
         (function(_cz_, param){
           var
            vl = param[2],
            k = param[1],
            vl$0 = _cz_[2],
            k$0 = _cz_[1],
            c = caml_call2(Stdlib_String[10], k$0, k);
           return 0 === c ? compare_list(Stdlib_String[10], vl$0, vl) : c;
          },
          kvl,
          kvl$0);
    }
    return 0 === c$1 ? compare_opt(compare_decoded, t$0[7], t[7]) : c$1;
   }
   function equal(t$0, t){return 0 === compare$0(t$0, t) ? 1 : 0;}
   function uncast_opt(param){
    if(! param) return 0;
    var h = param[1];
    return [0, h];
   }
   function normalize(schem, init){
    var
     Scheme = module_of_scheme(uncast_opt(schem)),
     _cm_ = init[3],
     _ci_ = init[7],
     _cj_ = init[6],
     _ck_ = init[5],
     _cl_ = init[4];
    if(_cm_){
     var match = _cm_[1], _cn_ = match[1];
     if(267950263 === _cn_)
      var
       host = match[2],
       _co_ = [0, [0, 267950263, Scheme[2].call(null, host)]];
     else if(803994504 <= _cn_)
      var
       host$0 = match[2],
       x$0 = Scheme[2].call(null, host$0),
       _co_ = [0, [0, 803994504, x$0]];
     else
      var
       host$1 = match[2],
       _co_ = [0, [0, -367671627, Scheme[2].call(null, host$1)]];
     var _cp_ = _co_;
    }
    else
     var _cp_ = 0;
    var param = init[1], f = Stdlib_String[27], _cq_ = init[2];
    if(param)
     var x = param[1], _cr_ = [0, caml_call1(f, x)];
    else
     var _cr_ = 0;
    return [0, _cr_, _cq_, _cp_, _cl_, _ck_, _cj_, _ci_];
   }
   function to_string(opt, uri){
    var
     pct_encoder$0 = opt ? opt[1] : pct_encoder(0, 0, 0, 0, 0, 0, 0, 0),
     match = uri[1];
    if(match) var s = match[1], scheme = [0, s]; else var scheme = 0;
    var buf = caml_call1(Stdlib_Buffer[1], 128);
    function add_pct_string(opt, x){
     var
      component = opt ? opt[1] : 892015045,
      x$0 = encode(scheme, [0, component], x);
     return caml_call2(Stdlib_Buffer[16], buf, x$0);
    }
    var match$0 = uri[1];
    if(match$0){
     var x = match$0[1];
     add_pct_string([0, pct_encoder$0[1]], x);
     caml_call2(Stdlib_Buffer[12], buf, 58);
    }
    a:
    {
     var _b5_ = uri[3], _b6_ = uri[4];
     if(! uri[2] && ! _b5_ && ! _b6_){var _b7_ = 0; break a;}
     var _b7_ = 1;
    }
    if(_b7_) caml_call2(Stdlib_Buffer[16], buf, cst$9);
    var match$1 = uri[2];
    if(match$1){
     var
      userinfo = match$1[1],
      x$0 = encoded_of_userinfo(scheme, pct_encoder$0[2])(userinfo);
     caml_call2(Stdlib_Buffer[16], buf, x$0);
     caml_call2(Stdlib_Buffer[12], buf, 64);
    }
    var _b8_ = uri[3];
    if(_b8_){
     var match$2 = _b8_[1], _b9_ = match$2[1];
     if(267950263 === _b9_){
      var host = match$2[2];
      caml_call2(Stdlib_Buffer[12], buf, 91);
      caml_call2(Stdlib_Buffer[16], buf, host);
      caml_call2(Stdlib_Buffer[12], buf, 93);
     }
     else if(803994504 <= _b9_){
      var host$0 = match$2[2];
      add_pct_string([0, pct_encoder$0[3]], host$0);
     }
     else{var host$1 = match$2[2]; caml_call2(Stdlib_Buffer[16], buf, host$1);
     }
    }
    var match$3 = uri[4];
    if(match$3){
     var port = match$3[1];
     caml_call2(Stdlib_Buffer[12], buf, 58);
     var _b__ = caml_call1(Stdlib[33], port);
     caml_call2(Stdlib_Buffer[16], buf, _b__);
    }
    var _b$_ = uri[5];
    if(_b$_){
     var first_segment = _b$_[1];
     if(first_segment !== cst$33){
      if(uri[3])
       caml_call2(Stdlib_Buffer[12], buf, 47);
      else if(caml_call3(Stringext[12], 0, first_segment, cst$10) && ! scheme)
       caml_call2(Stdlib_Buffer[16], buf, cst$11);
      var
       _ca_ = uri[5],
       x$1 = encoded_of_path(scheme, pct_encoder$0[4])(_ca_);
      caml_call2(Stdlib_Buffer[16], buf, x$1);
     }
     else{
      var
       _ch_ = uri[5],
       x$2 = encoded_of_path(scheme, pct_encoder$0[4])(_ch_);
      caml_call2(Stdlib_Buffer[16], buf, x$2);
     }
    }
    var _cb_ = uri[6];
    a:
    {
     b:
     {
      if(0 === _cb_[0]){
       var _cc_ = _cb_[1];
       if(_cc_){var q = _cc_; break b;}
      }
      else if(_cb_[1]){
       var _ce_ = _cb_[2], _cf_ = caml_obj_tag(_ce_);
       c:
       if(250 === _cf_)
        var _cg_ = _ce_[1];
       else{
        if(246 !== _cf_ && 244 !== _cf_){var _cg_ = _ce_; break c;}
        var _cg_ = caml_call1(CamlinternalLazy[2], _ce_);
       }
       var q = _cg_;
       break b;
      }
      break a;
     }
     caml_call2(Stdlib_Buffer[12], buf, 63);
     var _cd_ = encoded_of_query(scheme, [0, pct_encoder$0], q);
     caml_call2(Stdlib_Buffer[16], buf, _cd_);
    }
    var match$4 = uri[7];
    if(match$4){
     var f = match$4[1];
     caml_call2(Stdlib_Buffer[12], buf, 35);
     add_pct_string([0, pct_encoder$0[7]], f);
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function get_decoded_opt(param){
    if(! param) return 0;
    var x = param[1];
    return [0, x];
   }
   function scheme(uri){return get_decoded_opt(uri[1]);}
   function with_scheme(uri, param){
    if(! param) return [0, 0, uri[2], uri[3], uri[4], uri[5], uri[6], uri[7]];
    var scheme = param[1];
    return [0, [0, scheme], uri[2], uri[3], uri[4], uri[5], uri[6], uri[7]];
   }
   function host(uri){
    var _b4_ = uri[3];
    if(! _b4_) return 0;
    var match = _b4_[1];
    if(803994504 <= match[1]){var h = match[2]; return [0, h];}
    var h$0 = match[2];
    return [0, h$0];
   }
   function host_with_default(opt, uri){
    var default$0 = opt ? opt[1] : cst_localhost, match = host(uri);
    if(! match) return default$0;
    var h = match[1];
    return h;
   }
   function userinfo(opt, uri){
    var
     pct_encoder$0 = opt ? opt[1] : pct_encoder(0, 0, 0, 0, 0, 0, 0, 0),
     match = uri[2];
    if(! match) return 0;
    var userinfo = match[1], match$0 = uri[1];
    if(match$0)
     var
      s = match$0[1],
      x = encoded_of_userinfo([0, s], pct_encoder$0[2])(userinfo);
    else
     var x = encoded_of_userinfo(0, pct_encoder$0[2])(userinfo);
    return [0, x];
   }
   function with_userinfo(uri, userinfo){
    if(userinfo)
     var u = userinfo[1], userinfo$0 = [0, userinfo_of_encoded(u)];
    else
     var userinfo$0 = 0;
    return host(uri)
            ? [0, uri[1], userinfo$0, uri[3], uri[4], uri[5], uri[6], uri[7]]
            : [0,
              uri[1],
              userinfo$0,
              [0, [0, 803994504, cst$12]],
              uri[4],
              uri[5],
              uri[6],
              uri[7]];
   }
   function user(uri){
    var _b3_ = uri[2];
    if(! _b3_) return 0;
    var user = _b3_[1][1];
    return [0, user];
   }
   function password(uri){
    var _b2_ = uri[2];
    if(_b2_){
     var match = _b2_[1][2];
     if(match){var pass = match[1]; return [0, pass];}
    }
    return 0;
   }
   function with_password(uri, password){
    function result(userinfo){
     return host(uri)
             ? [0, uri[1], userinfo, uri[3], uri[4], uri[5], uri[6], uri[7]]
             : [0,
               uri[1],
               userinfo,
               [0, [0, 803994504, cst$13]],
               uri[4],
               uri[5],
               uri[6],
               uri[7]];
    }
    var _b1_ = uri[2];
    if(! _b1_) return password ? result([0, [0, cst$14, password]]) : uri;
    var user = _b1_[1][1];
    return result([0, [0, user, password]]);
   }
   function port(uri){return uri[4];}
   function with_port(uri, port){
    return host(uri)
            ? [0, uri[1], uri[2], uri[3], port, uri[5], uri[6], uri[7]]
            : port
              ? [0,
                uri[1],
                uri[2],
                [0, [0, 803994504, cst$15]],
                port,
                uri[5],
                uri[6],
                uri[7]]
              : [0, uri[1], uri[2], 0, 0, uri[5], uri[6], uri[7]];
   }
   function path(opt, uri){
    var
     pct_encoder$0 = opt ? opt[1] : pct_encoder(0, 0, 0, 0, 0, 0, 0, 0),
     match = uri[1];
    if(match)
     var
      s = match[1],
      _bZ_ = uri[5],
      x = encoded_of_path([0, s], pct_encoder$0[4])(_bZ_);
    else
     var _b0_ = uri[5], x = encoded_of_path(0, pct_encoder$0[4])(_b0_);
    return x;
   }
   function with_path(uri, path){
    var path$0 = path_of_encoded(path);
    if(host(uri) && path$0 && path$0[1] !== cst$33)
     return [0,
             uri[1],
             uri[2],
             uri[3],
             uri[4],
             [0, cst$16, path$0],
             uri[6],
             uri[7]];
    return [0, uri[1], uri[2], uri[3], uri[4], path$0, uri[6], uri[7]];
   }
   function fragment(uri){return get_decoded_opt(uri[7]);}
   function with_fragment(uri, param){
    if(! param) return [0, uri[1], uri[2], uri[3], uri[4], uri[5], uri[6], 0];
    var frag = param[1];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], uri[6], [0, frag]];
   }
   function query(uri){return kv(uri[6]);}
   function verbatim_query(opt, uri){
    var
     pct_encoder$0 = opt ? opt[1] : pct_encoder(0, 0, 0, 0, 0, 0, 0, 0),
     match = uri[6];
    if(0 === match[0]){
     var kv = match[1];
     return kv
             ? [0, encoded_of_query(scheme(uri), [0, pct_encoder$0], kv)]
             : 0;
    }
    var qs = match[1];
    return qs;
   }
   function get_query_param(uri, k){
    var q = kv(uri[6]);
    try{var _bX_ = [0, caml_call2(Stdlib_List[49], k, q)]; return _bX_;}
    catch(_bY_){
     var _bW_ = caml_wrap_exception(_bY_);
     if(_bW_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_bW_, 0);
    }
   }
   function get_query_param$0(uri, k){
    var match = get_query_param(uri, k);
    if(! match) return 0;
    var v = match[1];
    return [0, caml_call2(Stdlib_String[7], cst$17, v)];
   }
   function with_query(uri, query){
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], [0, query], uri[7]];
   }
   function q_s(q){
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var v = param[2], k = param[1];
              return [0, k, [0, v, 0]];
             },
             q);
   }
   function with_query$0(uri, query){return with_query(uri, q_s(query));}
   function add_query_param(uri, p){
    var _bU_ = uri[7], _bV_ = [0, [0, p, kv(uri[6])]];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _bV_, _bU_];
   }
   function add_query_param$0(uri, param){
    var
     v = param[2],
     k = param[1],
     _bS_ = uri[7],
     _bT_ = [0, [0, [0, k, [0, v, 0]], kv(uri[6])]];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _bT_, _bS_];
   }
   function add_query_params(uri, ps){
    var
     _bP_ = uri[7],
     _bQ_ = kv(uri[6]),
     _bR_ = [0, caml_call2(Stdlib[37], ps, _bQ_)];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _bR_, _bP_];
   }
   function add_query_params$0(uri, ps){
    var
     _bL_ = uri[7],
     _bM_ = kv(uri[6]),
     _bN_ = q_s(ps),
     _bO_ = [0, caml_call2(Stdlib[37], _bN_, _bM_)];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _bO_, _bL_];
   }
   function remove_query_param(uri, k){
    var
     _bI_ = uri[7],
     _bJ_ = kv(uri[6]),
     _bK_ =
       [0,
        caml_call2
         (Stdlib_List[44],
          function(param){var k$0 = param[1]; return k !== k$0 ? 1 : 0;},
          _bJ_)];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _bK_, _bI_];
   }
   function path_and_query(uri){
    var p = path(0, uri), match = query(uri);
    if(p !== cst$34){
     if(! match) return p;
     var
      scheme = uncast_opt(uri[1]),
      _bG_ = encoded_of_query$0(scheme)(0, match);
     return caml_call3(Stdlib_Printf[4], _j_, p, _bG_);
    }
    if(! match) return cst$18;
    var
     scheme$0 = uncast_opt(uri[1]),
     _bH_ = encoded_of_query$0(scheme$0)(0, match);
    return caml_call2(Stdlib_Printf[4], _k_, _bH_);
   }
   function resolve(schem, base, uri){
    var match$0 = scheme(base);
    if(match$0)
     var scheme$0 = match$0[1], scheme$1 = scheme$0;
    else
     var scheme$1 = schem;
    var
     schem$0 = [0, scheme$1],
     match$1 = scheme(uri),
     match$2 = userinfo(0, uri);
    a:
    {
     var match$3 = host(uri);
     if(match$1)
      var
       _bp_ = uri[7],
       _bq_ = uri[6],
       _br_ = remove_dot_segments(uri[5]),
       _bs_ = [0, uri[1], uri[2], uri[3], uri[4], _br_, _bq_, _bp_];
     else{
      if(! match$2 && ! match$3){
       var
        init = [0, base[1], base[2], base[3], base[4], uri[5], uri[6], uri[7]],
        path_str = path(0, init);
       if(path_str === cst$34)
        var
         _bw_ = init[7],
         _bx_ = init[6][1] ? init[6] : base[6],
         _by_ = [0, init[1], init[2], init[3], init[4], base[5], _bx_, _bw_];
       else if(47 === caml_string_get(path_str, 0))
        var
         _bz_ = init[7],
         _bA_ = init[6],
         _bB_ = remove_dot_segments(init[5]),
         _by_ = [0, init[1], init[2], init[3], init[4], _bB_, _bA_, _bz_];
       else{
        var
         relpath = init[5],
         bpath = base[5],
         bhost = base[3],
         _bC_ = init[7],
         _bD_ = init[6],
         match = caml_call1(Stdlib_List[10], bpath);
        b:
        {
         if(bhost && ! match){var _bE_ = [0, cst$6, relpath]; break b;}
         c:
         if(match){
          if(match[1] !== cst$33){
           var _bo_ = match[2];
           if(! _bo_) break c;
           if(_bo_[1] !== cst$33) break c;
           var rbpath = _bo_[2];
          }
          else
           var rbpath = match[2];
          var _bE_ = caml_call2(Stdlib_List[13], [0, cst$5, rbpath], relpath);
          break b;
         }
         var _bE_ = relpath;
        }
        var
         _bF_ = remove_dot_segments(_bE_),
         _by_ = [0, init[1], init[2], init[3], init[4], _bF_, _bD_, _bC_];
       }
       var _bs_ = _by_;
       break a;
      }
      var
       _bt_ = uri[7],
       _bu_ = uri[6],
       _bv_ = remove_dot_segments(uri[5]),
       _bs_ = [0, base[1], uri[2], uri[3], uri[4], _bv_, _bu_, _bt_];
     }
    }
    return normalize(schem$0, _bs_);
   }
   function canonicalize(uri){
    var
     uri$0 = resolve(cst$19, empty, uri),
     Scheme = module_of_scheme(uncast_opt(uri$0[1])),
     _bk_ = uri$0[7],
     _bl_ = uri$0[6],
     _bm_ = Scheme[4].call(null, uri$0[5]),
     _bn_ = Scheme[3].call(null, uri$0[4]);
    return [0, uri$0[1], uri$0[2], uri$0[3], _bn_, _bm_, _bl_, _bk_];
   }
   function pp(ppf, uri){
    var _bj_ = to_string(0, uri);
    return caml_call2(Stdlib_Format[13], ppf, _bj_);
   }
   function pp_hum(ppf, uri){
    var _bi_ = to_string(0, uri);
    return caml_call2(Stdlib_Format[13], ppf, _bi_);
   }
   var string_of_char = caml_call1(Stdlib_String[1], 1);
   function string_of_char_list(chars){
    var _bh_ = caml_call2(Stdlib_List[20], string_of_char, chars);
    return caml_call2(Stdlib_String[7], cst$20, _bh_);
   }
   var
    _l_ = caml_call1(Angstrom[51], 0),
    _m_ = caml_call1(Angstrom[4], 58),
    _n_ =
      caml_call1
       (Angstrom[13],
        function(c){
         var _bd_ = 58 !== c ? 1 : 0;
         if(_bd_){
          var _be_ = 47 !== c ? 1 : 0;
          if(_be_)
           var _bf_ = 63 !== c ? 1 : 0, _bg_ = _bf_ ? 35 !== c ? 1 : 0 : _bf_;
          else
           var _bg_ = _be_;
         }
         else
          var _bg_ = _bd_;
         return _bg_;
        }),
    _o_ = caml_call2(Angstrom[59], _n_, _m_),
    _p_ = caml_call2(Angstrom[60], function(s){return [0, decode(s)];}, _o_),
    scheme$0 = caml_call2(Angstrom[47], _p_, _l_);
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   var
    hex_digit =
      caml_call1
       (Angstrom[7],
        function(param){
         var _bc_ = param - 48 | 0;
         a:
         {
          if(22 < _bc_ >>> 0){
           if(5 < _bc_ - 49 >>> 0) break a;
          }
          else if(6 >= _bc_ - 10 >>> 0) break a;
          return 1;
         }
         return 0;
        }),
    _q_ = caml_call1(Angstrom[38], hex_digit),
    hexadecimal = caml_call2(Angstrom[60], string_of_char_list, _q_),
    c_dot = caml_call1(Angstrom[4], 46),
    c_at = caml_call1(Angstrom[4], 64),
    c_colon = caml_call1(Angstrom[4], 58),
    _r_ =
      caml_call1
       (Angstrom[14], function(param){return 9 < param - 48 >>> 0 ? 0 : 1;}),
    dec_octet =
      caml_call2
       (Angstrom[53],
        _r_,
        function(num){
         return 256 <= caml_int_of_string(num)
                 ? caml_call1(Angstrom[52], cst_invalid_octect)
                 : caml_call1(Angstrom[51], num);
        }),
    _s_ = caml_call2(Angstrom[59], dec_octet, c_dot),
    _t_ = caml_call2(Angstrom[37], 3, _s_),
    ipv4_address =
      caml_call3
       (Angstrom[61],
        function(three, one){
         var
          _ba_ = caml_call2(Stdlib[28], cst$21, one),
          _bb_ = caml_call2(Stdlib_String[7], cst$22, three);
         return caml_call2(Stdlib[28], _bb_, _ba_);
        },
        _t_,
        dec_octet),
    after_double_colon =
      caml_call1
       (Angstrom[45],
        function(f){
         var
          _a7_ = caml_call1(Angstrom[51], 0),
          _a8_ = caml_call2(Angstrom[58], c_colon, f),
          _a9_ = caml_call2(Angstrom[47], _a8_, _a7_),
          _a__ =
            caml_call3
             (Angstrom[61],
              function(x, y){return [0, x, y];},
              hexadecimal,
              _a9_),
          _a$_ = caml_call1(Angstrom[36], [0, ipv4_address, 0]);
         return caml_call2(Angstrom[47], _a$_, _a__);
        });
   function double_colon(count){
    var
     _a5_ = caml_call1(Angstrom[51], _u_),
     _a6_ =
       caml_call2
        (Angstrom[53],
         after_double_colon,
         function(rest){
          var
           filler_length =
             (8 - count | 0) - caml_call1(Stdlib_List[1], rest) | 0;
          return 0 < filler_length
                  ? caml_call1(Angstrom[51], [0, cst$23, rest])
                  : caml_call1(Angstrom[52], cst_too_many_parts_in_IPv6_add);
         });
    return caml_call2(Angstrom[47], _a6_, _a5_);
   }
   function part(n){
    if(6 !== n)
     return 7 === n
             ? caml_call2
               (Angstrom[60], function(x){return [0, x, 0];}, hexadecimal)
             : hex_part(n);
    var
     _a3_ = hex_part(6),
     _a4_ = caml_call1(Angstrom[36], [0, ipv4_address, 0]);
    return caml_call2(Angstrom[47], _a4_, _a3_);
   }
   function hex_part(n){
    var
     _aY_ = part(n + 1 | 0),
     _aZ_ = double_colon(n + 1 | 0),
     _a0_ = caml_call2(Angstrom[58], c_colon, _aZ_),
     _a1_ = caml_call2(Angstrom[47], _a0_, _aY_),
     _a2_ = caml_call2(Angstrom[58], c_colon, _a1_);
    return caml_call3
            (Angstrom[61],
             function(x, y){return [0, x, y];},
             hexadecimal,
             _a2_);
   }
   function split_with(f, xs){
    if(! xs) return _v_;
    var ys = xs[2], y = xs[1];
    if(! caml_call1(f, y)) return [0, 0, xs];
    var match = split_with(f, ys), ts = match[2], zs = match[1];
    return [0, [0, y, zs], ts];
   }
   function format_addr(segments){
    var
     match =
       split_with
        (function(segment){return segment !== cst$34 ? 1 : 0;}, segments),
     after_double_colon = match[2],
     before_double_colon = match[1],
     before = caml_call2(Stdlib_String[7], cst$24, before_double_colon);
    a:
    {
     if(after_double_colon && after_double_colon[1] === cst$34){
      var
       xs = after_double_colon[2],
       _aW_ = caml_call2(Stdlib_String[7], cst$25, xs),
       _aX_ = caml_call2(Stdlib[28], cst$26, _aW_),
       res = caml_call2(Stdlib[28], before, _aX_);
      break a;
     }
     var res = before;
    }
    return res;
   }
   var
    _w_ = part(0),
    _x_ = double_colon(0),
    _y_ = caml_call2(Angstrom[58], c_colon, c_colon),
    _z_ = caml_call2(Angstrom[58], _y_, _x_),
    _A_ = caml_call2(Angstrom[47], _z_, _w_),
    ipv6 = caml_call2(Angstrom[60], format_addr, _A_),
    _B_ = caml_call1(Angstrom[4], 93),
    _C_ = caml_call1(Angstrom[4], 91),
    _D_ = caml_call2(Angstrom[58], _C_, ipv6),
    ipv6_address = caml_call2(Angstrom[59], _D_, _B_),
    _E_ = caml_call2(Angstrom[37], 2, hex_digit),
    _F_ = caml_call1(Angstrom[4], 37),
    pct_encoded =
      caml_call3
       (Angstrom[61],
        function(pct, digits){return string_of_char_list([0, pct, digits]);},
        _F_,
        _E_),
    sub_delims$0 =
      caml_call1
       (Angstrom[7],
        function(param){
         var _aU_ = param - 59 | 0;
         a:
         {
          if(2 < _aU_ >>> 0){
           var _aV_ = _aU_ + 26 | 0;
           if(11 < _aV_ >>> 0) break a;
           switch(_aV_){case 1:case 2:case 4: break a;
           }
          }
          else if(1 === _aU_) break a;
          return 1;
         }
         return 0;
        }),
    unreserved =
      caml_call1
       (Angstrom[7],
        function(param){
         a:
         {
          if(91 <= param){
           var _aS_ = param - 95 | 0;
           if(27 < _aS_ >>> 0){
            if(31 !== _aS_) break a;
           }
           else if(1 === _aS_) break a;
          }
          else{
           var _aT_ = param - 45 | 0;
           if(12 < _aT_ >>> 0){
            if(20 > _aT_) break a;
           }
           else if(2 === _aT_) break a;
          }
          return 1;
         }
         return 0;
        }),
    _G_ =
      [0,
       pct_encoded,
       [0, caml_call2(Angstrom[57], string_of_char, sub_delims$0), 0]],
    _H_ = [0, caml_call2(Angstrom[57], string_of_char, unreserved), _G_],
    _I_ = caml_call2(Angstrom[48], 0, _H_),
    _J_ = caml_call1(Angstrom[38], _I_),
    _K_ = caml_call1(Stdlib_String[7], cst$27),
    reg_name = caml_call2(Angstrom[60], _K_, _J_),
    _L_ =
      [0,
       caml_call2
        (Angstrom[55],
         reg_name,
         function(s){return [0, 803994504, decode(s)];}),
       0],
    _M_ =
      [0,
       caml_call2
        (Angstrom[55], ipv6_address, function(h){return [0, 267950263, h];}),
       _L_],
    _N_ =
      [0,
       caml_call2
        (Angstrom[55], ipv4_address, function(h){return [0, -367671627, h];}),
       _M_],
    host$0 = caml_call2(Angstrom[48], 0, _N_),
    _O_ = caml_call1(Angstrom[51], 0),
    _P_ = [0, caml_call2(Angstrom[57], string_of_char, c_colon), 0],
    _Q_ =
      [0,
       pct_encoded,
       [0, caml_call2(Angstrom[57], string_of_char, sub_delims$0), _P_]],
    _R_ = [0, caml_call2(Angstrom[57], string_of_char, unreserved), _Q_],
    _S_ = caml_call2(Angstrom[48], 0, _R_),
    _T_ = caml_call1(Angstrom[38], _S_),
    _U_ = caml_call2(Angstrom[59], _T_, c_at),
    _V_ =
      caml_call2
       (Angstrom[60],
        function(x){
         var s = caml_call2(Stdlib_String[7], cst$28, x);
         return [0, userinfo_of_encoded(s)];
        },
        _U_),
    userinfo$0 = caml_call2(Angstrom[47], _V_, _O_),
    port$0 =
      caml_call2
       (Angstrom[53],
        Angstrom[1],
        function(param){
         if(param && 58 === param[1]){
          var
           _aO_ = caml_call1(Angstrom[13], is_digit),
           _aP_ = caml_call2(Angstrom[58], c_colon, _aO_);
          return caml_call2
                  (Angstrom[55],
                   _aP_,
                   function(port){
                    var decoded = decode(port);
                    try{
                     var _aQ_ = [0, caml_int_of_string(decoded)];
                     return _aQ_;
                    }
                    catch(_aR_){return 0;}
                   });
         }
         return caml_call1(Angstrom[51], 0);
        }),
    _X_ = caml_call1(Angstrom[51], _W_),
    _Y_ =
      caml_call4
       (Angstrom[62],
        function(userinfo, host, port){return [0, userinfo, [0, host], port];},
        userinfo$0,
        host$0,
        port$0),
    _Z_ = caml_call1(Angstrom[8], cst$29),
    ___ = caml_call2(Angstrom[58], _Z_, _Y_),
    authority = caml_call2(Angstrom[47], ___, _X_),
    _$_ =
      caml_call1
       (Angstrom[13],
        function(param){if(35 !== param && 63 !== param) return 1; return 0;}),
    path$0 = caml_call2(Angstrom[60], path_of_encoded, _$_),
    _aa_ = [1, 0, caml_call1(Stdlib_Lazy[4], 0)],
    _ab_ = caml_call1(Angstrom[51], _aa_),
    _ac_ =
      caml_call1(Angstrom[15], function(param){return 35 === param ? 1 : 0;}),
    _ad_ = caml_call1(Angstrom[4], 63),
    _ae_ = caml_call2(Angstrom[58], _ad_, _ac_),
    _af_ = caml_call2(Angstrom[60], of_raw, _ae_),
    query$0 = caml_call2(Angstrom[47], _af_, _ab_),
    _ag_ = caml_call1(Angstrom[51], 0),
    _ah_ = caml_call1(Angstrom[13], function(param){return 1;}),
    _ai_ = caml_call1(Angstrom[4], 35),
    _aj_ = caml_call2(Angstrom[58], _ai_, _ah_),
    _ak_ = caml_call2(Angstrom[60], function(s){return [0, decode(s)];}, _aj_),
    fragment$0 = caml_call2(Angstrom[47], _ak_, _ag_),
    _al_ =
      caml_call5
       (Angstrom[63],
        function(scheme, param, path, query, fragment){
         var port = param[3], host = param[2], userinfo = param[1];
         return normalize
                 (scheme,
                  [0, scheme, userinfo, host, port, path, query, fragment]);
        },
        scheme$0,
        authority,
        path$0,
        query$0),
    uri_reference = caml_call2(Angstrom[56], _al_, fragment$0),
    _am_ =
      caml_call1(Angstrom[13], function(param){return 10 === param ? 0 : 1;}),
    uri_reference$0 =
      caml_call2
       (Angstrom[55],
        _am_,
        function(s){
         var match = caml_call3(Angstrom[75], 1, uri_reference, s);
         if(0 !== match[0]) return empty;
         var t = match[1];
         return t;
        });
   function decode_host(host){
    var match = caml_call3(Angstrom[75], 1, host$0, host);
    if(0 === match[0]){var parsed = match[1]; return parsed;}
    var match$0 = caml_call3(Angstrom[75], 1, ipv6, host);
    if(0 !== match$0[0]) return [0, 803994504, host];
    var parsed$0 = match$0[1];
    return [0, 267950263, parsed$0];
   }
   function make(scheme, userinfo, host, port, path, query, fragment, param){
    function decode(param){
     if(! param) return 0;
     var x = param[1];
     return [0, x];
    }
    a:
    {
     b:
     if(! host){if(! port && ! userinfo) break b; var host$0 = _ao_; break a;}
     var host$0 = host;
    }
    if(userinfo)
     var u = userinfo[1], userinfo$0 = [0, userinfo_of_encoded(u)];
    else
     var userinfo$0 = 0;
    if(path){
     var p = path[1], path$0 = path_of_encoded(p);
     a:
     {
      if(host$0 && path$0 && path$0[1] !== cst$33){var _aL_ = [0, cst$30, path$0]; break a;}
      var _aL_ = path$0;
     }
     var path$1 = _aL_;
    }
    else
     var path$1 = 0;
    if(query) var p$0 = query[1], query$0 = [0, p$0]; else var query$0 = _an_;
    var scheme$0 = decode(scheme), _aM_ = decode(fragment);
    if(host$0)
     var host$1 = host$0[1], _aN_ = [0, decode_host(host$1)];
    else
     var _aN_ = 0;
    return normalize
            (scheme$0,
             [0, scheme$0, userinfo$0, _aN_, port, path$1, query$0, _aM_]);
   }
   function with_host(init, host){
    var _aG_ = init[7], _aH_ = init[6], _aI_ = init[5], _aJ_ = init[4];
    if(host)
     var host$0 = host[1], _aK_ = [0, decode_host(host$0)];
    else
     var _aK_ = 0;
    return [0, init[1], init[2], _aK_, _aJ_, _aI_, _aH_, _aG_];
   }
   function with_uri(scheme, userinfo, host, port, path, query, fragment, uri){
    function with$0(f, o, u){
     if(! o) return u;
     var x = o[1];
     return caml_call2(f, u, x);
    }
    var
     u =
       with$0
        (with_port,
         port,
         with$0
          (with_host,
           host,
           with$0(with_userinfo, userinfo, with$0(with_scheme, scheme, uri))));
    if(path){
     var x$0 = path[1];
     if(x$0)
      var p = x$0[1], _aF_ = with_path(u, p);
     else
      var _aF_ = with_path(u, cst$31);
     var u$0 = _aF_;
    }
    else
     var u$0 = u;
    if(query){
     var x = query[1];
     if(x)
      var q = x[1], _aE_ = with_query(u$0, q);
     else
      var _aE_ = with_query(u$0, 0);
     var _aD_ = _aE_;
    }
    else
     var _aD_ = u$0;
    return with$0(with_fragment, fragment, _aD_);
   }
   function of_string(s){
    var match = caml_call3(Angstrom[75], 0, uri_reference$0, s);
    if(0 !== match[0]) return empty;
    var t = match[1];
    return t;
   }
   var let$0 = Stdlib_Result[6];
   function to_uri(param){
    var
     fragment = param[7],
     query = param[6],
     path = param[5],
     port = param[4],
     host = param[3],
     userinfo = param[2],
     scheme = param[1],
     scheme$0 = 804243368 <= scheme ? x : x$0;
    return [0,
            [0, scheme$0],
            userinfo,
            [0, host],
            port,
            path,
            query,
            fragment];
   }
   function of_uri(param){
    var
     fragment = param[7],
     query = param[6],
     path = param[5],
     port = param[4],
     host = param[3],
     userinfo = param[2],
     scheme = param[1];
    function _aA_(scheme){
     return caml_call2
             (let$0,
              caml_call2(Stdlib_Option[14], _ap_, host),
              function(host){
               return [0,
                       [0, scheme, userinfo, host, port, path, query, fragment]];
              });
    }
    if(scheme)
     var
      unsupported_scheme = scheme[1],
      _aB_ =
        unsupported_scheme !== cst_http
         ? unsupported_scheme
           !== cst_https
           ? [1,
             [0,
              3854881,
              caml_call2(Stdlib_Printf[4], _aq_, unsupported_scheme)]]
           : _ar_
         : _as_,
      _aC_ = _aB_;
    else
     var _aC_ = _at_;
    return caml_call2(let$0, _aC_, _aA_);
   }
   function of_string$0(s){
    var match = of_uri(of_string(s));
    if(0 === match[0]){var t = match[1]; return t;}
    var error = match[1][2];
    return caml_call1(Stdlib[2], error);
   }
   function to_string$0(pct_encoder, t){
    return to_string(pct_encoder, to_uri(t));
   }
   function make$0
   (scheme, host$2, userinfo, port, path, query, fragment, param){
    if(userinfo)
     var u = userinfo[1], userinfo$0 = [0, userinfo_of_encoded(u)];
    else
     var userinfo$0 = 0;
    if(path){
     var p = path[1], path$0 = path_of_encoded(p);
     a:
     {
      if(path$0 && path$0[1] !== cst$33){
       var _ay_ = [0, cst$32, path$0];
       break a;
      }
      var _ay_ = path$0;
     }
     var path$1 = _ay_;
    }
    else
     var path$1 = 0;
    if(query) var p$0 = query[1], query$0 = [0, p$0]; else var query$0 = _au_;
    if(fragment) var x$0 = fragment[1], _az_ = [0, x$0]; else var _az_ = 0;
    var match = decode_host(host$2), _aw_ = match[1];
    if(267950263 === _aw_)
     var
      host = match[2],
      _ax_ = [0, 267950263, caml_call1(Stdlib_String[27], host)];
    else if(803994504 <= _aw_)
     var
      host$0 = match[2],
      x = caml_call1(Stdlib_String[27], host$0),
      _ax_ = [0, 803994504, x];
    else
     var
      host$1 = match[2],
      _ax_ = [0, -367671627, caml_call1(Stdlib_String[27], host$1)];
    return [0, scheme, userinfo$0, _ax_, port, path$1, query$0, _az_];
   }
   function host$1(t){
    var match = t[3];
    if(803994504 <= match[1]){var h = match[2]; return h;}
    var h$0 = match[2];
    return h$0;
   }
   function scheme$1(t){return t[1];}
   var
    Uri =
      [0,
       empty,
       compare$0,
       equal,
       pct_encode,
       pct_encoder,
       pct_decode,
       of_string,
       to_string,
       resolve,
       canonicalize,
       make,
       with_uri,
       query,
       verbatim_query,
       encoded_of_query$0,
       query_of_encoded,
       with_query,
       with_query$0,
       get_query_param,
       get_query_param$0,
       add_query_param,
       add_query_param$0,
       add_query_params,
       add_query_params$0,
       remove_query_param,
       path,
       path_and_query,
       with_path,
       scheme,
       with_scheme,
       userinfo,
       with_userinfo,
       user,
       password,
       with_password,
       host,
       with_host,
       host_with_default,
       port,
       with_port,
       fragment,
       with_fragment,
       pp,
       pp_hum,
       [0, ipv6, uri_reference$0],
       [0, of_uri, to_uri, of_string$0, to_string$0, make$0, host$1, scheme$1]];
   runtime.caml_register_global(107, Uri, "Uri");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
