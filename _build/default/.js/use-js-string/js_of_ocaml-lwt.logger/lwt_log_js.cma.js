// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Lwt_log_js__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Lwt_log_js = [0],
    Lwt_log_js$0 = [0, Lwt_log_js];
   runtime.caml_register_global(0, Lwt_log_js$0, "Lwt_log_js__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_log_js__Import
//# unitInfo: Requires: Stdlib__Char, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare$0 = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal$0 = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$1 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$1(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       seeded_hash$0,
       hash$0,
       equal$1],
    symbol$5 = Int_replace_polymorphic_compar[1],
    symbol$6 = Int_replace_polymorphic_compar[2],
    symbol$7 = Int_replace_polymorphic_compar[3],
    symbol$8 = Int_replace_polymorphic_compar[4],
    symbol$9 = Int_replace_polymorphic_compar[5],
    symbol$10 = Int_replace_polymorphic_compar[6],
    compare$2 = Int_replace_polymorphic_compar[7],
    equal$2 = Int_replace_polymorphic_compar[8],
    max$0 = Int_replace_polymorphic_compar[9],
    min$0 = Int_replace_polymorphic_compar[10],
    Lwt_log_js_Import =
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
   runtime.caml_register_global(2, Lwt_log_js_Import, "Lwt_log_js__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_log_js
//# unitInfo: Requires: Js_of_ocaml__Firebug, Js_of_ocaml__Js, Lwt, Lwt_log_core, Lwt_log_js__Import, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\n",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Lwt = global_data.Lwt,
    Lwt_log_js_Import = global_data.Lwt_log_js__Import,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Lwt_log_core = global_data.Lwt_log_core,
    string_of_level = Lwt_log_core[1],
    level_of_string = Lwt_log_core[2],
    load_rules = Lwt_log_core[3],
    add_rule = Lwt_log_core[4],
    append_rule = Lwt_log_core[5],
    reset_rules = Lwt_log_core[6],
    log = Lwt_log_core[7],
    Section = Lwt_log_core[35],
    render = Lwt_log_core[36],
    location_key = Lwt_log_core[37],
    Logger_closed = Lwt_log_core[38],
    make = Lwt_log_core[39],
    close = Lwt_log_core[40],
    default$0 = Lwt_log_core[41],
    broadcast = Lwt_log_core[42],
    dispatch = Lwt_log_core[43],
    null$0 = Lwt_log_core[44],
    js_val = caml_call1(Lwt[49], 0),
    _a_ = [0, [12, 91, [2, 0, [11, "] ", [2, 0, 0]]]], "[%s] %s"],
    console =
      caml_call2
       (make,
        function(section, level, logs){
         var
          _r_ = caml_call2(Lwt_log_js_Import[3][7], cst, logs),
          _s_ = caml_call1(Section[2], section),
          str =
            runtime.caml_jsstring_of_string
             (caml_call3(Stdlib_Printf[4], _a_, _s_, _r_)),
          match = caml_call1(Lwt[50], js_val);
         switch(level){
           case 0:
            if(match){
             var t3 = match[1], t4 = Js_of_ocaml_Firebug[1];
             t4.debug(str, t3);
            }
            else{var t1 = Js_of_ocaml_Firebug[1]; t1.debug(str);}
            break;
           case 3:
            if(match){
             var t13 = match[1], t14 = Js_of_ocaml_Firebug[1];
             t14.warn(str, t13);
            }
            else{var t11 = Js_of_ocaml_Firebug[1]; t11.warn(str);}
            break;
           case 1:
           case 2:
            if(match){
             var t8 = match[1], t9 = Js_of_ocaml_Firebug[1];
             t9.info(str, t8);
            }
            else{var t6 = Js_of_ocaml_Firebug[1]; t6.info(str);}
            break;
           default:
            if(match){
             var t18 = match[1], t19 = Js_of_ocaml_Firebug[1];
             t19.error(str, t18);
            }
            else{var t16 = Js_of_ocaml_Firebug[1]; t16.error(str);}
         }
         return Lwt[36];
        },
        function(param){return Lwt[36];});
   function log$0(inspect, exn, section, location, logger, level, message){
    if(inspect)
     var v = inspect[1], inspect$0 = [0, v];
    else
     var inspect$0 = 0;
    return caml_call3
            (Lwt[51],
             js_val,
             inspect$0,
             function(param){
              return caml_call6
                      (log, exn, section, location, logger, level, message);
             });
   }
   function log_f(inspect, exn, section, location, logger, level, format){
    return caml_call2
            (Stdlib_Printf[10],
             function(_q_){
              return log$0
                      (inspect, exn, section, location, logger, level, _q_);
             },
             format);
   }
   function ign_log(inspect, exn, section, location, logger, level, message){
    try{
     log$0(inspect, exn, section, location, logger, level, message);
     var _o_ = 0;
     return _o_;
    }
    catch(_p_){return 0;}
   }
   function ign_log_f(inspect, exn, section, location, logger, level, format){
    return caml_call2
            (Stdlib_Printf[10],
             function(_n_){
              return ign_log
                      (inspect, exn, section, location, logger, level, _n_);
             },
             format);
   }
   function debug(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 0, msg);
   }
   function debug_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_m_){
              return debug(inspect, exn, section, location, logger, _m_);
             },
             fmt);
   }
   function info(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 1, msg);
   }
   function info_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_l_){
              return info(inspect, exn, section, location, logger, _l_);
             },
             fmt);
   }
   function notice(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 2, msg);
   }
   function notice_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_k_){
              return notice(inspect, exn, section, location, logger, _k_);
             },
             fmt);
   }
   function warning(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 3, msg);
   }
   function warning_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_j_){
              return warning(inspect, exn, section, location, logger, _j_);
             },
             fmt);
   }
   function error(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 4, msg);
   }
   function error_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_i_){
              return error(inspect, exn, section, location, logger, _i_);
             },
             fmt);
   }
   function fatal(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 5, msg);
   }
   function fatal_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_h_){
              return fatal(inspect, exn, section, location, logger, _h_);
             },
             fmt);
   }
   function ign_debug(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 0, msg);
   }
   function ign_debug_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_g_){
              return ign_debug(inspect, exn, section, location, logger, _g_);
             },
             fmt);
   }
   function ign_info(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 1, msg);
   }
   function ign_info_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_f_){
              return ign_info(inspect, exn, section, location, logger, _f_);
             },
             fmt);
   }
   function ign_notice(inspect, exn, section, location, logger, msg){return ign_log(inspect, exn, section, location, logger, 2, msg);
   }
   function ign_notice_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_e_){
              return ign_notice(inspect, exn, section, location, logger, _e_);
             },
             fmt);
   }
   function ign_warning(inspect, exn, section, location, logger, msg){return ign_log(inspect, exn, section, location, logger, 3, msg);
   }
   function ign_warning_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_d_){
              return ign_warning(inspect, exn, section, location, logger, _d_);
             },
             fmt);
   }
   function ign_error(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 4, msg);
   }
   function ign_error_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_c_){
              return ign_error(inspect, exn, section, location, logger, _c_);
             },
             fmt);
   }
   function ign_fatal(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 5, msg);
   }
   function ign_fatal_f(inspect, exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_b_){
              return ign_fatal(inspect, exn, section, location, logger, _b_);
             },
             fmt);
   }
   var
    Lwt_log_js =
      [0,
       string_of_level,
       level_of_string,
       load_rules,
       add_rule,
       append_rule,
       reset_rules,
       Section,
       render,
       location_key,
       Logger_closed,
       make,
       close,
       default$0,
       broadcast,
       dispatch,
       null$0,
       console,
       log$0,
       log_f,
       ign_log,
       ign_log_f,
       debug,
       debug_f,
       ign_debug,
       ign_debug_f,
       info,
       info_f,
       ign_info,
       ign_info_f,
       notice,
       notice_f,
       ign_notice,
       ign_notice_f,
       warning,
       warning_f,
       ign_warning,
       ign_warning_f,
       error,
       error_f,
       ign_error,
       ign_error_f,
       fatal,
       fatal_f,
       ign_fatal,
       ign_fatal_f];
   runtime.caml_register_global(15, Lwt_log_js, "Lwt_log_js");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
