// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Xml_wrap
//# unitInfo: Requires: Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function fmap(f){return f;}
   function nil(param){return 0;}
   function singleton(x){return [0, x, 0];}
   function cons(x, xs){return [0, x, xs];}
   function append(x, y){return caml_call2(Stdlib[37], x, y);}
   var
    map = Stdlib_List[20],
    Xml_wrap =
      [0,
       [0,
        function(_a_){return _a_;},
        fmap,
        nil,
        singleton,
        cons,
        append,
        map]];
   runtime.caml_register_global(2, Xml_wrap, "Xml_wrap");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Xml_stream
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Malformed_stream =
      [248, "Xml_stream.Malformed_stream", runtime.caml_fresh_oo_id(0)],
    Xml_stream =
      [0,
       Malformed_stream,
       function(Xml){
        function of_list(l){
         var _g_ = caml_call1(Xml[1][3], 0);
         return caml_call3
                 (Stdlib_List[27],
                  function(a, b){
                   var _h_ = caml_call1(Xml[1][1], a);
                   return caml_call2(Xml[1][5], _h_, b);
                  },
                  l,
                  _g_);
        }
        function mk(children, seq){
         var children$0 = children, seq$0 = seq;
         for(;;){
          var match = caml_call1(seq$0, 0);
          if(! match){
           var _d_ = Stdlib_Seq[20];
           return [0, of_list(caml_call1(Stdlib_List[10], children$0)), _d_];
          }
          var match$0 = match[1];
          if(typeof match$0 === "number"){
           var rest = match[2];
           return [0, of_list(caml_call1(Stdlib_List[10], children$0)), rest];
          }
          var _a_ = match$0[1];
          if(856096383 === _a_){
           var
            q = match[2],
            _b_ = match$0[2],
            attrs = _b_[2],
            name = _b_[1][2],
            f =
              function(param){
               var
                v = param[2],
                name = param[1][2],
                _e_ = caml_call1(Xml[1][1], v);
               return caml_call2(Xml[6], name, _e_);
              },
            a = caml_call2(Stdlib_List[20], f, attrs),
            match$1 = mk(0, q),
            rest$0 = match$1[2],
            sub_children = match$1[1],
            children$1 =
              [0, caml_call3(Xml[21], [0, a], name, sub_children), children$0];
           children$0 = children$1;
           seq$0 = rest$0;
          }
          else if(936573133 <= _a_){
           var
            seq$1 = match[2],
            s = match$0[2],
            _c_ =
              caml_call2
               (Stdlib_List[20],
                function(x){
                 var _f_ = caml_call1(Xml[1][1], x);
                 return caml_call1(Xml[17], _f_);
                },
                s),
            children$2 = caml_call2(Stdlib[37], _c_, children$0);
           children$0 = children$2;
           seq$0 = seq$1;
          }
          else{
           var
            seq$2 = match[2],
            s$0 = match$0[2],
            children$3 = [0, caml_call1(Xml[16], s$0), children$0];
           children$0 = children$3;
           seq$0 = seq$2;
          }
         }
        }
        function of_seq(seq){
         var match = mk(0, seq), rest = match[2], l = match[1];
         if(caml_call1(rest, 0))
          throw caml_maybe_attach_backtrace(Malformed_stream, 1);
         return l;
        }
        return [0, of_seq];
       }];
   runtime.caml_register_global(4, Xml_stream, "Xml_stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Xml_print
//# unitInfo: Requires: Re, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__List, Stdlib__Printf, Stdlib__Set, Stdlib__String, Stdlib__Uchar, Uutf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$26 = "",
    cst$28 = " ",
    cst_a = '"%a"',
    cst_d = '"%d"',
    cst_s = '"%s"',
    cst_amp$1 = "&amp;",
    cst_gt$5 = "&gt;",
    cst_lt$1 = "&lt;",
    cst_quot$1 = "&quot;",
    cst$36 = "--!>",
    cst$32 = "-->",
    cst$37 = "->",
    cst$34 = ";",
    cst$29 = "<",
    cst$33 = "<!--",
    cst$27 = "<!-- ",
    cst$31 = "<\/",
    cst$30 = ">",
    cst$35 = "@,",
    cst_xmlns$1 = "xmlns",
    caml_float_of_string = runtime.caml_float_of_string,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) === 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$25 = cst$26,
    cst$22 = " -->\n",
    cst$23 = cst$27,
    cst$24 = "\n",
    cst$8 = cst$28,
    cst$9 = " />",
    cst$10 = cst$29,
    cst$11 = cst$30,
    cst$12 = "><\/",
    cst$13 = cst$29,
    cst$14 = cst$30,
    cst$15 = cst$31,
    cst$16 = cst$30,
    cst$17 = cst$29,
    cst$18 = cst$32,
    cst$19 = cst$33,
    cst$20 = cst$34,
    cst$21 = "&",
    cst$6 = ", ",
    cst$7 = cst$28,
    partial = [12, 62, 0],
    cst$5 = cst$28,
    cst = "&#",
    cst$0 = cst$34,
    cst$1 = cst$36,
    cst$2 = cst$32,
    cst$3 = cst$37,
    cst$4 = cst$30,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Uutf = global_data.Uutf,
    Re = global_data.Re,
    cst_quot = cst_quot$1,
    cst_lt = cst_lt$1,
    cst_gt = cst_gt$5,
    cst_amp = cst_amp$1,
    cst_64 = "&#64;",
    _a_ =
      [0,
       [11,
        '<?xml version="',
        [2, 0, [11, '" encoding="', [2, 0, [11, '"?>\\n', 0]]]]],
       '<?xml version="%s" encoding="%s"?>\\n'],
    cst_UTF_8 = "UTF-8",
    cst_1_0 = "1.0",
    _b_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _c_ = [0, [11, " PUBLIC ", [15, 0]], " PUBLIC %a"],
    _d_ =
      [0, [11, "<!DOCTYPE ", [2, 0, [15, [12, 62, 0]]]], "<!DOCTYPE %s%a>"];
   function add_unsafe_char(b, c){
    if(34 === c) return caml_call2(Stdlib_Buffer[16], b, cst_quot);
    if(60 <= c){
     if(63 > c)
      switch(c - 60 | 0){
        case 0:
         return caml_call2(Stdlib_Buffer[16], b, cst_lt);
        case 1: break;
        default: return caml_call2(Stdlib_Buffer[16], b, cst_gt);
      }
    }
    else if(38 === c) return caml_call2(Stdlib_Buffer[16], b, cst_amp);
    var _bs_ = c <= 8 ? 1 : 0;
    if(_bs_)
     var _bt_ = _bs_;
    else{
     var _bu_ = 11 === c ? 1 : 0;
     if(_bu_)
      var _bt_ = _bu_;
     else{
      var _bv_ = 12 === c ? 1 : 0;
      if(_bv_)
       var _bt_ = _bv_;
      else
       var
        _bw_ = 14 <= c ? 1 : 0,
        _bx_ = _bw_ ? c <= 31 ? 1 : 0 : _bw_,
        _bt_ = _bx_ || (127 === c ? 1 : 0);
     }
    }
    if(! _bt_) return caml_call2(Stdlib_Buffer[12], b, c);
    caml_call2(Stdlib_Buffer[16], b, cst);
    var _by_ = caml_call1(Stdlib[33], c);
    caml_call2(Stdlib_Buffer[16], b, _by_);
    return caml_call2(Stdlib_Buffer[16], b, cst$0);
   }
   function encode_unsafe_char(s){
    var b = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s));
    caml_call2
     (Stdlib_String[30], function(_br_){return add_unsafe_char(b, _br_);}, s);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function encode_unsafe_char_and_at(s){
    var b = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s));
    function f(c){
     return 64 === c
             ? caml_call2(Stdlib_Buffer[16], b, cst_64)
             : add_unsafe_char(b, c);
    }
    caml_call2(Stdlib_String[30], f, s);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function compose_decl(_bq_, opt, param){
    var
     version = _bq_ ? _bq_[1] : cst_1_0,
     encoding = opt ? opt[1] : cst_UTF_8;
    return caml_call3(Stdlib_Format[142], _a_, version, encoding);
   }
   function compose_doctype(dt, args){
    function pp_args(fmt, l){
     if(! l) return 0;
     var
      _bp_ =
        caml_call2
         (Stdlib_Format[132],
          [0, Stdlib_Format[28]],
          function(fmt){return caml_call2(Stdlib_Format[139], fmt, _b_);});
     return caml_call4(Stdlib_Format[139], fmt, _c_, _bp_, l);
    }
    return caml_call4(Stdlib_Format[143], _d_, dt, pp_args, args);
   }
   var
    _e_ = [0, caml_call1(Re[25], cst$1), 0],
    _f_ = [0, caml_call1(Re[25], cst$2), _e_],
    _g_ = [0, caml_call1(Re[25], cst$3), 0],
    _h_ = [0, caml_call1(Re[28], [0, Re[39], _g_]), _f_],
    _i_ = [0, caml_call1(Re[25], cst$4), 0],
    _j_ = [0, caml_call1(Re[28], [0, Re[39], _i_]), _h_],
    _k_ = caml_call1(Re[27], _j_),
    re_end_comment = caml_call1(Re[2], _k_),
    cst_gt$0 = cst_gt$5,
    cst_gt$1 = "-&gt;",
    cst_gt$2 = "--&gt;",
    cst_gt$3 = "--!&gt;",
    _l_ = [0, 1],
    cst_Infinity = "Infinity",
    cst_Infinity$0 = "-Infinity",
    cst_NaN = "NaN",
    _m_ = [0, [4, 0, 0, 0, [12, 101, [4, 0, 0, 0, 0]]], "%de%d"],
    _n_ = [0, [8, [0, 0, 3], 0, [0, 12], 0], "%.12g"],
    _o_ = [0, [8, [0, 0, 3], 0, [0, 15], 0], "%.15g"],
    _p_ = [0, [8, [0, 0, 3], 0, [0, 18], 0], "%.18g"],
    _q_ = [0, [15, 0], "%a"],
    cst_quot$0 = cst_quot$1,
    cst_lt$0 = cst_lt$1,
    cst_gt$4 = cst_gt$5,
    cst_amp$0 = cst_amp$1,
    _r_ = [0, [18, [1, [0, 0, cst$26]], [15, [17, 0, 0]]], "@[%a@]"],
    _s_ = [0, [12, 44, [16, 0]], ",%t"],
    _t_ = [0, [12, 34, [15, [12, 34, 0]]], cst_a],
    _u_ = [0, [12, 34, [4, 0, 0, 0, [12, 34, 0]]], cst_d],
    _v_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _w_ = [0, [12, 34, [15, [12, 34, 0]]], cst_a],
    _x_ = [0, [16, [2, 0, [12, 61, [15, 0]]]], "%t%s=%a"],
    _y_ = [0, [2, 0, [15, [16, 0]]], "%s%a%t"],
    _z_ = [0, [12, 60, [15, [11, "/>", 0]]], "<%a/>"],
    _A_ =
      [0,
       [12, 60, [15, [12, 62, [16, [11, cst$31, [2, 0, [12, 62, 0]]]]]]],
       "<%a>%t<\/%s>"],
    _B_ =
      [0,
       [12,
        60,
        [16,
         [15, [12, 62, [16, [15, [16, [16, [11, cst$31, [2, 0, partial]]]]]]]]]],
       "<%t%a>%t%a%t%t<\/%s>"],
    _C_ = [0, [11, cst$33, [2, 0, [11, cst$32, 0]]], "<!--%s-->"],
    _D_ = [0, [12, 38, [2, 0, [12, 59, 0]]], "&%s;"],
    cst_xmlns = cst_xmlns$1,
    _E_ = [0, [2, 0, [17, [0, cst$35, 0, 0], 0]], "%s@,"],
    _F_ =
      [0,
       [11, cst$27, [2, 0, [11, " -->", [17, [0, cst$35, 0, 0], 0]]]],
       "<!-- %s -->@,"],
    _G_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _H_ = [0, [12, 34, [4, 0, 0, 0, [12, 34, 0]]], cst_d],
    _I_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _J_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _K_ = [0, [2, 0, [12, 61, [2, 0, 0]]], "%s=%s"],
    cst_xmlns$0 = cst_xmlns$1;
   function pp_number(fmt, v){
    if(v === Stdlib[22])
     return caml_call2(Stdlib_Format[13], fmt, cst_Infinity);
    if(v === Stdlib[23])
     return caml_call2(Stdlib_Format[13], fmt, cst_Infinity$0);
    if(v !== v) return caml_call2(Stdlib_Format[13], fmt, cst_NaN);
    var vint = v | 0;
    if(vint !== v){
     var s1 = caml_call2(Stdlib_Printf[4], _n_, v);
     if(v === caml_float_of_string(s1))
      return caml_call2(Stdlib_Format[13], fmt, s1);
     var s2 = caml_call2(Stdlib_Printf[4], _o_, v);
     return v === caml_float_of_string(s2)
             ? caml_call2(Stdlib_Format[13], fmt, s2)
             : caml_call3(Stdlib_Format[139], fmt, _p_, v);
    }
    var n = vint, i = 0;
    for(;;){
     if(0 !== n && 0 === (n % 10 | 0)){
      var i$0 = i + 1 | 0, n$0 = n / 10 | 0;
      n = n$0;
      i = i$0;
      continue;
     }
     return 2 < i
             ? caml_call4(Stdlib_Format[139], fmt, _m_, n, i)
             : caml_call2(Stdlib_Format[19], fmt, vint);
    }
   }
   function string_of_number(v){
    return caml_call3(Stdlib_Format[143], _q_, pp_number, v);
   }
   function normalize(src){
    var
     warn = [0, 0],
     buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(src));
    caml_call5
     (Uutf[22][2],
      0,
      0,
      function(_bo_, param, d){
       if(852405675 <= d[1]){
        var code = d[2];
        return caml_call2(Uutf[23][1], buffer, code);
       }
       caml_call2(Uutf[23][1], buffer, Uutf[2]);
       warn[1] = 1;
       return 0;
      },
      0,
      src);
    var _bn_ = warn[1];
    return [0, caml_call1(Stdlib_Buffer[2], buffer), _bn_];
   }
   function normalize_html(src){
    var l = caml_ml_string_length(src);
    a:
    {
     b:
     {
      c:
      {
       var i = 0;
       for(;;){
        var _bj_ = i < l ? 1 : 0;
        if(! _bj_) break;
        var match = runtime.caml_string_get(src, i);
        if(35 <= match){
         if(61 <= match){
          if(62 === match) break c;
          if(127 <= match) break b;
         }
         else if(38 === match || 60 <= match) break c;
        }
        else
         if(11 <= match){
          if(32 <= match){
           if(34 <= match) break c;
          }
          else if(13 !== match) break b;
         }
         else if(9 > match) break b;
        var i$0 = i + 1 | 0;
        i = i$0;
       }
       var _bk_ = _bj_;
       break a;
      }
      var _bk_ = 1;
      break a;
     }
     var _bk_ = 1;
    }
    if(! _bk_) return [0, src, 0];
    var
     warn = [0, 0],
     buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(src));
    caml_call5
     (Uutf[22][2],
      0,
      0,
      function(_bm_, param, d){
       if(852405675 > d[1]){
        caml_call2(Uutf[23][1], buffer, Uutf[2]);
        warn[1] = 1;
        return 0;
       }
       var u = d[2], code = caml_call1(Stdlib_Uchar[10], u);
       if(34 === code)
        return caml_call2(Stdlib_Buffer[16], buffer, cst_quot$0);
       if(60 <= code){
        if(63 > code)
         switch(code - 60 | 0){
           case 0:
            return caml_call2(Stdlib_Buffer[16], buffer, cst_lt$0);
           case 1: break;
           default: return caml_call2(Stdlib_Buffer[16], buffer, cst_gt$4);
         }
       }
       else if(38 === code)
        return caml_call2(Stdlib_Buffer[16], buffer, cst_amp$0);
       a:
       {
        b:
        {
         if(31 >= code && 9 !== code && 10 !== code && 13 !== code) break b;
         if(127 <= code && 159 >= code) break b;
         if(65534 !== (code & 65535) && 65535 !== (code & 65535)){var u$0 = u; break a;}
        }
        warn[1] = 1;
        var u$0 = Uutf[2];
       }
       return caml_call2(Uutf[23][1], buffer, u$0);
      },
      0,
      src);
    var _bl_ = warn[1];
    return [0, caml_call1(Stdlib_Buffer[2], buffer), _bl_];
   }
   function pp_noop(fmt, param){return 0;}
   function Make_fmt(Xml, _aO_){
    function open_box(indent, fmt){
     return indent ? caml_call2(Stdlib_Format[1], fmt, 0) : 0;
    }
    function close_box(indent, fmt){
     return indent ? caml_call2(Stdlib_Format[3], fmt, 0) : 0;
    }
    function sp(indent, fmt){
     return indent
             ? caml_call2(Stdlib_Format[28], fmt, 0)
             : caml_call2(Stdlib_Format[13], fmt, cst$5);
    }
    function cut(indent, fmt){
     return indent ? caml_call2(Stdlib_Format[30], fmt, 0) : 0;
    }
    var S = caml_call1(Stdlib_Set[1], [0, Stdlib_String[10]]), l = _aO_[1];
    if(l)
     var
      set =
        caml_call3
         (Stdlib_List[26],
          function(s, x){return caml_call2(S[2], x, s);},
          S[1],
          l),
      is_emptytag = function(x){return caml_call2(S[31], x, set);};
    else
     var is_emptytag = function(param){return 0;};
    function pp_encode(encode, indent, fmt, s){
     var s$0 = caml_call1(encode, s);
     return indent
             ? caml_call4
               (Stdlib_Format[139], fmt, _r_, Stdlib_Format[135], s$0)
             : caml_call2(Stdlib_Format[13], fmt, s$0);
    }
    function pp_sep(indent, param){
     return param
             ? function
              (fmt, param){
               return caml_call3
                       (Stdlib_Format[139],
                        fmt,
                        _s_,
                        function(_bi_){return sp(indent, _bi_);});
              }
             : function(fmt, param){return sp(indent, fmt);};
    }
    function pp_attrib_value(encode, indent, fmt, a){
     var match = caml_call1(Xml[26], a);
     switch(match[0]){
       case 0:
        var f = match[1];
        return caml_call4(Stdlib_Format[139], fmt, _t_, pp_number, f);
       case 1:
        var i = match[1]; return caml_call3(Stdlib_Format[139], fmt, _u_, i);
       case 2:
        var s = match[1], _bd_ = caml_call1(encode, s);
        return caml_call3(Stdlib_Format[139], fmt, _v_, _bd_);
       default:
        var
         slist = match[2],
         sep = match[1],
         _be_ = [0, pp_sep(indent, sep)],
         _bf_ =
           caml_call2
            (Stdlib_Format[132],
             _be_,
             function(_bg_, _bh_){
              return pp_encode(encode, indent, _bg_, _bh_);
             });
        return caml_call4(Stdlib_Format[139], fmt, _w_, _bf_, slist);
     }
    }
    function pp_attrib(encode, indent, fmt, a){
     var _a$_ = caml_call1(Xml[25], a);
     return caml_call6
             (Stdlib_Format[139],
              fmt,
              _x_,
              function(_bc_){return sp(indent, _bc_);},
              _a$_,
              function(_ba_, _bb_){
               return pp_attrib_value(encode, indent, _ba_, _bb_);
              },
              a);
    }
    function pp_attribs(encode, indent){
     return caml_call2
             (Stdlib_Format[132],
              [0, pp_noop],
              function(_a9_, _a__){
               return pp_attrib(encode, indent, _a9_, _a__);
              });
    }
    function pp_tag_and_attribs(encode, indent, fmt, param){
     var attrs = param[2], tag = param[1];
     open_box(indent, fmt);
     var _a7_ = pp_attribs(encode, indent);
     caml_call6
      (Stdlib_Format[139],
       fmt,
       _y_,
       tag,
       _a7_,
       attrs,
       function(_a8_){return cut(indent, _a8_);});
     return close_box(indent, fmt);
    }
    function pp_closedtag(encode, indent, fmt, tag, attrs){
     return is_emptytag(tag)
             ? caml_call4
               (Stdlib_Format[139],
                fmt,
                _z_,
                function(_a2_, _a3_){
                 return pp_tag_and_attribs(encode, indent, _a2_, _a3_);
                },
                [0, tag, attrs])
             : (open_box
                (indent, fmt),
               caml_call6
                (Stdlib_Format[139],
                 fmt,
                 _A_,
                 function(_a5_, _a6_){
                  return pp_tag_and_attribs(encode, indent, _a5_, _a6_);
                 },
                 [0, tag, attrs],
                 function(_a4_){return cut(indent, _a4_);},
                 tag),
               close_box(indent, fmt));
    }
    function pp_tag(encode, indent, fmt, tag, attrs, children){
     if(! children) return pp_closedtag(encode, indent, fmt, tag, attrs);
     open_box(indent, fmt);
     var _aV_ = pp_elts(encode, indent);
     caml_call11
      (Stdlib_Format[139],
       fmt,
       _B_,
       function(_a1_){return open_box(indent, _a1_);},
       function(_aZ_, _a0_){
        return pp_tag_and_attribs(encode, indent, _aZ_, _a0_);
       },
       [0, tag, attrs],
       function(_aY_){return cut(indent, _aY_);},
       _aV_,
       children,
       function(_aX_){return close_box(indent, _aX_);},
       function(_aW_){return cut(indent, _aW_);},
       tag);
     return close_box(indent, fmt);
    }
    function pp_elt(encode, indent, fmt, elt){
     var match = caml_call1(Xml[27], elt);
     if(typeof match === "number") return 0;
     switch(match[0]){
       case 0:
        var
         texte = match[1],
         f =
           function(g){
            var s = caml_call2(Re[1][1], g, 0);
            return s !== cst$36
                    ? s
                      !== cst$32
                      ? s !== cst$37 ? s !== cst$30 ? s : cst_gt$0 : cst_gt$1
                      : cst_gt$2
                    : cst_gt$3;
           },
         _aU_ = caml_call6(Re[90], 0, 0, _l_, re_end_comment, f, texte);
        return caml_call3(Stdlib_Format[139], fmt, _C_, _aU_);
       case 1:
        var texte$0 = match[1];
        return caml_call2(Stdlib_Format[13], fmt, texte$0);
       case 2:
        var texte$1 = match[1];
        return pp_encode(encode, indent, fmt, texte$1);
       case 3:
        var e = match[1]; return caml_call3(Stdlib_Format[139], fmt, _D_, e);
       case 4:
        var xh_attrs = match[2], name = match[1];
        return pp_closedtag(encode, indent, fmt, name, xh_attrs);
       default:
        var xh_taglist = match[3], xh_attrs$0 = match[2], name$0 = match[1];
        return pp_tag(encode, indent, fmt, name$0, xh_attrs$0, xh_taglist);
     }
    }
    function pp_elts(encode, indent){
     return caml_call2
             (Stdlib_Format[132],
              [0, function(fmt, param){return cut(indent, fmt);}],
              function(_aS_, _aT_){return pp_elt(encode, indent, _aS_, _aT_);});
    }
    function pp(_aP_, opt, param){
     var
      encode = _aP_ ? _aP_[1] : encode_unsafe_char,
      indent = opt ? opt[1] : 0;
     return function(_aQ_, _aR_){return pp_elt(encode, indent, _aQ_, _aR_);};
    }
    return [0, , , , , , , , , , , , , , , pp_elt, , pp];
   }
   function Make(Xml, I, O){
    var symbol = O[2];
    function separator_to_string(param){return param ? cst$6 : cst$7;}
    function attrib_value_to_string(encode, a){
     var match = caml_call1(Xml[26], a);
     switch(match[0]){
       case 0:
        var f = match[1], _aK_ = string_of_number(f);
        return caml_call2(Stdlib_Printf[4], _G_, _aK_);
       case 1:
        var i = match[1]; return caml_call2(Stdlib_Printf[4], _H_, i);
       case 2:
        var s = match[1], _aL_ = caml_call1(encode, s);
        return caml_call2(Stdlib_Printf[4], _I_, _aL_);
       default:
        var
         slist = match[2],
         sep = match[1],
         _aM_ = separator_to_string(sep),
         _aN_ = caml_call1(encode, caml_call2(Stdlib_String[7], _aM_, slist));
        return caml_call2(Stdlib_Printf[4], _J_, _aN_);
     }
    }
    function attrib_to_string(encode, a){
     var
      _aI_ = attrib_value_to_string(encode, a),
      _aJ_ = caml_call1(Xml[25], a);
     return caml_call3(Stdlib_Printf[4], _K_, _aJ_, _aI_);
    }
    function xh_print_attrs(encode, attrs){
     if(! attrs) return O[1];
     var
      queue = attrs[2],
      attr = attrs[1],
      _aF_ = xh_print_attrs(encode, queue),
      _aG_ = attrib_to_string(encode, attr),
      _aH_ = caml_call2(Stdlib[28], cst$8, _aG_);
     return caml_call2(symbol, caml_call1(O[3], _aH_), _aF_);
    }
    function xh_print_closedtag(encode, tag, attrs){
     if(0 !== I[1] && ! caml_call2(Stdlib_List[37], tag, I[1])){
      var
       _aA_ = caml_call2(Stdlib[28], tag, cst$11),
       _aB_ = caml_call2(Stdlib[28], cst$12, _aA_),
       _aC_ = caml_call1(O[3], _aB_),
       _aD_ = xh_print_attrs(encode, attrs),
       _aE_ = caml_call2(Stdlib[28], cst$13, tag);
      return caml_call2
              (symbol, caml_call2(symbol, caml_call1(O[3], _aE_), _aD_), _aC_);
     }
     var
      _ax_ = caml_call1(O[3], cst$9),
      _ay_ = xh_print_attrs(encode, attrs),
      _az_ = caml_call2(Stdlib[28], cst$10, tag);
     return caml_call2
             (symbol, caml_call2(symbol, caml_call1(O[3], _az_), _ay_), _ax_);
    }
    function xh_print_tag(encode, tag, attrs, taglist){
     if(0 === taglist) return xh_print_closedtag(encode, tag, attrs);
     var
      _aq_ = caml_call2(Stdlib[28], tag, cst$14),
      _ar_ = caml_call2(Stdlib[28], cst$15, _aq_),
      _as_ = caml_call1(O[3], _ar_),
      _at_ = xh_print_taglist(encode, taglist),
      _au_ = caml_call1(O[3], cst$16),
      _av_ = xh_print_attrs(encode, attrs),
      _aw_ = caml_call2(Stdlib[28], cst$17, tag);
     return caml_call2
             (symbol,
              caml_call2
               (symbol,
                caml_call2
                 (symbol,
                  caml_call2(symbol, caml_call1(O[3], _aw_), _av_),
                  _au_),
                _at_),
              _as_);
    }
    function print_nodes(encode, name, xh_attrs, xh_taglist, queue){
     var _ap_ = xh_print_taglist(encode, queue);
     return caml_call2
             (symbol, xh_print_tag(encode, name, xh_attrs, xh_taglist), _ap_);
    }
    function xh_print_taglist(encode, taglist){
     var taglist$0 = taglist;
     for(;;){
      if(! taglist$0) return O[1];
      var
       taglist$1 = taglist$0[2],
       elt = taglist$0[1],
       match = caml_call1(Xml[27], elt);
      if(typeof match !== "number")
       switch(match[0]){
         case 0:
          var
           texte = match[1],
           _af_ = xh_print_taglist(encode, taglist$1),
           _ag_ = caml_call1(encode, texte),
           _ah_ = caml_call2(Stdlib[28], _ag_, cst$18),
           _ai_ = caml_call2(Stdlib[28], cst$19, _ah_);
          return caml_call2(symbol, caml_call1(O[3], _ai_), _af_);
         case 1:
          var texte$0 = match[1], _aj_ = xh_print_taglist(encode, taglist$1);
          return caml_call2(symbol, caml_call1(O[3], texte$0), _aj_);
         case 2:
          var
           texte$1 = match[1],
           _ak_ = xh_print_taglist(encode, taglist$1),
           _al_ = caml_call1(encode, texte$1);
          return caml_call2(symbol, caml_call1(O[3], _al_), _ak_);
         case 3:
          var
           e = match[1],
           _am_ = xh_print_taglist(encode, taglist$1),
           _an_ = caml_call2(Stdlib[28], e, cst$20),
           _ao_ = caml_call2(Stdlib[28], cst$21, _an_);
          return caml_call2(symbol, caml_call1(O[3], _ao_), _am_);
         case 4:
          var xh_attrs = match[2], name = match[1];
          return print_nodes(encode, name, xh_attrs, 0, taglist$1);
         default:
          var xh_taglist = match[3], xh_attrs$0 = match[2], name$0 = match[1];
          return print_nodes
                  (encode, name$0, xh_attrs$0, xh_taglist, taglist$1);
       }
      taglist$0 = taglist$1;
     }
    }
    function print_list(opt, foret){
     var
      encode = opt ? opt[1] : encode_unsafe_char,
      _ae_ = xh_print_taglist(encode, foret);
     return caml_call1(O[4], _ae_);
    }
    return [0, , , , , , , , , xh_print_taglist, print_list];
   }
   function Make_typed(Xml, Typed_xml, O){
    var P = Make(Xml, [0, Typed_xml[1][7]], O), symbol = O[2];
    function print_list(opt, foret){
     var
      encode = opt ? opt[1] : encode_unsafe_char,
      _ac_ = caml_call2(Stdlib_List[20], Typed_xml[2], foret),
      _ad_ = P[9].call(null, encode, _ac_);
     return caml_call1(O[4], _ad_);
    }
    function print(_Y_, opt, doc){
     var
      encode = _Y_ ? _Y_[1] : encode_unsafe_char,
      advert = opt ? opt[1] : cst$25,
      doc$0 = caml_call1(Typed_xml[3], doc),
      match = caml_call1(Xml[27], doc$0);
     a:
     {
      if(typeof match !== "number" && 5 === match[0]){
       var
        c = match[3],
        a = match[2],
        n = match[1],
        a$0 =
          caml_call2
            (Stdlib_List[34],
             function(a){
              return caml_call1(Xml[25], a) === cst_xmlns$1 ? 1 : 0;
             },
             a)
           ? a
           : [0, caml_call2(Xml[6], cst_xmlns$0, Typed_xml[1][5]), a],
        doc$1 = caml_call3(Xml[21], [0, a$0], n, c);
       break a;
      }
      var doc$1 = doc$0;
     }
     var _Z_ = P[9].call(null, encode, [0, doc$1, 0]);
     if(advert !== cst$26)
      var
       ___ = caml_call2(Stdlib[28], advert, cst$22),
       _$_ = caml_call2(Stdlib[28], cst$23, ___);
     else
      var _$_ = cst$24;
     var
      _aa_ = caml_call1(O[3], _$_),
      _ab_ =
        caml_call2
         (symbol,
          caml_call2(symbol, caml_call1(O[3], Typed_xml[1][6]), _aa_),
          _Z_);
     return caml_call1(O[4], _ab_);
    }
    return [0, , , print_list, print];
   }
   function Simple_output(M){
    function empty(param){return 0;}
    function concat(f1, f2, param){
     caml_call1(f1, 0);
     return caml_call1(f2, 0);
    }
    function put(s, param){return caml_call1(M[1], s);}
    function make(f){return caml_call1(f, 0);}
    return [0, empty, concat, put, make];
   }
   function Make_simple(Xml, I){
    function print_list(output){
     return Make(Xml, I, Simple_output([0, output]))[10];
    }
    return [0, print_list];
   }
   function Make_typed_simple(Xml, Typed_xml){
    function print_list(output){
     return Make_typed(Xml, Typed_xml, Simple_output([0, output]))[3];
    }
    function print(output){
     return Make_typed(Xml, Typed_xml, Simple_output([0, output]))[4];
    }
    return [0, print_list, print];
   }
   var
    Xml_print =
      [0,
       encode_unsafe_char,
       encode_unsafe_char_and_at,
       [0, normalize, normalize_html],
       compose_decl,
       compose_doctype,
       string_of_number,
       pp_number,
       function(Xml, Typed_xml){
        var P = Make_fmt(Xml, [0, Typed_xml[1][7]]);
        function pp_elt(_W_, opt, param, fmt, foret){
         var
          encode = _W_ ? _W_[1] : encode_unsafe_char,
          indent = opt ? opt[1] : 0,
          _X_ = caml_call1(Typed_xml[2], foret);
         return P[15].call(null, encode, indent, fmt, _X_);
        }
        function pp(_U_, opt, advert, param, fmt, doc$0){
         var
          encode = _U_ ? _U_[1] : encode_unsafe_char,
          indent = opt ? opt[1] : 0;
         caml_call2(Stdlib_Format[7], fmt, 0);
         caml_call3(Stdlib_Format[139], fmt, _E_, Typed_xml[1][6]);
         if(advert){
          var s = advert[1];
          caml_call3(Stdlib_Format[139], fmt, _F_, s);
         }
         var
          doc = caml_call1(Typed_xml[3], doc$0),
          match = caml_call1(Xml[27], doc);
         a:
         {
          if(typeof match !== "number" && 5 === match[0]){
           var
            c = match[3],
            a = match[2],
            n = match[1],
            a$0 =
              caml_call2
                (Stdlib_List[34],
                 function(a){
                  return caml_call1(Xml[25], a) === cst_xmlns$1 ? 1 : 0;
                 },
                 a)
               ? a
               : [0, caml_call2(Xml[6], cst_xmlns, Typed_xml[1][5]), a],
            _V_ = caml_call3(Xml[21], [0, a$0], n, c);
           break a;
          }
          var _V_ = doc;
         }
         P[15].call(null, encode, indent, fmt, _V_);
         return caml_call2(Stdlib_Format[3], fmt, 0);
        }
        return [0, pp_elt, pp];
       },
       function(_T_, _S_){return [0, Make_fmt(_T_, _S_)[17]];},
       function(_R_, _Q_, _P_){return [0, Make(_R_, _Q_, _P_)[10]];},
       function(_N_, _M_, _L_){
        var _O_ = Make_typed(_N_, _M_, _L_);
        return [0, _O_[3], _O_[4]];
       },
       Make_simple,
       Make_typed_simple];
   runtime.caml_register_global(94, Xml_print, "Xml_print");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Xml_iter
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Xml_iter =
      [0,
       function(Xml){
        function amap1(f, n){
         var match = caml_call1(Xml[27], n);
         if(typeof match !== "number")
          switch(match[0]){
            case 4:
             var
              attribs = match[2],
              name = match[1],
              _v_ = [0, caml_call2(f, name, attribs)];
             return caml_call2(Xml[20], _v_, name);
            case 5:
             var
              elts = match[3],
              attribs$0 = match[2],
              name$0 = match[1],
              _w_ = [0, caml_call2(f, name$0, attribs$0)];
             return caml_call3(Xml[21], _w_, name$0, elts);
          }
         return n;
        }
        function amap(f, n){
         var match = caml_call1(Xml[27], n);
         if(typeof match !== "number")
          switch(match[0]){
            case 4:
             var
              attribs = match[2],
              name = match[1],
              _r_ = [0, caml_call2(f, name, attribs)];
             return caml_call2(Xml[20], _r_, name);
            case 5:
             var
              elts = match[3],
              attribs$0 = match[2],
              name$0 = match[1],
              _s_ =
                caml_call2
                 (Stdlib_List[20], function(_u_){return amap(f, _u_);}, elts),
              _t_ = [0, caml_call2(f, name$0, attribs$0)];
             return caml_call3(Xml[21], _t_, name$0, _s_);
          }
         return n;
        }
        function add_float_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[4], name, value), 0];
         var head = param[1], tail = param[2];
         if(caml_call1(Xml[25], head) === name)
          return [0, caml_call2(Xml[4], name, value), tail];
         var tail$0 = param[2];
         return [0, head, add_float_attrib(name, value, tail$0)];
        }
        function map_float_attrib(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(0 === match[0]){
           var value = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            var _p_ = caml_call1(f, value), _q_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[4], _q_, _p_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[20], aux, l);
        }
        function add_int_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[5], name, value), 0];
         var head = param[1], tail = param[2];
         if(caml_call1(Xml[25], head) === name)
          return [0, caml_call2(Xml[5], name, value), tail];
         var tail$0 = param[2];
         return [0, head, add_int_attrib(name, value, tail$0)];
        }
        function rm_attrib(is_attrib, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var head = param$0[1], tail = param$0[2];
          if(! caml_call1(is_attrib, caml_call1(Xml[25], head))){
           var tail$0 = param$0[2];
           return [0, head, rm_attrib(is_attrib, tail$0)];
          }
          param$0 = tail;
         }
        }
        function map_int_attrib(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(1 === match[0]){
           var value = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            var _n_ = caml_call1(f, value), _o_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[5], _o_, _n_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[20], aux, l);
        }
        function add_string_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[6], name, value), 0];
         var head = param[1], tail = param[2];
         if(caml_call1(Xml[25], head) === name)
          return [0, caml_call2(Xml[6], name, value), tail];
         var tail$0 = param[2];
         return [0, head, add_string_attrib(name, value, tail$0)];
        }
        function map_string_attrib(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(2 === match[0]){
           var value = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            var _l_ = caml_call1(f, value), _m_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[6], _m_, _l_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[20], aux, l);
        }
        function add_space_sep_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[7], name, [0, value, 0]), 0];
         var
          tail = param[2],
          head = param[1],
          match = caml_call1(Xml[26], head);
         if(3 === match[0] && ! match[1]){
          var values = match[2];
          if(caml_call1(Xml[25], head) === name)
           return [0, caml_call2(Xml[7], name, [0, value, values]), tail];
         }
         return caml_call1(Xml[25], head) === name
                 ? [0, caml_call2(Xml[7], name, [0, value, 0]), tail]
                 : [0, head, add_space_sep_attrib(name, value, tail)];
        }
        function add_comma_sep_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[8], name, [0, value, 0]), 0];
         var
          tail = param[2],
          head = param[1],
          match = caml_call1(Xml[26], head);
         if(3 === match[0] && match[1]){
          var values = match[2];
          if(caml_call1(Xml[25], head) === name)
           return [0, caml_call2(Xml[8], name, [0, value, values]), tail];
         }
         return caml_call1(Xml[25], head) === name
                 ? [0, caml_call2(Xml[8], name, [0, value, 0]), tail]
                 : [0, head, add_comma_sep_attrib(name, value, tail)];
        }
        function rm_attrib_from_list(is_attrib, is_value, param){
         if(! param) return 0;
         var
          tail = param[2],
          head = param[1],
          match = caml_call1(Xml[26], head);
         if(3 === match[0]){
          var values = match[2], sep = match[1];
          if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
           var
            values$0 =
              caml_call2
               (Stdlib_List[44],
                function(v){return 1 - caml_call1(is_value, v);},
                values);
           if(! values$0) return tail;
           if(sep){
            var _j_ = caml_call1(Xml[25], head);
            return [0, caml_call2(Xml[8], _j_, values$0), tail];
           }
           var _k_ = caml_call1(Xml[25], head);
           return [0, caml_call2(Xml[7], _k_, values$0), tail];
          }
         }
         return [0, head, rm_attrib_from_list(is_attrib, is_value, tail)];
        }
        function map_string_attrib_in_list(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(3 === match[0]){
           var values = match[2], sep = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            if(sep){
             var
              _f_ = caml_call2(Stdlib_List[20], f, values),
              _g_ = caml_call1(Xml[25], head);
             return caml_call2(Xml[8], _g_, _f_);
            }
            var
             _h_ = caml_call2(Stdlib_List[20], f, values),
             _i_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[7], _i_, _h_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[20], aux, l);
        }
        function fold
        (of_empty,
         of_comment,
         of_txt,
         of_encodedpcdata,
         of_entity,
         of_leaf,
         of_node,
         n){
         var match = caml_call1(Xml[27], n);
         if(typeof match === "number") return caml_call1(of_empty, 0);
         switch(match[0]){
           case 0:
            var s = match[1]; return caml_call1(of_comment, s);
           case 1:
            var s$0 = match[1]; return caml_call1(of_encodedpcdata, s$0);
           case 2:
            var s$1 = match[1]; return caml_call1(of_txt, s$1);
           case 3:
            var s$2 = match[1]; return caml_call1(of_entity, s$2);
           case 4:
            var attribs = match[2], name = match[1];
            return caml_call2(of_leaf, name, attribs);
           default:
            var elts = match[3], attribs$0 = match[2], name$0 = match[1];
            return caml_call3
                    (of_node,
                     name$0,
                     attribs$0,
                     caml_call2
                      (Stdlib_List[20],
                       function(_e_){
                        return fold
                                (of_empty,
                                 of_comment,
                                 of_txt,
                                 of_encodedpcdata,
                                 of_entity,
                                 of_leaf,
                                 of_node,
                                 _e_);
                       },
                       elts));
         }
        }
        function all_entities(elt){
         function f(param){return 0;}
         return fold
                 (f,
                  f,
                  f,
                  f,
                  f,
                  function(ename, attribs){return 0;},
                  function(ename, attribs, elts){
                   return caml_call1(Stdlib_List[15], elts);
                  },
                  elt);
        }
        function flatmap(f, l){
         var _d_ = caml_call2(Stdlib_List[20], f, l);
         return caml_call1(Stdlib_List[14], _d_);
        }
        function translate
        (root_leaf, root_node, sub_leaf, sub_node, update_state, state, n){
         function translate(state, n){
          var match = caml_call1(Xml[27], n);
          if(typeof match !== "number")
           switch(match[0]){
             case 4:
              var attribs = match[2], name = match[1];
              return caml_call3(sub_leaf, state, name, attribs);
             case 5:
              var
               elts = match[3],
               attribs$0 = match[2],
               name$0 = match[1],
               _b_ = caml_call3(update_state, name$0, attribs$0, state);
              return caml_call4
                      (sub_node,
                       state,
                       name$0,
                       attribs$0,
                       flatmap(function(_c_){return translate(_b_, _c_);}, elts));
           }
          return [0, n, 0];
         }
         var match = caml_call1(Xml[27], n);
         if(typeof match !== "number")
          switch(match[0]){
            case 4:
             var attribs = match[2], name = match[1];
             return caml_call2(root_leaf, name, attribs);
            case 5:
             var elts = match[3], attribs$0 = match[2], name$0 = match[1];
             return caml_call3
                     (root_node,
                      name$0,
                      attribs$0,
                      flatmap(function(_a_){return translate(state, _a_);}, elts));
          }
         return n;
        }
        return [0,
                amap,
                amap1,
                rm_attrib,
                rm_attrib_from_list,
                map_int_attrib,
                map_float_attrib,
                map_string_attrib,
                map_string_attrib_in_list,
                add_int_attrib,
                add_float_attrib,
                add_string_attrib,
                add_comma_sep_attrib,
                add_space_sep_attrib,
                fold,
                all_entities,
                translate];
       }];
   runtime.caml_register_global(1, Xml_iter, "Xml_iter");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Svg_f
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String, Xml_print, Xml_stream
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst$8 = " ",
    cst$11 = "%",
    cst_g_g = "%g, %g",
    cst$10 = ", ",
    cst_a$1 = "a",
    cst_alphabetic$2 = "alphabetic",
    cst_auto$3 = "auto",
    cst_central$1 = "central",
    cst_dx$1 = "dx",
    cst_dy$1 = "dy",
    cst_fill$1 = "fill",
    cst_font_face_uri$1 = "font-face-uri",
    cst_g$1 = "g",
    cst_glyphRef$1 = "glyphRef",
    cst_hanging$2 = "hanging",
    cst_http_www_w3_org_2000_svg$0 = "http://www.w3.org/2000/svg",
    cst_ideographic$2 = "ideographic",
    cst_in$2 = "in",
    cst_inherit$2 = "inherit",
    cst_mathematical$2 = "mathematical",
    cst_middle$2 = "middle",
    cst_none$2 = "none",
    cst_offset$1 = "offset",
    cst_operator$1 = "operator",
    cst_path$1 = "path",
    cst_r$1 = "r",
    cst_rotate$1 = "rotate",
    cst_scale$1 = "scale",
    cst_spacing$1 = "spacing",
    cst_stroke_width$1 = "stroke-width",
    cst_style$1 = "style",
    cst_svg$1 = "svg",
    cst_targetY$1 = "targetY",
    cst_type$4 = "type",
    cst_values$1 = "values",
    cst_x$1 = "x",
    cst_y$1 = "y";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$8,
    cst$6 = cst$9,
    partial = [12, 32, [8, [0, 0, 3], 0, 0, [12, 41, 0]]],
    partial$0 = [0, 0, 3],
    cst$5 = cst$11,
    cst$4 = cst$9,
    content_type = "image/svg+xml",
    version = "SVG 1.1",
    standard = "http://www.w3.org/TR/svg11/",
    namespace = cst_http_www_w3_org_2000_svg$0,
    cst$3 = cst$8,
    cst$2 = cst$8,
    cst$1 = cst$8,
    cst$0 = cst$11,
    cst = cst$9,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Xml_print = global_data.Xml_print,
    Xml_stream = global_data.Xml_stream,
    _a_ = [0, [11, "url(", [2, 0, [12, 41, 0]]], "url(%s)"],
    _b_ = [0, [8, [0, 0, 3], 0, 0, [2, 0, 0]], "%g%s"],
    cst_rad = "rad",
    cst_grad = "grad",
    cst_deg = "deg",
    cst_mm = "mm",
    cst_px = "px",
    cst_pt = "pt",
    cst_pc = "pc",
    cst_in = cst_in$2,
    cst_ex = "ex",
    cst_em = "em",
    cst_cm = "cm",
    cst_none = cst_none$2,
    cst_currentColor = "currentColor",
    cst_nonzero = "nonzero",
    cst_evenodd = "evenodd",
    _c_ =
      [0,
       "-//W3C//DTD SVG 1.1//EN",
       [0, "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd", 0]],
    cst_svg = cst_svg$1,
    cst_metadata = "metadata",
    cst_foreignObject = "foreignObject",
    cst_version = "version",
    cst_baseProfile = "baseProfile",
    cst_x = cst_x$1,
    cst_y = cst_y$1,
    cst_width = "width",
    cst_height = "height",
    cst_preserveAspectRatio = "preserveAspectRatio",
    cst_contentScriptType = "contentScriptType",
    cst_contentStyleType = "contentStyleType",
    cst_zoomAndSpan = "zoomAndSpan",
    cst_href = "href",
    cst_xlink_href = "xlink:href",
    cst_requiredFeatures = "requiredFeatures",
    cst_requiredExtension = "requiredExtension",
    cst_systemLanguage = "systemLanguage",
    cst_externalRessourcesRequired = "externalRessourcesRequired",
    cst_id = "id",
    cst_data = "data-",
    cst_xml_base = "xml:base",
    cst_xml_lang = "xml:lang",
    cst_xml_space = "xml:space",
    cst_type = cst_type$4,
    cst_media = "media",
    cst_xlink_title = "xlink:title",
    cst_class = "class",
    cst_style = cst_style$1,
    cst_transform = "transform",
    cst_viewBox = "viewBox",
    cst_d = "d",
    cst_pathLength = "pathLength",
    cst_rx = "rx",
    cst_ry = "ry",
    cst_cx = "cx",
    cst_cy = "cy",
    cst_r = cst_r$1,
    cst_x1 = "x1",
    cst_y1 = "y1",
    cst_x2 = "x2",
    cst_y2 = "y2",
    cst_points = "points",
    cst_x$0 = cst_x$1,
    cst_y$0 = cst_y$1,
    cst_dx = cst_dx$1,
    cst_dy = cst_dy$1,
    cst_dx$0 = cst_dx$1,
    cst_dy$0 = cst_dy$1,
    cst_lengthAdjust = "lengthAdjust",
    cst_textLength = "textLength",
    cst_text_anchor = "text-anchor",
    cst_text_decoration = "text-decoration",
    cst_text_rendering = "text-rendering",
    cst_rotate = cst_rotate$1,
    cst_startOffset = "startOffset",
    cst_method = "method",
    cst_spacing = cst_spacing$1,
    cst_glyphRef = cst_glyphRef$1,
    cst_format = "format",
    cst_markerUnits = "markerUnits",
    cst_refX = "refX",
    cst_refY = "refY",
    cst_markerWidth = "markerWidth",
    cst_markerHeight = "markerHeight",
    cst_orient = "orient",
    cst_local = "local",
    cst_rendering_intent = "rendering-intent",
    cst_gradientUnits = "gradientUnits",
    cst_gradientTransform = "gradientTransform",
    cst_spreadMethod = "spreadMethod",
    cst_fx = "fx",
    cst_fy = "fy",
    cst_offset = cst_offset$1,
    cst_patternUnits = "patternUnits",
    cst_patternContentUnits = "patternContentUnits",
    cst_patternTransform = "patternTransform",
    cst_clipPathUnits = "clipPathUnits",
    cst_maskUnits = "maskUnits",
    cst_maskContentUnits = "maskContentUnits",
    cst_primitiveUnits = "primitiveUnits",
    cst_filterResUnits = "filterResUnits",
    cst_result = "result",
    cst_in$0 = cst_in$2,
    cst_in2 = "in2",
    cst_azimuth = "azimuth",
    cst_elevation = "elevation",
    cst_pointsAtX = "pointsAtX",
    cst_pointsAtY = "pointsAtY",
    cst_pointsAtZ = "pointsAtZ",
    cst_specularExponent = "specularExponent",
    cst_specularConstant = "specularConstant",
    cst_limitingConeAngle = "limitingConeAngle",
    cst_mode = "mode",
    cst_type$0 = cst_type$4,
    cst_values = cst_values$1,
    cst_type$1 = cst_type$4,
    cst_tableValues = "tableValues",
    cst_intercept = "intercept",
    cst_amplitude = "amplitude",
    cst_exponent = "exponent",
    cst_offset$0 = cst_offset$1,
    cst_operator = cst_operator$1,
    cst_k1 = "k1",
    cst_k2 = "k2",
    cst_k3 = "k3",
    cst_k4 = "k4",
    cst_order = "order",
    cst_kernelMatrix = "kernelMatrix",
    cst_divisor = "divisor",
    cst_bias = "bias",
    cst_kernelUnitLength = "kernelUnitLength",
    cst_targetX = "targetX",
    cst_targetY = cst_targetY$1,
    cst_targetY$0 = cst_targetY$1,
    cst_preserveAlpha = "preserveAlpha",
    cst_surfaceScale = "surfaceScale",
    cst_diffuseConstant = "diffuseConstant",
    cst_scale = cst_scale$1,
    cst_xChannelSelector = "xChannelSelector",
    cst_yChannelSelector = "yChannelSelector",
    cst_stdDeviation = "stdDeviation",
    cst_operator$0 = cst_operator$1,
    cst_radius = "radius",
    cst_baseFrequency = "baseFrequency",
    cst_numOctaves = "numOctaves",
    cst_seed = "seed",
    cst_stitchTiles = "stitchTiles",
    cst_type$2 = cst_type$4,
    cst_xlink_show = "xlink:show",
    cst_xlink_actuate = "xlink:actuate",
    cst_xlink_target = "xlink:target",
    cst_viewTarget = "viewTarget",
    cst_attributeName = "attributeName",
    cst_attributeType = "attributeType",
    cst_begin = "begin",
    cst_dur = "dur",
    cst_min = "min",
    cst_max = "max",
    cst_restart = "restart",
    cst_repeatCount = "repeatCount",
    cst_repeatDur = "repeatDur",
    cst_fill = cst_fill$1,
    cst_fill$0 = cst_fill$1,
    cst_fill_rule = "fill-rule",
    cst_calcMode = "calcMode",
    cst_values$0 = cst_values$1,
    cst_keyTimes = "keyTimes",
    cst_keySplines = "keySplines",
    cst_from = "from",
    cst_to = "to",
    cst_by = "by",
    cst_additive = "additive",
    cst_accumulate = "accumulate",
    cst_keyPoints = "keyPoints",
    cst_path = cst_path$1,
    cst_type$3 = cst_type$4,
    cst_horiz_origin_x = "horiz-origin-x",
    cst_horiz_origin_y = "horiz-origin-y",
    cst_horiz_adv_x = "horiz-adv-x",
    cst_vert_origin_x = "vert-origin-x",
    cst_vert_origin_y = "vert-origin-y",
    cst_vert_adv_y = "vert-adv-y",
    cst_unicode = "unicode",
    cst_glyphname = "glyphname",
    cst_orientation = "orientation",
    cst_arabic_form = "arabic-form",
    cst_lang = "lang",
    cst_u1 = "u1",
    cst_u2 = "u2",
    cst_g1 = "g1",
    cst_g2 = "g2",
    cst_k = "k",
    cst_font_family = "font-family",
    cst_font_style = "font-style",
    cst_font_variant = "font-variant",
    cst_font_weight = "font-weight",
    cst_font_stretch = "font-stretch",
    cst_font_size = "font-size",
    cst_unicode_range = "unicode-range",
    cst_units_per_em = "units-per-em",
    cst_stemv = "stemv",
    cst_stemh = "stemh",
    cst_slope = "slope",
    cst_cap_height = "cap-height",
    cst_x_height = "x-height",
    cst_accent_height = "accent-height",
    cst_ascent = "ascent",
    cst_widths = "widths",
    cst_bbox = "bbox",
    cst_ideographic = cst_ideographic$2,
    cst_alphabetic = cst_alphabetic$2,
    cst_mathematical = cst_mathematical$2,
    cst_hanging = cst_hanging$2,
    cst_v_ideographic = "v-ideographic",
    cst_v_alphabetic = "v-alphabetic",
    cst_v_mathematical = "v-mathematical",
    cst_v_hanging = "v-hanging",
    cst_underline_position = "underline-position",
    cst_underline_thickness = "underline-thickness",
    cst_strikethrough_position = "strikethrough-position",
    cst_strikethrough_thickness = "strikethrough-thickness",
    cst_overline_position = "overline-position",
    cst_overline_thickness = "overline-thickness",
    cst_string = "string",
    cst_name = "name",
    cst_alignment_baseline = "alignment-baseline",
    cst_dominant_baseline = "dominant-baseline",
    cst_onabort = "onabort",
    cst_onactivate = "onactivate",
    cst_onbegin = "onbegin",
    cst_onend = "onend",
    cst_onerror = "onerror",
    cst_onfocusin = "onfocusin",
    cst_onfocusout = "onfocusout",
    cst_onload = "onload",
    cst_onrepeat = "onrepeat",
    cst_onresize = "onresize",
    cst_onscroll = "onscroll",
    cst_onunload = "onunload",
    cst_onzoom = "onzoom",
    cst_onclick = "onclick",
    cst_onmousedown = "onmousedown",
    cst_onmouseup = "onmouseup",
    cst_onmouseover = "onmouseover",
    cst_onmouseout = "onmouseout",
    cst_onmousemove = "onmousemove",
    cst_ontouchstart = "ontouchstart",
    cst_ontouchend = "ontouchend",
    cst_ontouchmove = "ontouchmove",
    cst_ontouchcancel = "ontouchcancel",
    cst_stop_color = "stop-color",
    cst_stop_opacity = "stop-opacity",
    cst_stroke = "stroke",
    cst_stroke_width = cst_stroke_width$1,
    cst_stroke_linecap = "stroke-linecap",
    cst_stroke_linejoin = "stroke-linejoin",
    cst_stroke_miterlimit = "stroke-miterlimit",
    cst_stroke_dasharray = "stroke-dasharray",
    cst_stroke_dashoffset = "stroke-dashoffset",
    cst_stroke_opacity = "stroke-opacity",
    cst_http_www_w3_org_1999_xlink = "http://www.w3.org/1999/xlink",
    cst_xmlns_xlink = "xmlns:xlink",
    cst_http_www_w3_org_2000_svg = cst_http_www_w3_org_2000_svg$0,
    cst_xmlns = "xmlns",
    cst_svg$0 = cst_svg$1,
    cst_g = cst_g$1,
    cst_defs = "defs",
    cst_desc = "desc",
    cst_title = "title",
    cst_symbol = "symbol",
    cst_use = "use",
    cst_image = "image",
    cst_switch = "switch",
    cst_style$0 = cst_style$1,
    cst_path$0 = cst_path$1,
    cst_rect = "rect",
    cst_circle = "circle",
    cst_ellipse = "ellipse",
    cst_line = "line",
    cst_polyline = "polyline",
    cst_polygon = "polygon",
    cst_text = "text",
    cst_tspan = "tspan",
    cst_tref = "tref",
    cst_textPath = "textPath",
    cst_altGlyph = "altGlyph",
    cst_altGlyphDef = "altGlyphDef",
    cst_altGlyphItem = "altGlyphItem",
    cst_glyphRef$0 = cst_glyphRef$1,
    cst_marker = "marker",
    cst_color_profile = "color-profile",
    cst_linearGradient = "linearGradient",
    cst_radialGradient = "radialGradient",
    cst_stop = "stop",
    cst_pattern = "pattern",
    cst_clipPath = "clipPath",
    cst_filter = "filter",
    cst_feDistantLight = "feDistantLight",
    cst_fePointLight = "fePointLight",
    cst_feSpotLight = "feSpotLight",
    cst_feBlend = "feBlend",
    cst_feColorMatrix = "feColorMatrix",
    cst_feComponentTransfer = "feComponentTransfer",
    cst_feFuncA = "feFuncA",
    cst_feFuncG = "feFuncG",
    cst_feFuncB = "feFuncB",
    cst_feFuncR = "feFuncR",
    cst_feComposite = "feComposite",
    cst_feConvolveMatrix = "feConvolveMatrix",
    cst_feDiffuseLighting = "feDiffuseLighting",
    cst_feDisplacementMap = "feDisplacementMap",
    cst_feFlood = "feFlood",
    cst_feGaussianBlur = "feGaussianBlur",
    cst_feImage = "feImage",
    cst_feMerge = "feMerge",
    cst_feMorphology = "feMorphology",
    cst_feOffset = "feOffset",
    cst_feSpecularLighting = "feSpecularLighting",
    cst_feTile = "feTile",
    cst_feTurbulence = "feTurbulence",
    cst_cursor = "cursor",
    cst_a = cst_a$1,
    cst_view = "view",
    cst_script = "script",
    cst_animate = "animate",
    cst_set = "set",
    cst_animateMotion = "animateMotion",
    cst_mpath = "mpath",
    cst_animateColor = "animateColor",
    cst_animateTransform = "animateTransform",
    cst_font = "font",
    cst_glyph = "glyph",
    cst_missing_glyph = "missing-glyph",
    cst_hkern = "hkern",
    cst_vkern = "vkern",
    cst_font_face = "font-face",
    cst_font_face_src = "font-face-src",
    cst_font_face_uri = cst_font_face_uri$1,
    cst_font_face_uri$0 = cst_font_face_uri$1,
    cst_font_face_name = "font-face-name",
    cst_after_edge = "after-edge",
    cst_alphabetic$0 = cst_alphabetic$2,
    cst_auto = cst_auto$3,
    cst_hanging$0 = cst_hanging$2,
    cst_middle = cst_middle$2,
    cst_mathematical$0 = cst_mathematical$2,
    cst_inherit = cst_inherit$2,
    cst_baseline = "baseline",
    cst_central = cst_central$1,
    cst_ideographic$0 = cst_ideographic$2,
    cst_text_before_edge = "text-before-edge",
    cst_before_edge = "before-edge",
    cst_text_after_edge = "text-after-edge",
    cst_stitch = "stitch",
    cst_onRequest = "onRequest",
    cst_repeat = "repeat",
    cst_wrap = "wrap",
    cst_remove = "remove",
    cst_reflect = "reflect",
    cst_noStitch = "noStitch",
    cst_over = "over",
    cst_none$0 = cst_none$2,
    cst_medial = "medial",
    cst_never = "never",
    cst_butt = "butt",
    cst_auto$0 = cst_auto$3,
    cst_atop = "atop",
    cst_arithmetic = "arithmetic",
    cst_underline = "underline",
    cst_gamma = "gamma",
    cst_linear = "linear",
    cst_overline = "overline",
    cst_onLoad = "onLoad",
    cst_turbulence = "turbulence",
    cst_table = "table",
    cst_geometricPrecision = "geometricPrecision",
    cst_optimizeSpeed = "optimizeSpeed",
    cst_miter = "miter",
    cst_initial = "initial",
    cst_start = "start",
    cst_whenNotActive = "whenNotActive",
    cst_identity = "identity",
    cst_skewY = "skewY",
    cst_skewX = "skewX",
    cst_square = "square",
    cst_scale$0 = cst_scale$1,
    cst_exact = "exact",
    cst_perceptual = "perceptual",
    cst_discrete = "discrete",
    cst_erode = "erode",
    cst_middle$0 = cst_middle$2,
    cst_round = "round",
    cst_xor = "xor",
    cst_XML = "XML",
    cst_sum = "sum",
    cst_pad = "pad",
    cst_out = "out",
    cst_new = "new",
    cst_end = "end",
    cst_CSS = "CSS",
    cst_in$1 = cst_in$2,
    cst_v = "v",
    cst_r$0 = cst_r$1,
    cst_h = "h",
    cst_g$0 = cst_g$1,
    cst_b = "b",
    cst_a$0 = cst_a$1,
    cst_rotate$0 = cst_rotate$1,
    cst_disable = "disable",
    cst_screen = "screen",
    cst_absolute_colorimetric = "absolute_colorimetric",
    cst_inherit$0 = cst_inherit$2,
    cst_always = "always",
    cst_spacingAndGlyphs = "spacingAndGlyphs",
    cst_replace = "replace",
    cst_multiply = "multiply",
    cst_spline = "spline",
    cst_matrix = "matrix",
    cst_saturation = "saturation",
    cst_dilate = "dilate",
    cst_translate = "translate",
    cst_default = "default",
    cst_lighten = "lighten",
    cst_normal = "normal",
    cst_freeze = "freeze",
    cst_magnify = "magnify",
    cst_hueRotate = "hueRotate",
    cst_spacing$0 = cst_spacing$1,
    cst_fractalNoise = "fractalNoise",
    cst_saturate = "saturate",
    cst_userSpaceOnUse = "userSpaceOnUse",
    cst_objectBoundingBox = "objectBoundingBox",
    cst_darken = "darken",
    cst_paced = "paced",
    cst_isolated = "isolated",
    cst_optimizeLegibility = "optimizeLegibility",
    cst_luminanceToAlpha = "luminanceToAlpha",
    cst_line_through = "line-through",
    cst_other = "other",
    cst_terminal = "terminal",
    cst_blink = "blink",
    cst_stroke_width$0 = cst_stroke_width$1,
    cst_relative_colorimetric = "relative_colorimetric",
    cst_stretch = "stretch",
    cst_bevel = "bevel",
    cst_duplicate = "duplicate",
    cst_preserve = "preserve",
    _d_ =
      [0,
       [8, [0, 0, 3], 0, 0, [11, cst$10, [8, [0, 0, 3], 0, 0, 0]]],
       cst_g_g],
    cst_nochange = "nochange",
    cst_alphabetic$1 = cst_alphabetic$2,
    cst_auto$1 = cst_auto$3,
    cst_hanging$1 = cst_hanging$2,
    cst_middle$1 = cst_middle$2,
    cst_mathematical$1 = cst_mathematical$2,
    cst_inherit$1 = cst_inherit$2,
    cst_central$0 = cst_central$1,
    cst_usescript = "usescript",
    cst_ideographic$1 = cst_ideographic$2,
    cst_textbeforeedge = "textbeforeedge",
    cst_resetsize = "resetsize",
    cst_textafteredge = "textafteredge",
    cst_strokePaint = "strokePaint",
    cst_sourceAlpha = "sourceAlpha",
    cst_fillPaint = "fillPaint",
    cst_sourceGraphic = "sourceGraphic",
    cst_backgroundImage = "backgroundImage",
    cst_backgroundAlpha = "backgroundAlpha",
    _e_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, 0]]]]]]],
       "%s %s %s %s"],
    _f_ =
      [0,
       [8, [0, 0, 3], 0, 0, [11, cst$10, [8, [0, 0, 3], 0, 0, 0]]],
       cst_g_g],
    _g_ = [0, [8, [0, 0, 3], 0, 0, 0], "%g"],
    _h_ = [0, "; "],
    cst_auto$2 = cst_auto$3,
    cst_none$1 = cst_none$2,
    _i_ = [0, [11, "skewY(", [2, 0, [12, 41, 0]]], "skewY(%s)"],
    _j_ = [0, [11, "skewX(", [2, 0, [12, 41, 0]]], "skewX(%s)"],
    _k_ = [0, [11, "scale(", [2, 0, [12, 41, 0]]], "scale(%s)"],
    _l_ =
      [0, [8, [0, 0, 3], 0, 0, [12, 32, [8, [0, 0, 3], 0, 0, 0]]], "%g %g"],
    _m_ =
      [0,
       [11, "rotate(", [2, 0, [12, 32, [2, 0, [12, 41, 0]]]]],
       "rotate(%s %s)"],
    _n_ =
      [0,
       [11,
        "matrix(",
        [8,
         [0, 0, 3],
         0,
         0,
         [12,
          32,
          [8,
           [0, 0, 3],
           0,
           0,
           [12,
            32,
            [8,
             [0, 0, 3],
             0,
             0,
             [12,
              32,
              [8, [0, 0, 3], 0, 0, [12, 32, [8, partial$0, 0, 0, partial]]]]]]]]]],
       "matrix(%g %g %g %g %g %g)"],
    _o_ = [0, [11, "translate(", [2, 0, [12, 41, 0]]], "translate(%s)"];
   function string_of_iri(x){return caml_call2(Stdlib_Printf[4], _a_, x);}
   function to_string(f, param){
    var unit = param[2], n = param[1];
    if(unit)
     var unit$0 = unit[1], _fd_ = caml_call1(f, unit$0);
    else
     var _fd_ = cst;
    return caml_call3(Stdlib_Printf[4], _b_, n, _fd_);
   }
   function angle_names(param){
    return 4099509 === param
            ? cst_rad
            : 793050094 <= param ? cst_grad : cst_deg;
   }
   function length_names(param){
    return 16389 <= param
            ? 17280
              === param
              ? cst_mm
              : 17956
                <= param
                ? 17960 <= param ? cst_px : cst_pt
                : 17939 <= param ? cst_pc : cst_in
            : 15496
              <= param
              ? 15507 <= param ? cst_ex : cst_em
              : 15050 <= param ? cst_cm : cst$0;
   }
   function string_of_length(a){return to_string(length_names, a);}
   function list(opt, f, l){
    var sep = opt ? opt[1] : cst$2, _fc_ = caml_call2(Stdlib_List[20], f, l);
    return caml_call2(Stdlib_String[7], sep, _fc_);
   }
   function string_of_paint_whitout_icc(param){
    if(typeof param === "number")
     return 870530776 <= param ? cst_none : cst_currentColor;
    var match = param[2], icc = match[2], c = match[1];
    if(! icc) return c;
    var x = icc[1], _fb_ = caml_call2(Stdlib[28], cst$1, x);
    return caml_call2(Stdlib[28], c, _fb_);
   }
   function string_of_paint(c){
    if(typeof c !== "number" && 3652393 <= c[1]){
     var _e9_ = c[2], match = _e9_[2], iri = _e9_[1];
     if(! match) return string_of_iri(iri);
     var
      b = match[1],
      _e__ = string_of_paint_whitout_icc(b),
      _e$_ = caml_call2(Stdlib[28], cst$3, _e__),
      _fa_ = string_of_iri(iri);
     return caml_call2(Stdlib[28], _fa_, _e$_);
    }
    return string_of_paint_whitout_icc(c);
   }
   function string_of_fill_rule(param){
    return 875305621 <= param ? cst_nonzero : cst_evenodd;
   }
   function Make_with_wrapped_functions(Xml, C){
    var
     doctype = caml_call2(Xml_print[5], cst_svg, _c_),
     Info = [0, content_type, 0, 0, version, standard, namespace, doctype],
     string_of_uri = Xml[2],
     uri_of_string = Xml[3];
    function tot(x){return x;}
    function totl(x){return x;}
    function toelt(x){return x;}
    function toeltl(x){return x;}
    function to_attrib(x){return x;}
    function nullary(tag, a, param){
     var _e8_ = caml_call1(Xml[1][3], 0);
     return caml_call3(Xml[21], a, tag, _e8_);
    }
    function unary(tag, a, elt){
     var _e7_ = caml_call1(Xml[1][4], elt);
     return caml_call3(Xml[21], a, tag, _e7_);
    }
    function star(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function to_xmlattribs(x){return x;}
    var
     float_attrib = Xml[4],
     string_attrib = Xml[6],
     string_of_coord = C[10],
     string_of_length = C[10],
     string_of_lengths = C[11];
    function user_attrib(f, name, v){
     var _e6_ = caml_call2(Xml[1][2], f, v);
     return caml_call2(Xml[6], name, _e6_);
    }
    var color_attrib = Xml[6];
    function metadata(a, children){
     return caml_call3(Xml[21], a, cst_metadata, children);
    }
    function foreignObject(a, children){
     return caml_call3(Xml[21], a, cst_foreignObject, children);
    }
    function txt(s){return caml_call1(Xml[17], s);}
    var
     a_version = caml_call1(string_attrib, cst_version),
     a_baseProfile = caml_call1(string_attrib, cst_baseProfile);
    function a_x(_e5_){return user_attrib(string_of_coord, cst_x, _e5_);}
    function a_y(_e4_){return user_attrib(string_of_coord, cst_y, _e4_);}
    function a_width(_e3_){
     return user_attrib(string_of_length, cst_width, _e3_);
    }
    function a_height(_e2_){
     return user_attrib(string_of_length, cst_height, _e2_);
    }
    var
     a_preserveAspectRatio =
       caml_call1(string_attrib, cst_preserveAspectRatio),
     a_contentScriptType = caml_call1(string_attrib, cst_contentScriptType),
     a_contentStyleType = caml_call1(string_attrib, cst_contentStyleType);
    function a_zoomAndPan(x){return user_attrib(C[4], cst_zoomAndSpan, x);}
    var
     a_href = caml_call1(string_attrib, cst_href),
     a_xlink_href = caml_call1(string_attrib, cst_xlink_href),
     a_requiredFeatures = caml_call1(Xml[7], cst_requiredFeatures),
     a_requiredExtensions = caml_call1(Xml[7], cst_requiredExtension),
     a_systemLanguage = caml_call1(Xml[8], cst_systemLanguage),
     _W_ = C[3];
    function a_externalRessourcesRequired(_e1_){
     return user_attrib(_W_, cst_externalRessourcesRequired, _e1_);
    }
    var a_id = caml_call1(string_attrib, cst_id);
    function a_user_data(name){
     return caml_call1(string_attrib, caml_call2(Stdlib[28], cst_data, name));
    }
    var
     a_xml_base = caml_call1(string_attrib, cst_xml_base),
     a_xml_lang = caml_call1(string_attrib, cst_xml_lang);
    function a_xml_space(x){return user_attrib(C[4], cst_xml_space, x);}
    var
     a_type = caml_call1(string_attrib, cst_type),
     a_media = caml_call1(Xml[8], cst_media),
     a_xlink_title = caml_call1(string_attrib, cst_xlink_title),
     a_class = caml_call1(Xml[7], cst_class),
     a_style = caml_call1(string_attrib, cst_style),
     _X_ = C[22];
    function a_transform(_e0_){return user_attrib(_X_, cst_transform, _e0_);}
    var _Y_ = C[7];
    function a_viewBox(_eZ_){return user_attrib(_Y_, cst_viewBox, _eZ_);}
    var
     a_d = caml_call1(string_attrib, cst_d),
     a_pathLength = caml_call1(float_attrib, cst_pathLength);
    function a_rx(_eY_){return user_attrib(string_of_length, cst_rx, _eY_);}
    function a_ry(_eX_){return user_attrib(string_of_length, cst_ry, _eX_);}
    function a_cx(_eW_){return user_attrib(string_of_length, cst_cx, _eW_);}
    function a_cy(_eV_){return user_attrib(string_of_length, cst_cy, _eV_);}
    function a_r(_eU_){return user_attrib(string_of_length, cst_r, _eU_);}
    function a_x1(_eT_){return user_attrib(string_of_coord, cst_x1, _eT_);}
    function a_y1(_eS_){return user_attrib(string_of_coord, cst_y1, _eS_);}
    function a_x2(_eR_){return user_attrib(string_of_coord, cst_x2, _eR_);}
    function a_y2(_eQ_){return user_attrib(string_of_coord, cst_y2, _eQ_);}
    var _Z_ = C[5];
    function a_points(_eP_){return user_attrib(_Z_, cst_points, _eP_);}
    function a_x_list(_eO_){
     return user_attrib(string_of_lengths, cst_x$0, _eO_);
    }
    function a_y_list(_eN_){
     return user_attrib(string_of_lengths, cst_y$0, _eN_);
    }
    var ___ = C[12];
    function a_dx(_eM_){return user_attrib(___, cst_dx, _eM_);}
    var _$_ = C[12];
    function a_dy(_eL_){return user_attrib(_$_, cst_dy, _eL_);}
    function a_dx_list(_eK_){
     return user_attrib(string_of_lengths, cst_dx$0, _eK_);
    }
    function a_dy_list(_eJ_){
     return user_attrib(string_of_lengths, cst_dy$0, _eJ_);
    }
    function a_lengthAdjust(x){return user_attrib(C[4], cst_lengthAdjust, x);}
    function a_textLength(_eI_){
     return user_attrib(string_of_length, cst_textLength, _eI_);
    }
    function a_text_anchor(x){return user_attrib(C[4], cst_text_anchor, x);}
    function a_text_decoration(x){
     return user_attrib(C[4], cst_text_decoration, x);
    }
    function a_text_rendering(x){
     return user_attrib(C[4], cst_text_rendering, x);
    }
    var _aa_ = C[14];
    function a_rotate(_eH_){return user_attrib(_aa_, cst_rotate, _eH_);}
    function a_startOffset(_eG_){
     return user_attrib(string_of_length, cst_startOffset, _eG_);
    }
    function a_method(x){return user_attrib(C[4], cst_method, x);}
    function a_spacing(x){return user_attrib(C[4], cst_spacing, x);}
    var
     a_glyphRef = caml_call1(string_attrib, cst_glyphRef),
     a_format = caml_call1(string_attrib, cst_format);
    function a_markerUnits(x){return user_attrib(C[4], cst_markerUnits, x);}
    function a_refX(_eF_){
     return user_attrib(string_of_coord, cst_refX, _eF_);
    }
    function a_refY(_eE_){
     return user_attrib(string_of_coord, cst_refY, _eE_);
    }
    function a_markerWidth(_eD_){
     return user_attrib(string_of_length, cst_markerWidth, _eD_);
    }
    function a_markerHeight(_eC_){
     return user_attrib(string_of_length, cst_markerHeight, _eC_);
    }
    function a_orient(x){return user_attrib(C[17], cst_orient, x);}
    var a_local = caml_call1(string_attrib, cst_local);
    function a_rendering_intent(x){
     return user_attrib(C[4], cst_rendering_intent, x);
    }
    function a_gradientUnits(x){
     return user_attrib(C[4], cst_gradientUnits, x);
    }
    var _ab_ = C[22];
    function a_gradientTransform(_eB_){
     return user_attrib(_ab_, cst_gradientTransform, _eB_);
    }
    function a_spreadMethod(x){return user_attrib(C[4], cst_spreadMethod, x);}
    function a_fx(_eA_){return user_attrib(string_of_coord, cst_fx, _eA_);}
    function a_fy(_ez_){return user_attrib(string_of_coord, cst_fy, _ez_);}
    function a_offset(x){return user_attrib(C[16], cst_offset, x);}
    function a_patternUnits(x){return user_attrib(C[4], cst_patternUnits, x);}
    function a_patternContentUnits(x){
     return user_attrib(C[4], cst_patternContentUnits, x);
    }
    function a_patternTransform(x){
     return user_attrib(C[22], cst_patternTransform, x);
    }
    function a_clipPathUnits(x){
     return user_attrib(C[4], cst_clipPathUnits, x);
    }
    function a_maskUnits(x){return user_attrib(C[4], cst_maskUnits, x);}
    function a_maskContentUnits(x){
     return user_attrib(C[4], cst_maskContentUnits, x);
    }
    function a_primitiveUnits(x){
     return user_attrib(C[4], cst_primitiveUnits, x);
    }
    var _ac_ = C[13];
    function a_filterRes(_ey_){
     return user_attrib(_ac_, cst_filterResUnits, _ey_);
    }
    var a_result = caml_call1(string_attrib, cst_result);
    function a_in(x){return user_attrib(C[8], cst_in$0, x);}
    function a_in2(x){return user_attrib(C[8], cst_in2, x);}
    var
     a_azimuth = caml_call1(float_attrib, cst_azimuth),
     a_elevation = caml_call1(float_attrib, cst_elevation),
     a_pointsAtX = caml_call1(float_attrib, cst_pointsAtX),
     a_pointsAtY = caml_call1(float_attrib, cst_pointsAtY),
     a_pointsAtZ = caml_call1(float_attrib, cst_pointsAtZ),
     a_specularExponent = caml_call1(float_attrib, cst_specularExponent),
     a_specularConstant = caml_call1(float_attrib, cst_specularConstant),
     a_limitingConeAngle = caml_call1(float_attrib, cst_limitingConeAngle);
    function a_mode(x){return user_attrib(C[4], cst_mode, x);}
    function a_feColorMatrix_type(x){return user_attrib(C[4], cst_type$0, x);}
    var _ad_ = C[14];
    function a_values(_ex_){return user_attrib(_ad_, cst_values, _ex_);}
    function a_transfer_type(x){return user_attrib(C[4], cst_type$1, x);}
    var _ae_ = C[14];
    function a_tableValues(_ew_){
     return user_attrib(_ae_, cst_tableValues, _ew_);
    }
    var _af_ = C[12];
    function a_intercept(_ev_){return user_attrib(_af_, cst_intercept, _ev_);}
    var _ag_ = C[12];
    function a_amplitude(_eu_){return user_attrib(_ag_, cst_amplitude, _eu_);}
    var _ah_ = C[12];
    function a_exponent(_et_){return user_attrib(_ah_, cst_exponent, _et_);}
    var _ai_ = C[12];
    function a_transfer_offset(_es_){
     return user_attrib(_ai_, cst_offset$0, _es_);
    }
    function a_feComposite_operator(x){
     return user_attrib(C[4], cst_operator, x);
    }
    var _aj_ = C[12];
    function a_k1(_er_){return user_attrib(_aj_, cst_k1, _er_);}
    var _ak_ = C[12];
    function a_k2(_eq_){return user_attrib(_ak_, cst_k2, _eq_);}
    var _al_ = C[12];
    function a_k3(_ep_){return user_attrib(_al_, cst_k3, _ep_);}
    var _am_ = C[12];
    function a_k4(_eo_){return user_attrib(_am_, cst_k4, _eo_);}
    var _an_ = C[13];
    function a_order(_en_){return user_attrib(_an_, cst_order, _en_);}
    var _ao_ = C[14];
    function a_kernelMatrix(_em_){
     return user_attrib(_ao_, cst_kernelMatrix, _em_);
    }
    var _ap_ = C[12];
    function a_divisor(_el_){return user_attrib(_ap_, cst_divisor, _el_);}
    var _aq_ = C[12];
    function a_bias(_ek_){return user_attrib(_aq_, cst_bias, _ek_);}
    var _ar_ = C[13];
    function a_kernelUnitLength(_ej_){
     return user_attrib(_ar_, cst_kernelUnitLength, _ej_);
    }
    var _as_ = C[9];
    function a_targetX(_ei_){return user_attrib(_as_, cst_targetX, _ei_);}
    var _at_ = C[9];
    function a_targetY(_eh_){return user_attrib(_at_, cst_targetY, _eh_);}
    function a_edgeMode(x){return user_attrib(C[4], cst_targetY$0, x);}
    var _au_ = C[3];
    function a_preserveAlpha(_eg_){
     return user_attrib(_au_, cst_preserveAlpha, _eg_);
    }
    var _av_ = C[12];
    function a_surfaceScale(_ef_){
     return user_attrib(_av_, cst_surfaceScale, _ef_);
    }
    var _aw_ = C[12];
    function a_diffuseConstant(_ee_){
     return user_attrib(_aw_, cst_diffuseConstant, _ee_);
    }
    var _ax_ = C[12];
    function a_scale(_ed_){return user_attrib(_ax_, cst_scale, _ed_);}
    function a_xChannelSelector(x){
     return user_attrib(C[4], cst_xChannelSelector, x);
    }
    function a_yChannelSelector(x){
     return user_attrib(C[4], cst_yChannelSelector, x);
    }
    var _ay_ = C[13];
    function a_stdDeviation(_ec_){
     return user_attrib(_ay_, cst_stdDeviation, _ec_);
    }
    function a_feMorphology_operator(x){
     return user_attrib(C[4], cst_operator$0, x);
    }
    var _az_ = C[13];
    function a_radius(_eb_){return user_attrib(_az_, cst_radius, _eb_);}
    var _aA_ = C[13];
    function a_baseFrenquency(_ea_){
     return user_attrib(_aA_, cst_baseFrequency, _ea_);
    }
    var _aB_ = C[9];
    function a_numOctaves(_d$_){
     return user_attrib(_aB_, cst_numOctaves, _d$_);
    }
    var _aC_ = C[12];
    function a_seed(_d__){return user_attrib(_aC_, cst_seed, _d__);}
    function a_stitchTiles(x){return user_attrib(C[4], cst_stitchTiles, x);}
    function a_feTurbulence_type(x){return user_attrib(C[4], cst_type$2, x);}
    function a_xlink_show(x){return user_attrib(C[4], cst_xlink_show, x);}
    function a_xlink_actuate(x){
     return user_attrib(C[4], cst_xlink_actuate, x);
    }
    var
     a_target = caml_call1(string_attrib, cst_xlink_target),
     a_viewTarget = caml_call1(string_attrib, cst_viewTarget),
     a_attributeName = caml_call1(string_attrib, cst_attributeName);
    function a_attributeType(x){
     return user_attrib(C[4], cst_attributeType, x);
    }
    var
     a_begin = caml_call1(string_attrib, cst_begin),
     a_dur = caml_call1(string_attrib, cst_dur),
     a_min = caml_call1(string_attrib, cst_min),
     a_max = caml_call1(string_attrib, cst_max);
    function a_restart(x){return user_attrib(C[4], cst_restart, x);}
    var
     a_repeatCount = caml_call1(string_attrib, cst_repeatCount),
     a_repeatDur = caml_call1(string_attrib, cst_repeatDur),
     _aD_ = C[18];
    function a_fill(_d9_){return user_attrib(_aD_, cst_fill, _d9_);}
    function a_animation_fill(x){return user_attrib(C[4], cst_fill$0, x);}
    var _aE_ = C[19];
    function a_fill_rule(_d8_){return user_attrib(_aE_, cst_fill_rule, _d8_);}
    function a_calcMode(x){return user_attrib(C[4], cst_calcMode, x);}
    var
     a_animation_values = caml_call1(Xml[8], cst_values$0),
     a_keyTimes = caml_call1(Xml[8], cst_keyTimes),
     a_keySplines = caml_call1(Xml[8], cst_keySplines),
     a_from = caml_call1(string_attrib, cst_from),
     a_to = caml_call1(string_attrib, cst_to),
     a_by = caml_call1(string_attrib, cst_by);
    function a_additive(x){return user_attrib(C[4], cst_additive, x);}
    function a_accumulate(x){return user_attrib(C[4], cst_accumulate, x);}
    var _aF_ = C[15];
    function a_keyPoints(_d7_){return user_attrib(_aF_, cst_keyPoints, _d7_);}
    var a_path = caml_call1(string_attrib, cst_path), _aG_ = C[4];
    function a_animateTransform_type(_d6_){
     return user_attrib(_aG_, cst_type$3, _d6_);
    }
    var _aH_ = C[12];
    function a_horiz_origin_x(_d5_){
     return user_attrib(_aH_, cst_horiz_origin_x, _d5_);
    }
    var _aI_ = C[12];
    function a_horiz_origin_y(_d4_){
     return user_attrib(_aI_, cst_horiz_origin_y, _d4_);
    }
    var _aJ_ = C[12];
    function a_horiz_adv_x(_d3_){
     return user_attrib(_aJ_, cst_horiz_adv_x, _d3_);
    }
    var _aK_ = C[12];
    function a_vert_origin_x(_d2_){
     return user_attrib(_aK_, cst_vert_origin_x, _d2_);
    }
    var _aL_ = C[12];
    function a_vert_origin_y(_d1_){
     return user_attrib(_aL_, cst_vert_origin_y, _d1_);
    }
    var _aM_ = C[12];
    function a_vert_adv_y(_d0_){
     return user_attrib(_aM_, cst_vert_adv_y, _d0_);
    }
    var
     a_unicode = caml_call1(string_attrib, cst_unicode),
     a_glyph_name = caml_call1(string_attrib, cst_glyphname);
    function a_orientation(x){return user_attrib(C[4], cst_orientation, x);}
    function a_arabic_form(x){return user_attrib(C[4], cst_arabic_form, x);}
    var
     a_lang = caml_call1(string_attrib, cst_lang),
     a_u1 = caml_call1(string_attrib, cst_u1),
     a_u2 = caml_call1(string_attrib, cst_u2),
     a_g1 = caml_call1(string_attrib, cst_g1),
     a_g2 = caml_call1(string_attrib, cst_g2),
     a_k = caml_call1(string_attrib, cst_k),
     a_font_family = caml_call1(string_attrib, cst_font_family),
     a_font_style = caml_call1(string_attrib, cst_font_style),
     a_font_variant = caml_call1(string_attrib, cst_font_variant),
     a_font_weight = caml_call1(string_attrib, cst_font_weight),
     a_font_stretch = caml_call1(string_attrib, cst_font_stretch),
     a_font_size = caml_call1(string_attrib, cst_font_size),
     a_unicode_range = caml_call1(string_attrib, cst_unicode_range),
     a_units_per_em = caml_call1(string_attrib, cst_units_per_em),
     _aN_ = C[12];
    function a_stemv(_dZ_){return user_attrib(_aN_, cst_stemv, _dZ_);}
    var _aO_ = C[12];
    function a_stemh(_dY_){return user_attrib(_aO_, cst_stemh, _dY_);}
    var _aP_ = C[12];
    function a_slope(_dX_){return user_attrib(_aP_, cst_slope, _dX_);}
    var _aQ_ = C[12];
    function a_cap_height(_dW_){
     return user_attrib(_aQ_, cst_cap_height, _dW_);
    }
    var _aR_ = C[12];
    function a_x_height(_dV_){return user_attrib(_aR_, cst_x_height, _dV_);}
    var _aS_ = C[12];
    function a_accent_height(_dU_){
     return user_attrib(_aS_, cst_accent_height, _dU_);
    }
    var _aT_ = C[12];
    function a_ascent(_dT_){return user_attrib(_aT_, cst_ascent, _dT_);}
    var
     a_widths = caml_call1(string_attrib, cst_widths),
     a_bbox = caml_call1(string_attrib, cst_bbox),
     _aU_ = C[12];
    function a_ideographic(_dS_){
     return user_attrib(_aU_, cst_ideographic, _dS_);
    }
    var _aV_ = C[12];
    function a_alphabetic(_dR_){
     return user_attrib(_aV_, cst_alphabetic, _dR_);
    }
    var _aW_ = C[12];
    function a_mathematical(_dQ_){
     return user_attrib(_aW_, cst_mathematical, _dQ_);
    }
    var _aX_ = C[12];
    function a_hanging(_dP_){return user_attrib(_aX_, cst_hanging, _dP_);}
    var _aY_ = C[12];
    function a_videographic(_dO_){
     return user_attrib(_aY_, cst_v_ideographic, _dO_);
    }
    var _aZ_ = C[12];
    function a_v_alphabetic(_dN_){
     return user_attrib(_aZ_, cst_v_alphabetic, _dN_);
    }
    var _a0_ = C[12];
    function a_v_mathematical(_dM_){
     return user_attrib(_a0_, cst_v_mathematical, _dM_);
    }
    var _a1_ = C[12];
    function a_v_hanging(_dL_){return user_attrib(_a1_, cst_v_hanging, _dL_);}
    var _a2_ = C[12];
    function a_underline_position(_dK_){
     return user_attrib(_a2_, cst_underline_position, _dK_);
    }
    var _a3_ = C[12];
    function a_underline_thickness(_dJ_){
     return user_attrib(_a3_, cst_underline_thickness, _dJ_);
    }
    var _a4_ = C[12];
    function a_strikethrough_position(_dI_){
     return user_attrib(_a4_, cst_strikethrough_position, _dI_);
    }
    var _a5_ = C[12];
    function a_strikethrough_thickness(_dH_){
     return user_attrib(_a5_, cst_strikethrough_thickness, _dH_);
    }
    var _a6_ = C[12];
    function a_overline_position(_dG_){
     return user_attrib(_a6_, cst_overline_position, _dG_);
    }
    var _a7_ = C[12];
    function a_overline_thickness(_dF_){
     return user_attrib(_a7_, cst_overline_thickness, _dF_);
    }
    var
     a_string = caml_call1(string_attrib, cst_string),
     a_name = caml_call1(string_attrib, cst_name);
    function a_alignment_baseline(x){
     return user_attrib(C[2], cst_alignment_baseline, x);
    }
    function a_dominant_baseline(x){
     return user_attrib(C[6], cst_dominant_baseline, x);
    }
    var
     a_onabort = caml_call1(Xml[9], cst_onabort),
     a_onactivate = caml_call1(Xml[9], cst_onactivate),
     a_onbegin = caml_call1(Xml[9], cst_onbegin),
     a_onend = caml_call1(Xml[9], cst_onend),
     a_onerror = caml_call1(Xml[9], cst_onerror),
     a_onfocusin = caml_call1(Xml[9], cst_onfocusin),
     a_onfocusout = caml_call1(Xml[9], cst_onfocusout),
     a_onload = caml_call1(Xml[9], cst_onload),
     a_onrepeat = caml_call1(Xml[9], cst_onrepeat),
     a_onresize = caml_call1(Xml[9], cst_onresize),
     a_onscroll = caml_call1(Xml[9], cst_onscroll),
     a_onunload = caml_call1(Xml[9], cst_onunload),
     a_onzoom = caml_call1(Xml[9], cst_onzoom),
     a_onclick = caml_call1(Xml[10], cst_onclick),
     a_onmousedown = caml_call1(Xml[10], cst_onmousedown),
     a_onmouseup = caml_call1(Xml[10], cst_onmouseup),
     a_onmouseover = caml_call1(Xml[10], cst_onmouseover),
     a_onmouseout = caml_call1(Xml[10], cst_onmouseout),
     a_onmousemove = caml_call1(Xml[10], cst_onmousemove),
     a_ontouchstart = caml_call1(Xml[12], cst_ontouchstart),
     a_ontouchend = caml_call1(Xml[12], cst_ontouchend),
     a_ontouchmove = caml_call1(Xml[12], cst_ontouchmove),
     a_ontouchcancel = caml_call1(Xml[12], cst_ontouchcancel),
     a_stop_color = caml_call1(color_attrib, cst_stop_color),
     _a8_ = C[12];
    function a_stop_opacity(_dE_){
     return user_attrib(_a8_, cst_stop_opacity, _dE_);
    }
    var _a9_ = C[18];
    function a_stroke(_dD_){return user_attrib(_a9_, cst_stroke, _dD_);}
    var _a__ = C[10];
    function a_stroke_width(_dC_){
     return user_attrib(_a__, cst_stroke_width, _dC_);
    }
    function a_stroke_linecap(x){
     return user_attrib(C[4], cst_stroke_linecap, x);
    }
    function a_stroke_linejoin(x){
     return user_attrib(C[4], cst_stroke_linejoin, x);
    }
    var _a$_ = C[12];
    function a_stroke_miterlimit(_dB_){
     return user_attrib(_a$_, cst_stroke_miterlimit, _dB_);
    }
    function a_stroke_dasharray(x){
     return user_attrib(C[20], cst_stroke_dasharray, x);
    }
    var _ba_ = C[10];
    function a_stroke_dashoffset(_dA_){
     return user_attrib(_ba_, cst_stroke_dashoffset, _dA_);
    }
    var _bb_ = C[12];
    function a_stroke_opacity(_dz_){
     return user_attrib(_bb_, cst_stroke_opacity, _dz_);
    }
    function svg(opt, children){
     var
      a = opt ? opt[1] : 0,
      _dy_ =
        [0,
         caml_call2
          (string_attrib,
           cst_xmlns_xlink,
           caml_call1(Xml[1][1], cst_http_www_w3_org_1999_xlink)),
         a],
      attribs =
        [0,
         caml_call2
          (string_attrib,
           cst_xmlns,
           caml_call1(Xml[1][1], cst_http_www_w3_org_2000_svg)),
         _dy_];
     return star(cst_svg$0, [0, attribs], children);
    }
    function g(_dw_, _dx_){return star(cst_g, _dw_, _dx_);}
    function defs(_du_, _dv_){return star(cst_defs, _du_, _dv_);}
    function desc(_ds_, _dt_){return unary(cst_desc, _ds_, _dt_);}
    function title(_dq_, _dr_){return unary(cst_title, _dq_, _dr_);}
    function symbol(_do_, _dp_){return star(cst_symbol, _do_, _dp_);}
    function use(_dm_, _dn_){return star(cst_use, _dm_, _dn_);}
    function image(_dk_, _dl_){return star(cst_image, _dk_, _dl_);}
    function switch$0(_di_, _dj_){return star(cst_switch, _di_, _dj_);}
    function style(_dg_, _dh_){return unary(cst_style$0, _dg_, _dh_);}
    function path(_de_, _df_){return star(cst_path$0, _de_, _df_);}
    function rect(_dc_, _dd_){return star(cst_rect, _dc_, _dd_);}
    function circle(_da_, _db_){return star(cst_circle, _da_, _db_);}
    function ellipse(_c__, _c$_){return star(cst_ellipse, _c__, _c$_);}
    function line(_c8_, _c9_){return star(cst_line, _c8_, _c9_);}
    function polyline(_c6_, _c7_){return star(cst_polyline, _c6_, _c7_);}
    function polygon(_c4_, _c5_){return star(cst_polygon, _c4_, _c5_);}
    function text(_c2_, _c3_){return star(cst_text, _c2_, _c3_);}
    function tspan(_c0_, _c1_){return star(cst_tspan, _c0_, _c1_);}
    function tref(_cY_, _cZ_){return star(cst_tref, _cY_, _cZ_);}
    function textPath(_cW_, _cX_){return star(cst_textPath, _cW_, _cX_);}
    function altGlyph(_cU_, _cV_){return unary(cst_altGlyph, _cU_, _cV_);}
    function altGlyphDef(_cS_, _cT_){
     return unary(cst_altGlyphDef, _cS_, _cT_);
    }
    function altGlyphItem(_cQ_, _cR_){
     return star(cst_altGlyphItem, _cQ_, _cR_);
    }
    function glyphRef(_cO_, _cP_){return nullary(cst_glyphRef$0, _cO_, _cP_);}
    function marker(_cM_, _cN_){return star(cst_marker, _cM_, _cN_);}
    function color_profile(_cK_, _cL_){
     return star(cst_color_profile, _cK_, _cL_);
    }
    function linearGradient(_cI_, _cJ_){
     return star(cst_linearGradient, _cI_, _cJ_);
    }
    function radialGradient(_cG_, _cH_){
     return star(cst_radialGradient, _cG_, _cH_);
    }
    function stop(_cE_, _cF_){return star(cst_stop, _cE_, _cF_);}
    function pattern(_cC_, _cD_){return star(cst_pattern, _cC_, _cD_);}
    function clipPath(_cA_, _cB_){return star(cst_clipPath, _cA_, _cB_);}
    function filter(_cy_, _cz_){return star(cst_filter, _cy_, _cz_);}
    function feDistantLight(_cw_, _cx_){
     return star(cst_feDistantLight, _cw_, _cx_);
    }
    function fePointLight(_cu_, _cv_){
     return star(cst_fePointLight, _cu_, _cv_);
    }
    function feSpotLight(_cs_, _ct_){
     return star(cst_feSpotLight, _cs_, _ct_);
    }
    function feBlend(_cq_, _cr_){return star(cst_feBlend, _cq_, _cr_);}
    function feColorMatrix(_co_, _cp_){
     return star(cst_feColorMatrix, _co_, _cp_);
    }
    function feComponentTransfer(_cm_, _cn_){
     return star(cst_feComponentTransfer, _cm_, _cn_);
    }
    function feFuncA(_ck_, _cl_){return star(cst_feFuncA, _ck_, _cl_);}
    function feFuncG(_ci_, _cj_){return star(cst_feFuncG, _ci_, _cj_);}
    function feFuncB(_cg_, _ch_){return star(cst_feFuncB, _cg_, _ch_);}
    function feFuncR(_ce_, _cf_){return star(cst_feFuncR, _ce_, _cf_);}
    function feComposite(_cc_, _cd_){
     return star(cst_feComposite, _cc_, _cd_);
    }
    function feConvolveMatrix(_ca_, _cb_){
     return star(cst_feConvolveMatrix, _ca_, _cb_);
    }
    function feDiffuseLighting(_b__, _b$_){
     return star(cst_feDiffuseLighting, _b__, _b$_);
    }
    function feDisplacementMap(_b8_, _b9_){
     return star(cst_feDisplacementMap, _b8_, _b9_);
    }
    function feFlood(_b6_, _b7_){return star(cst_feFlood, _b6_, _b7_);}
    function feGaussianBlur(_b4_, _b5_){
     return star(cst_feGaussianBlur, _b4_, _b5_);
    }
    function feImage(_b2_, _b3_){return star(cst_feImage, _b2_, _b3_);}
    function feMerge(_b0_, _b1_){return star(cst_feMerge, _b0_, _b1_);}
    function feMorphology(_bY_, _bZ_){
     return star(cst_feMorphology, _bY_, _bZ_);
    }
    function feOffset(_bW_, _bX_){return star(cst_feOffset, _bW_, _bX_);}
    function feSpecularLighting(_bU_, _bV_){
     return star(cst_feSpecularLighting, _bU_, _bV_);
    }
    function feTile(_bS_, _bT_){return star(cst_feTile, _bS_, _bT_);}
    function feTurbulence(_bQ_, _bR_){
     return star(cst_feTurbulence, _bQ_, _bR_);
    }
    function cursor(_bO_, _bP_){return star(cst_cursor, _bO_, _bP_);}
    function a(_bM_, _bN_){return star(cst_a, _bM_, _bN_);}
    function view(_bK_, _bL_){return star(cst_view, _bK_, _bL_);}
    function script(_bI_, _bJ_){return unary(cst_script, _bI_, _bJ_);}
    function animate(_bG_, _bH_){return star(cst_animate, _bG_, _bH_);}
    function set(_bE_, _bF_){return star(cst_set, _bE_, _bF_);}
    function animateMotion(_bC_, _bD_){
     return star(cst_animateMotion, _bC_, _bD_);
    }
    function mpath(_bA_, _bB_){return star(cst_mpath, _bA_, _bB_);}
    function animateColor(_by_, _bz_){
     return star(cst_animateColor, _by_, _bz_);
    }
    function animateTransform(_bw_, _bx_){
     return star(cst_animateTransform, _bw_, _bx_);
    }
    function font(_bu_, _bv_){return star(cst_font, _bu_, _bv_);}
    function glyph(_bs_, _bt_){return star(cst_glyph, _bs_, _bt_);}
    function missing_glyph(_bq_, _br_){
     return star(cst_missing_glyph, _bq_, _br_);
    }
    function hkern(_bo_, _bp_){return nullary(cst_hkern, _bo_, _bp_);}
    function vkern(_bm_, _bn_){return nullary(cst_vkern, _bm_, _bn_);}
    function font_face(_bk_, _bl_){return nullary(cst_font_face, _bk_, _bl_);}
    function font_face_src(_bi_, _bj_){
     return star(cst_font_face_src, _bi_, _bj_);
    }
    function font_face_uri(_bg_, _bh_){
     return star(cst_font_face_uri, _bg_, _bh_);
    }
    function font_face_format(_be_, _bf_){
     return nullary(cst_font_face_uri$0, _be_, _bf_);
    }
    function font_face_name(_bc_, _bd_){
     return nullary(cst_font_face_name, _bc_, _bd_);
    }
    function doc_toelt(x){return x;}
    var I = caml_call1(Xml_stream[2], Xml);
    function of_seq(s){var x = caml_call1(I[1], s); return x;}
    function data(s){return caml_call1(Xml[18], s);}
    function leaf(tag, a, param){return caml_call2(Xml[20], a, tag);}
    function node(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function coerce_elt(x){return x;}
    var
     float_attrib$0 = Xml[4],
     int_attrib = Xml[5],
     string_attrib$0 = Xml[6];
    function uri_attrib(a, s){return caml_call2(Xml[13], a, s);}
    var
     space_sep_attrib = Xml[7],
     comma_sep_attrib = Xml[8],
     Unsafe =
       [0,
        data,
        leaf,
        node,
        coerce_elt,
        float_attrib$0,
        int_attrib,
        string_attrib$0,
        uri_attrib,
        space_sep_attrib,
        comma_sep_attrib];
    return [0,
            Xml,
            Info,
            string_of_uri,
            uri_of_string,
            tot,
            totl,
            toelt,
            toeltl,
            to_attrib,
            ,
            ,
            ,
            to_xmlattribs,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            metadata,
            foreignObject,
            txt,
            txt,
            a_version,
            a_baseProfile,
            a_x,
            a_y,
            a_width,
            a_height,
            a_preserveAspectRatio,
            a_contentScriptType,
            a_contentStyleType,
            a_zoomAndPan,
            a_href,
            a_xlink_href,
            a_requiredFeatures,
            a_requiredExtensions,
            a_systemLanguage,
            a_externalRessourcesRequired,
            a_id,
            a_user_data,
            a_xml_base,
            a_xml_lang,
            a_xml_space,
            a_type,
            a_media,
            a_xlink_title,
            a_class,
            a_style,
            a_transform,
            a_viewBox,
            a_d,
            a_pathLength,
            a_rx,
            a_ry,
            a_cx,
            a_cy,
            a_r,
            a_x1,
            a_y1,
            a_x2,
            a_y2,
            a_points,
            a_x_list,
            a_y_list,
            a_dx,
            a_dy,
            a_dx_list,
            a_dy_list,
            a_lengthAdjust,
            a_textLength,
            a_text_anchor,
            a_text_decoration,
            a_text_rendering,
            a_rotate,
            a_startOffset,
            a_method,
            a_spacing,
            a_glyphRef,
            a_format,
            a_markerUnits,
            a_refX,
            a_refY,
            a_markerWidth,
            a_markerHeight,
            a_orient,
            a_local,
            a_rendering_intent,
            a_gradientUnits,
            a_gradientTransform,
            a_spreadMethod,
            a_fx,
            a_fy,
            a_offset,
            a_patternUnits,
            a_patternContentUnits,
            a_patternTransform,
            a_clipPathUnits,
            a_maskUnits,
            a_maskContentUnits,
            a_primitiveUnits,
            a_filterRes,
            a_result,
            a_in,
            a_in2,
            a_azimuth,
            a_elevation,
            a_pointsAtX,
            a_pointsAtY,
            a_pointsAtZ,
            a_specularExponent,
            a_specularConstant,
            a_limitingConeAngle,
            a_mode,
            a_feColorMatrix_type,
            a_values,
            a_transfer_type,
            a_tableValues,
            a_intercept,
            a_amplitude,
            a_exponent,
            a_transfer_offset,
            a_feComposite_operator,
            a_k1,
            a_k2,
            a_k3,
            a_k4,
            a_order,
            a_kernelMatrix,
            a_divisor,
            a_bias,
            a_kernelUnitLength,
            a_targetX,
            a_targetY,
            a_edgeMode,
            a_preserveAlpha,
            a_surfaceScale,
            a_diffuseConstant,
            a_scale,
            a_xChannelSelector,
            a_yChannelSelector,
            a_stdDeviation,
            a_feMorphology_operator,
            a_radius,
            a_baseFrenquency,
            a_numOctaves,
            a_seed,
            a_stitchTiles,
            a_feTurbulence_type,
            a_xlink_show,
            a_xlink_actuate,
            a_target,
            a_viewTarget,
            a_attributeName,
            a_attributeType,
            a_begin,
            a_dur,
            a_min,
            a_max,
            a_restart,
            a_repeatCount,
            a_repeatDur,
            a_fill,
            a_animation_fill,
            a_fill_rule,
            a_calcMode,
            a_animation_values,
            a_keyTimes,
            a_keySplines,
            a_from,
            a_to,
            a_by,
            a_additive,
            a_accumulate,
            a_keyPoints,
            a_path,
            a_animateTransform_type,
            a_horiz_origin_x,
            a_horiz_origin_y,
            a_horiz_adv_x,
            a_vert_origin_x,
            a_vert_origin_y,
            a_vert_adv_y,
            a_unicode,
            a_glyph_name,
            a_orientation,
            a_arabic_form,
            a_lang,
            a_u1,
            a_u2,
            a_g1,
            a_g2,
            a_k,
            a_font_family,
            a_font_style,
            a_font_variant,
            a_font_weight,
            a_font_stretch,
            a_font_size,
            a_unicode_range,
            a_units_per_em,
            a_stemv,
            a_stemh,
            a_slope,
            a_cap_height,
            a_x_height,
            a_accent_height,
            a_ascent,
            a_widths,
            a_bbox,
            a_ideographic,
            a_alphabetic,
            a_mathematical,
            a_hanging,
            a_videographic,
            a_v_alphabetic,
            a_v_mathematical,
            a_v_hanging,
            a_underline_position,
            a_underline_thickness,
            a_strikethrough_position,
            a_strikethrough_thickness,
            a_overline_position,
            a_overline_thickness,
            a_string,
            a_name,
            a_alignment_baseline,
            a_dominant_baseline,
            a_onabort,
            a_onactivate,
            a_onbegin,
            a_onend,
            a_onerror,
            a_onfocusin,
            a_onfocusout,
            a_onload,
            a_onrepeat,
            a_onresize,
            a_onscroll,
            a_onunload,
            a_onzoom,
            a_onclick,
            a_onmousedown,
            a_onmouseup,
            a_onmouseover,
            a_onmouseout,
            a_onmousemove,
            a_ontouchstart,
            a_ontouchend,
            a_ontouchmove,
            a_ontouchcancel,
            a_stop_color,
            a_stop_opacity,
            a_stroke,
            a_stroke_width,
            a_stroke_linecap,
            a_stroke_linejoin,
            a_stroke_miterlimit,
            a_stroke_dasharray,
            a_stroke_dashoffset,
            a_stroke_opacity,
            svg,
            g,
            defs,
            desc,
            title,
            symbol,
            use,
            image,
            switch$0,
            style,
            path,
            rect,
            circle,
            ellipse,
            line,
            polyline,
            polygon,
            text,
            tspan,
            tref,
            textPath,
            altGlyph,
            altGlyphDef,
            altGlyphItem,
            glyphRef,
            marker,
            color_profile,
            linearGradient,
            radialGradient,
            stop,
            pattern,
            clipPath,
            filter,
            feDistantLight,
            fePointLight,
            feSpotLight,
            feBlend,
            feColorMatrix,
            feComponentTransfer,
            feFuncA,
            feFuncG,
            feFuncB,
            feFuncR,
            feComposite,
            feConvolveMatrix,
            feDiffuseLighting,
            feDisplacementMap,
            feFlood,
            feGaussianBlur,
            feImage,
            feMerge,
            feMorphology,
            feOffset,
            feSpecularLighting,
            feTile,
            feTurbulence,
            cursor,
            a,
            view,
            script,
            animate,
            animate,
            set,
            animateMotion,
            mpath,
            animateColor,
            animateTransform,
            font,
            glyph,
            missing_glyph,
            hkern,
            vkern,
            font_face,
            font_face_src,
            font_face_uri,
            font_face_format,
            font_face_name,
            doc_toelt,
            ,
            of_seq,
            Unsafe];
   }
   function Wrapped_functions(Xml){
    function string_of_alignment_baseline(param){
     return -72987685 <= param
             ? 354434192
               <= param
               ? 881373037
                 <= param
                 ? 1018879136 <= param ? cst_after_edge : cst_alphabetic$0
                 : 726666127 <= param ? cst_auto : cst_hanging$0
               : 15943541
                 === param
                 ? cst_middle
                 : 218255880 <= param ? cst_mathematical$0 : cst_inherit
             : -840627829
               <= param
               ? -415175851
                 <= param
                 ? -354838363 <= param ? cst_baseline : cst_central
                 : -693588957
                   <= param
                   ? cst_ideographic$0
                   : cst_text_before_edge
               : -863864035 <= param ? cst_before_edge : cst_text_after_edge;
    }
    function string_of_big_variant(param){
     return 3350435 <= param
             ? 476616093
               <= param
               ? 744337004
                 <= param
                 ? 914009117
                   <= param
                   ? 970483178
                     <= param
                     ? 1040349136
                       <= param
                       ? 1071251601 <= param ? cst_stitch : cst_onRequest
                       : 990972795 <= param ? cst_repeat : cst_wrap
                     : 958206052 <= param ? cst_remove : cst_reflect
                   : 870530776
                     <= param
                     ? 884917925
                       <= param
                       ? 889668530 <= param ? cst_noStitch : cst$4
                       : 881966452 <= param ? cst_over : cst_none$0
                     : 861714216 <= param ? cst_medial : cst_never
                 : 568588039
                   <= param
                   ? 716799946
                     <= param
                     ? 726666127
                       <= param
                       ? 737755699 <= param ? cst_butt : cst_auto$0
                       : 726615284 <= param ? cst_atop : cst_arithmetic
                     : 698610924 <= param ? cst_underline : cst_gamma
                   : 512807795
                     <= param
                     ? 518168424
                       <= param
                       ? 557106693 <= param ? cst_linear : cst_overline
                       : 517347077 <= param ? cst_onLoad : cst_turbulence
                     : 504440814 <= param ? cst_table : cst_geometricPrecision
               : 163178525
                 <= param
                 ? 316735838
                   <= param
                   ? 389604418
                     <= param
                     ? 463106021
                       <= param
                       ? 466749770 <= param ? cst_optimizeSpeed : cst_miter
                       : 418396260 <= param ? cst_initial : cst_start
                     : 384893183 <= param ? cst_whenNotActive : cst_identity
                   : 201080426
                     <= param
                     ? 289998318
                       <= param
                       ? 289998319 <= param ? cst_skewY : cst_skewX
                       : 226915517 <= param ? cst_square : cst_scale$0
                     : 172069535 <= param ? cst_exact : cst_perceptual
                 : 4393399
                   <= param
                   ? 9660462
                     <= param
                     ? 106228547
                       <= param
                       ? 118574553 <= param ? cst_discrete : cst_erode
                       : 15943541 <= param ? cst_middle$0 : cst_round
                     : 4401019 <= param ? cst_xor : cst_XML
                   : 3901504
                     <= param
                     ? 4000051
                       <= param
                       ? 4153707 <= param ? cst_sum : cst_pad
                       : 3954798 <= param ? cst_out : cst_new
                     : 3455931 <= param ? cst_end : cst_CSS
             : -453122489
               <= param
               ? -72987685
                 <= param
                 ? 66
                   <= param
                   ? 72
                     <= param
                     ? 86
                       <= param
                       ? 16389 <= param ? cst_in$1 : cst_v
                       : 82 <= param ? cst_r$0 : cst_h
                     : 71 <= param ? cst_g$0 : cst_b
                   : -68046964
                     <= param
                     ? -4932997
                       <= param
                       ? 65 <= param ? cst_a$0 : cst_rotate$0
                       : -22441528 <= param ? cst_disable : cst_screen
                     : -72678338
                       <= param
                       ? cst_absolute_colorimetric
                       : cst_inherit$0
                 : -262362527
                   <= param
                   ? -197222844
                     <= param
                     ? -115006565
                       <= param
                       ? -76840209 <= param ? cst_always : cst_spacingAndGlyphs
                       : -126259180 <= param ? cst_replace : cst_multiply
                     : -197983439 <= param ? cst_spline : cst_matrix
                   : -384499551
                     <= param
                     ? -318472885
                       <= param
                       ? -313337870 <= param ? cst_saturation : cst_dilate
                       : -346900690 <= param ? cst_translate : cst_default
                     : -415993185 <= param ? cst_lighten : cst_normal
               : -839430911
                 <= param
                 ? -672592881
                   <= param
                   ? -552838301
                     <= param
                     ? -505547199
                       <= param
                       ? -474415497 <= param ? cst_freeze : cst_magnify
                       : -543144685 <= param ? cst_hueRotate : cst_spacing$0
                     : -621842423 <= param ? cst_fractalNoise : cst_saturate
                   : -797470191
                     <= param
                     ? -699926424
                       <= param
                       ? -689066995
                         <= param
                         ? cst_userSpaceOnUse
                         : cst_objectBoundingBox
                       : -707876225 <= param ? cst_darken : cst_paced
                     : -824137927
                       <= param
                       ? cst_isolated
                       : cst_optimizeLegibility
                 : -951087346
                   <= param
                   ? -912466532
                     <= param
                     ? -851306022
                       <= param
                       ? -851300629
                         <= param
                         ? cst_luminanceToAlpha
                         : cst_line_through
                       : -912009552 <= param ? cst_other : cst_terminal
                     : -937074372 <= param ? cst_blink : cst_stroke_width$0
                   : -1044642615
                     === param
                     ? cst_relative_colorimetric
                     : -1014056864
                       <= param
                       ? -1012636187 <= param ? cst_stretch : cst_bevel
                       : -1024851605 <= param ? cst_duplicate : cst_preserve;
    }
    var string_of_bool = Stdlib[30];
    function _B_(param){
     var b = param[2], a = param[1];
     return caml_call3(Stdlib_Printf[4], _d_, a, b);
    }
    var _C_ = 0;
    function string_of_coords(_V_){return list(_C_, _B_, _V_);}
    function string_of_dominant_baseline(param){
     return -72987685 <= param
             ? 354434192
               <= param
               ? 881373037
                 <= param
                 ? 945233102 <= param ? cst_nochange : cst_alphabetic$1
                 : 726666127 <= param ? cst_auto$1 : cst_hanging$1
               : 15943541
                 === param
                 ? cst_middle$1
                 : 218255880 <= param ? cst_mathematical$1 : cst_inherit$1
             : -840627829
               <= param
               ? -504734109
                 <= param
                 ? -415175851 <= param ? cst_central$0 : cst_usescript
                 : -693588957
                   <= param
                   ? cst_ideographic$1
                   : cst_textbeforeedge
               : -880506735 <= param ? cst_resetsize : cst_textafteredge;
    }
    function string_of_in_value(param){
     if(typeof param === "number")
      return 198492909 <= param
              ? 885982307
                <= param
                ? 976982182 <= param ? cst_strokePaint : cst_sourceAlpha
                : 768130555 <= param ? cst_fillPaint : cst_sourceGraphic
              : -522189715
                <= param
                ? cst_backgroundImage
                : cst_backgroundAlpha;
     var svg = param[2];
     return svg;
    }
    var string_of_int = Stdlib[33], _D_ = 0;
    function string_of_lengths(_U_){return list(_D_, string_of_length, _U_);}
    var string_of_number = Xml_print[6];
    function string_of_percentage(x){
     var _T_ = caml_call1(string_of_number, x);
     return caml_call2(Stdlib[28], _T_, cst$5);
    }
    function string_of_fourfloats(param){
     var
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _P_ = caml_call1(string_of_number, d),
      _Q_ = caml_call1(string_of_number, c),
      _R_ = caml_call1(string_of_number, b),
      _S_ = caml_call1(string_of_number, a);
     return caml_call5(Stdlib_Printf[4], _e_, _S_, _R_, _Q_, _P_);
    }
    function string_of_number_optional_numb(param){
     var match = param[2], x = param[1];
     if(! match) return caml_call2(Stdlib_Printf[4], _g_, x);
     var y = match[1];
     return caml_call3(Stdlib_Printf[4], _f_, x, y);
    }
    var _E_ = 0;
    function string_of_numbers(_O_){return list(_E_, string_of_number, _O_);}
    function string_of_numbers_semicolon(_N_){return list(_h_, string_of_number, _N_);
    }
    function string_of_offset(param){
     if(-488794310 <= param[1]){
      var x = param[2];
      return string_of_percentage(x);
     }
     var x$0 = param[2];
     return caml_call1(string_of_number, x$0);
    }
    function string_of_orient(param){
     if(! param) return cst_auto$2;
     var svg = param[1];
     return to_string(angle_names, svg);
    }
    function string_of_strokedasharray(l){
     return l ? list(0, string_of_length, l) : cst_none$1;
    }
    function string_of_transform(param){
     var _H_ = param[1];
     if(-4932997 > _H_){
      if(-262362527 <= _H_){
       var
        match$1 = param[2],
        f = match$1[6],
        e = match$1[5],
        d = match$1[4],
        c = match$1[3],
        b = match$1[2],
        a = match$1[1];
       return caml_call7(Stdlib_Printf[4], _n_, a, b, c, d, e, f);
      }
      var x$2 = param[2], _K_ = string_of_number_optional_numb(x$2);
      return caml_call2(Stdlib_Printf[4], _o_, _K_);
     }
     if(289998318 <= _H_){
      if(289998319 <= _H_){
       var angle = param[2], _L_ = to_string(angle_names, angle);
       return caml_call2(Stdlib_Printf[4], _i_, _L_);
      }
      var angle$0 = param[2], _M_ = to_string(angle_names, angle$0);
      return caml_call2(Stdlib_Printf[4], _j_, _M_);
     }
     if(201080426 <= _H_){
      var x = param[2], _I_ = string_of_number_optional_numb(x);
      return caml_call2(Stdlib_Printf[4], _k_, _I_);
     }
     var match = param[2], x$0 = match[2], angle$1 = match[1];
     if(x$0)
      var
       match$0 = x$0[1],
       y = match$0[2],
       x$1 = match$0[1],
       _J_ = caml_call3(Stdlib_Printf[4], _l_, x$1, y);
     else
      var _J_ = cst$6;
     var _G_ = to_string(angle_names, angle$1);
     return caml_call3(Stdlib_Printf[4], _m_, _G_, _J_);
    }
    function string_of_transforms(l){
     var _F_ = caml_call2(Stdlib_List[20], string_of_transform, l);
     return caml_call2(Stdlib_String[7], cst$7, _F_);
    }
    return [0,
            Xml,
            string_of_alignment_baseline,
            string_of_big_variant,
            string_of_bool,
            string_of_coords,
            string_of_dominant_baseline,
            string_of_in_value,
            string_of_int,
            string_of_length,
            string_of_lengths,
            string_of_number,
            ,
            string_of_fourfloats,
            string_of_number_optional_numb,
            string_of_numbers,
            string_of_numbers_semicolon,
            string_of_offset,
            string_of_orient,
            string_of_paint,
            string_of_fill_rule,
            string_of_strokedasharray,
            string_of_transform,
            string_of_transforms];
   }
   var
    Svg_f =
      [0,
       function(_x_){
        var
         _w_ = Wrapped_functions(_x_),
         _A_ =
           Make_with_wrapped_functions
            (_x_,
             [0,
              _w_[1],
              _w_[2],
              _w_[4],
              _w_[3],
              _w_[5],
              _w_[6],
              _w_[13],
              _w_[7],
              _w_[8],
              _w_[9],
              _w_[10],
              _w_[11],
              _w_[14],
              _w_[15],
              _w_[16],
              _w_[17],
              _w_[18],
              _w_[19],
              _w_[20],
              _w_[21],
              _w_[22],
              _w_[23]]),
         _y_ = _A_[344],
         _z_ = _A_[2];
        return [0,
                _A_[1],
                [0, _z_[1], _z_[2], _z_[4], _z_[5], _z_[6], _z_[7], _z_[3]],
                _A_[3],
                _A_[4],
                _A_[26],
                _A_[27],
                _A_[28],
                _A_[29],
                _A_[30],
                _A_[31],
                _A_[32],
                _A_[33],
                _A_[34],
                _A_[35],
                _A_[36],
                _A_[37],
                _A_[38],
                _A_[39],
                _A_[40],
                _A_[41],
                _A_[42],
                _A_[43],
                _A_[44],
                _A_[45],
                _A_[46],
                _A_[47],
                _A_[48],
                _A_[49],
                _A_[50],
                _A_[51],
                _A_[52],
                _A_[53],
                _A_[54],
                _A_[55],
                _A_[56],
                _A_[57],
                _A_[58],
                _A_[59],
                _A_[60],
                _A_[61],
                _A_[62],
                _A_[63],
                _A_[64],
                _A_[65],
                _A_[66],
                _A_[67],
                _A_[68],
                _A_[69],
                _A_[70],
                _A_[71],
                _A_[72],
                _A_[73],
                _A_[74],
                _A_[75],
                _A_[76],
                _A_[77],
                _A_[78],
                _A_[79],
                _A_[80],
                _A_[81],
                _A_[82],
                _A_[83],
                _A_[84],
                _A_[85],
                _A_[86],
                _A_[87],
                _A_[88],
                _A_[89],
                _A_[90],
                _A_[91],
                _A_[92],
                _A_[93],
                _A_[94],
                _A_[95],
                _A_[96],
                _A_[97],
                _A_[98],
                _A_[99],
                _A_[100],
                _A_[101],
                _A_[102],
                _A_[103],
                _A_[104],
                _A_[105],
                _A_[106],
                _A_[107],
                _A_[108],
                _A_[109],
                _A_[110],
                _A_[111],
                _A_[112],
                _A_[113],
                _A_[114],
                _A_[115],
                _A_[116],
                _A_[117],
                _A_[118],
                _A_[119],
                _A_[120],
                _A_[121],
                _A_[122],
                _A_[123],
                _A_[124],
                _A_[125],
                _A_[126],
                _A_[127],
                _A_[128],
                _A_[129],
                _A_[130],
                _A_[131],
                _A_[132],
                _A_[133],
                _A_[134],
                _A_[135],
                _A_[136],
                _A_[137],
                _A_[138],
                _A_[139],
                _A_[140],
                _A_[141],
                _A_[142],
                _A_[143],
                _A_[144],
                _A_[145],
                _A_[146],
                _A_[147],
                _A_[148],
                _A_[149],
                _A_[150],
                _A_[151],
                _A_[152],
                _A_[153],
                _A_[154],
                _A_[155],
                _A_[156],
                _A_[157],
                _A_[158],
                _A_[159],
                _A_[160],
                _A_[161],
                _A_[162],
                _A_[163],
                _A_[164],
                _A_[165],
                _A_[166],
                _A_[167],
                _A_[168],
                _A_[169],
                _A_[170],
                _A_[171],
                _A_[172],
                _A_[173],
                _A_[174],
                _A_[175],
                _A_[176],
                _A_[177],
                _A_[178],
                _A_[179],
                _A_[180],
                _A_[181],
                _A_[182],
                _A_[183],
                _A_[184],
                _A_[185],
                _A_[186],
                _A_[187],
                _A_[188],
                _A_[189],
                _A_[190],
                _A_[191],
                _A_[192],
                _A_[193],
                _A_[194],
                _A_[195],
                _A_[196],
                _A_[197],
                _A_[198],
                _A_[199],
                _A_[200],
                _A_[201],
                _A_[202],
                _A_[203],
                _A_[204],
                _A_[205],
                _A_[206],
                _A_[207],
                _A_[208],
                _A_[209],
                _A_[210],
                _A_[211],
                _A_[212],
                _A_[213],
                _A_[214],
                _A_[215],
                _A_[216],
                _A_[217],
                _A_[218],
                _A_[219],
                _A_[220],
                _A_[221],
                _A_[222],
                _A_[223],
                _A_[224],
                _A_[225],
                _A_[226],
                _A_[227],
                _A_[228],
                _A_[229],
                _A_[230],
                _A_[254],
                _A_[255],
                _A_[256],
                _A_[257],
                _A_[258],
                _A_[259],
                _A_[260],
                _A_[261],
                _A_[262],
                _A_[263],
                _A_[231],
                _A_[232],
                _A_[233],
                _A_[234],
                _A_[235],
                _A_[236],
                _A_[237],
                _A_[238],
                _A_[239],
                _A_[240],
                _A_[241],
                _A_[242],
                _A_[243],
                _A_[244],
                _A_[245],
                _A_[246],
                _A_[247],
                _A_[248],
                _A_[249],
                _A_[250],
                _A_[251],
                _A_[252],
                _A_[253],
                _A_[24],
                _A_[264],
                _A_[265],
                _A_[266],
                _A_[267],
                _A_[268],
                _A_[269],
                _A_[270],
                _A_[271],
                _A_[272],
                _A_[273],
                _A_[274],
                _A_[275],
                _A_[276],
                _A_[277],
                _A_[278],
                _A_[279],
                _A_[280],
                _A_[281],
                _A_[282],
                _A_[283],
                _A_[284],
                _A_[285],
                _A_[286],
                _A_[287],
                _A_[288],
                _A_[289],
                _A_[290],
                _A_[291],
                _A_[292],
                _A_[293],
                _A_[294],
                _A_[295],
                _A_[296],
                _A_[297],
                _A_[298],
                _A_[299],
                _A_[300],
                _A_[301],
                _A_[302],
                _A_[303],
                _A_[304],
                _A_[305],
                _A_[306],
                _A_[307],
                _A_[308],
                _A_[309],
                _A_[310],
                _A_[311],
                _A_[312],
                _A_[313],
                _A_[314],
                _A_[315],
                _A_[316],
                _A_[317],
                _A_[318],
                _A_[319],
                _A_[320],
                _A_[321],
                _A_[322],
                _A_[323],
                _A_[324],
                _A_[326],
                _A_[327],
                _A_[328],
                _A_[329],
                _A_[330],
                _A_[331],
                _A_[332],
                _A_[333],
                _A_[334],
                _A_[335],
                _A_[336],
                _A_[337],
                _A_[338],
                _A_[339],
                _A_[340],
                _A_[22],
                _A_[23],
                _A_[25],
                _A_[325],
                _A_[343],
                _A_[5],
                _A_[6],
                _A_[7],
                _A_[8],
                _A_[341],
                _A_[13],
                _A_[9],
                [0,
                 _y_[1],
                 _y_[3],
                 _y_[2],
                 _y_[4],
                 _y_[7],
                 _y_[5],
                 _y_[6],
                 _y_[8],
                 _y_[9],
                 _y_[10]]];
       },
       function(_u_){
        var _v_ = Wrapped_functions(_u_);
        return [0,
                _v_[1],
                _v_[2],
                _v_[4],
                _v_[3],
                _v_[5],
                _v_[6],
                _v_[13],
                _v_[7],
                _v_[8],
                _v_[9],
                _v_[10],
                _v_[11],
                _v_[14],
                _v_[15],
                _v_[16],
                _v_[17],
                _v_[18],
                _v_[19],
                _v_[20],
                _v_[21],
                _v_[22],
                _v_[23]];
       },
       function(_q_, _p_){
        var
         _r_ = Make_with_wrapped_functions(_q_, _p_),
         _s_ = _r_[344],
         _t_ = _r_[2];
        return [0,
                _r_[1],
                [0, _t_[1], _t_[2], _t_[4], _t_[5], _t_[6], _t_[7], _t_[3]],
                _r_[3],
                _r_[4],
                _r_[26],
                _r_[27],
                _r_[28],
                _r_[29],
                _r_[30],
                _r_[31],
                _r_[32],
                _r_[33],
                _r_[34],
                _r_[35],
                _r_[36],
                _r_[37],
                _r_[38],
                _r_[39],
                _r_[40],
                _r_[41],
                _r_[42],
                _r_[43],
                _r_[44],
                _r_[45],
                _r_[46],
                _r_[47],
                _r_[48],
                _r_[49],
                _r_[50],
                _r_[51],
                _r_[52],
                _r_[53],
                _r_[54],
                _r_[55],
                _r_[56],
                _r_[57],
                _r_[58],
                _r_[59],
                _r_[60],
                _r_[61],
                _r_[62],
                _r_[63],
                _r_[64],
                _r_[65],
                _r_[66],
                _r_[67],
                _r_[68],
                _r_[69],
                _r_[70],
                _r_[71],
                _r_[72],
                _r_[73],
                _r_[74],
                _r_[75],
                _r_[76],
                _r_[77],
                _r_[78],
                _r_[79],
                _r_[80],
                _r_[81],
                _r_[82],
                _r_[83],
                _r_[84],
                _r_[85],
                _r_[86],
                _r_[87],
                _r_[88],
                _r_[89],
                _r_[90],
                _r_[91],
                _r_[92],
                _r_[93],
                _r_[94],
                _r_[95],
                _r_[96],
                _r_[97],
                _r_[98],
                _r_[99],
                _r_[100],
                _r_[101],
                _r_[102],
                _r_[103],
                _r_[104],
                _r_[105],
                _r_[106],
                _r_[107],
                _r_[108],
                _r_[109],
                _r_[110],
                _r_[111],
                _r_[112],
                _r_[113],
                _r_[114],
                _r_[115],
                _r_[116],
                _r_[117],
                _r_[118],
                _r_[119],
                _r_[120],
                _r_[121],
                _r_[122],
                _r_[123],
                _r_[124],
                _r_[125],
                _r_[126],
                _r_[127],
                _r_[128],
                _r_[129],
                _r_[130],
                _r_[131],
                _r_[132],
                _r_[133],
                _r_[134],
                _r_[135],
                _r_[136],
                _r_[137],
                _r_[138],
                _r_[139],
                _r_[140],
                _r_[141],
                _r_[142],
                _r_[143],
                _r_[144],
                _r_[145],
                _r_[146],
                _r_[147],
                _r_[148],
                _r_[149],
                _r_[150],
                _r_[151],
                _r_[152],
                _r_[153],
                _r_[154],
                _r_[155],
                _r_[156],
                _r_[157],
                _r_[158],
                _r_[159],
                _r_[160],
                _r_[161],
                _r_[162],
                _r_[163],
                _r_[164],
                _r_[165],
                _r_[166],
                _r_[167],
                _r_[168],
                _r_[169],
                _r_[170],
                _r_[171],
                _r_[172],
                _r_[173],
                _r_[174],
                _r_[175],
                _r_[176],
                _r_[177],
                _r_[178],
                _r_[179],
                _r_[180],
                _r_[181],
                _r_[182],
                _r_[183],
                _r_[184],
                _r_[185],
                _r_[186],
                _r_[187],
                _r_[188],
                _r_[189],
                _r_[190],
                _r_[191],
                _r_[192],
                _r_[193],
                _r_[194],
                _r_[195],
                _r_[196],
                _r_[197],
                _r_[198],
                _r_[199],
                _r_[200],
                _r_[201],
                _r_[202],
                _r_[203],
                _r_[204],
                _r_[205],
                _r_[206],
                _r_[207],
                _r_[208],
                _r_[209],
                _r_[210],
                _r_[211],
                _r_[212],
                _r_[213],
                _r_[214],
                _r_[215],
                _r_[216],
                _r_[217],
                _r_[218],
                _r_[219],
                _r_[220],
                _r_[221],
                _r_[222],
                _r_[223],
                _r_[224],
                _r_[225],
                _r_[226],
                _r_[227],
                _r_[228],
                _r_[229],
                _r_[230],
                _r_[254],
                _r_[255],
                _r_[256],
                _r_[257],
                _r_[258],
                _r_[259],
                _r_[260],
                _r_[261],
                _r_[262],
                _r_[263],
                _r_[231],
                _r_[232],
                _r_[233],
                _r_[234],
                _r_[235],
                _r_[236],
                _r_[237],
                _r_[238],
                _r_[239],
                _r_[240],
                _r_[241],
                _r_[242],
                _r_[243],
                _r_[244],
                _r_[245],
                _r_[246],
                _r_[247],
                _r_[248],
                _r_[249],
                _r_[250],
                _r_[251],
                _r_[252],
                _r_[253],
                _r_[24],
                _r_[264],
                _r_[265],
                _r_[266],
                _r_[267],
                _r_[268],
                _r_[269],
                _r_[270],
                _r_[271],
                _r_[272],
                _r_[273],
                _r_[274],
                _r_[275],
                _r_[276],
                _r_[277],
                _r_[278],
                _r_[279],
                _r_[280],
                _r_[281],
                _r_[282],
                _r_[283],
                _r_[284],
                _r_[285],
                _r_[286],
                _r_[287],
                _r_[288],
                _r_[289],
                _r_[290],
                _r_[291],
                _r_[292],
                _r_[293],
                _r_[294],
                _r_[295],
                _r_[296],
                _r_[297],
                _r_[298],
                _r_[299],
                _r_[300],
                _r_[301],
                _r_[302],
                _r_[303],
                _r_[304],
                _r_[305],
                _r_[306],
                _r_[307],
                _r_[308],
                _r_[309],
                _r_[310],
                _r_[311],
                _r_[312],
                _r_[313],
                _r_[314],
                _r_[315],
                _r_[316],
                _r_[317],
                _r_[318],
                _r_[319],
                _r_[320],
                _r_[321],
                _r_[322],
                _r_[323],
                _r_[324],
                _r_[326],
                _r_[327],
                _r_[328],
                _r_[329],
                _r_[330],
                _r_[331],
                _r_[332],
                _r_[333],
                _r_[334],
                _r_[335],
                _r_[336],
                _r_[337],
                _r_[338],
                _r_[339],
                _r_[340],
                _r_[22],
                _r_[23],
                _r_[25],
                _r_[325],
                _r_[343],
                _r_[5],
                _r_[6],
                _r_[7],
                _r_[8],
                _r_[341],
                _r_[13],
                _r_[9],
                [0,
                 _s_[1],
                 _s_[3],
                 _s_[2],
                 _s_[4],
                 _s_[7],
                 _s_[5],
                 _s_[6],
                 _s_[8],
                 _s_[9],
                 _s_[10]]];
       }];
   runtime.caml_register_global(498, Svg_f, "Svg_f");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Html_f
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String, Xml_print, Xml_stream
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst$8 = " ",
    cst$9 = ", ",
    cst_all$1 = "all",
    cst_alternate$1 = "alternate",
    cst_any$2 = "any",
    cst_archives$1 = "archives",
    cst_area$0 = "area",
    cst_async$1 = "async",
    cst_audio$1 = "audio",
    cst_author$1 = "author",
    cst_autofocus$1 = "autofocus",
    cst_autoplay$1 = "autoplay",
    cst_base$0 = "base",
    cst_bookmark$1 = "bookmark",
    cst_br$0 = "br",
    cst_button$1 = "button",
    cst_char$1 = "char",
    cst_checkbox$1 = "checkbox",
    cst_checked$1 = "checked",
    cst_cite$1 = "cite",
    cst_col$1 = "col",
    cst_colgroup$1 = "colgroup",
    cst_cols$1 = "cols",
    cst_command$1 = "command",
    cst_controls$1 = "controls",
    cst_datetime$1 = "datetime",
    cst_defer$1 = "defer",
    cst_disabled$1 = "disabled",
    cst_email$1 = "email",
    cst_embed$0 = "embed",
    cst_external$1 = "external",
    cst_first$1 = "first",
    cst_for$1 = "for",
    cst_form$1 = "form",
    cst_formnovalidate$1 = "formnovalidate",
    cst_help$1 = "help",
    cst_hidden$2 = "hidden",
    cst_hr$0 = "hr",
    cst_html$1 = "html",
    cst_http_www_w3_org_1999_xhtml$0 = "http://www.w3.org/1999/xhtml",
    cst_icon$2 = "icon",
    cst_img$0 = "img",
    cst_index$1 = "index",
    cst_input$0 = "input",
    cst_ismap$1 = "ismap",
    cst_keygen$0 = "keygen",
    cst_label$1 = "label",
    cst_last$1 = "last",
    cst_license$1 = "license",
    cst_link$0 = "link",
    cst_loop$1 = "loop",
    cst_manifest$1 = "manifest",
    cst_max$1 = "max",
    cst_meta$0 = "meta",
    cst_min$1 = "min",
    cst_multiple$1 = "multiple",
    cst_muted$1 = "muted",
    cst_next$1 = "next",
    cst_nofollow$1 = "nofollow",
    cst_noreferrer$1 = "noreferrer",
    cst_novalidate$1 = "novalidate",
    cst_off$1 = "off",
    cst_on$1 = "on",
    cst_open$1 = "open",
    cst_param$0 = "param",
    cst_pingback$1 = "pingback",
    cst_prefetch$1 = "prefetch",
    cst_preload$1 = "preload",
    cst_prev$1 = "prev",
    cst_pubdate$1 = "pubdate",
    cst_radio$1 = "radio",
    cst_readonly$2 = "readonly",
    cst_required$1 = "required",
    cst_reserved$1 = "reserved",
    cst_rows$1 = "rows",
    cst_scoped$1 = "scoped",
    cst_seamless$1 = "seamless",
    cst_search$2 = "search",
    cst_selected$1 = "selected",
    cst_sidebar$1 = "sidebar",
    cst_sizes$1 = "sizes",
    cst_source$0 = "source",
    cst_span$1 = "span",
    cst_style$1 = "style",
    cst_stylesheet$1 = "stylesheet",
    cst_summary$1 = "summary",
    cst_tag$1 = "tag",
    cst_tel$1 = "tel",
    cst_text$1 = "text",
    cst_time$1 = "time",
    cst_title$1 = "title",
    cst_type$5 = "type",
    cst_up$1 = "up",
    cst_url$1 = "url",
    cst_value$3 = "value",
    cst_wbr$0 = "wbr",
    cst_xml_lang$1 = "xml:lang",
    caml_list_of_js_array = runtime.caml_list_of_js_array;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$8,
    cst$6 = cst$9,
    cst$5 = cst$8,
    cst$4 = cst$9,
    cst$3 = ",",
    cst$2 = cst$8,
    cst$1 = cst$8,
    cst$0 = cst$10,
    cst = cst$10,
    content_type = "text/html",
    alternative_content_types =
      [0, "application/xhtml+xml", [0, "application/xml", [0, "text/xml", 0]]],
    version = "HTML5-draft",
    standard = "http://www.w3.org/TR/html5/",
    namespace = cst_http_www_w3_org_1999_xhtml$0,
    emptytags =
      caml_list_of_js_array
       ([cst_area$0,
         cst_base$0,
         cst_br$0,
         cst_col$1,
         cst_command$1,
         cst_embed$0,
         cst_hr$0,
         cst_img$0,
         cst_input$0,
         cst_keygen$0,
         cst_link$0,
         cst_meta$0,
         cst_param$0,
         cst_source$0,
         cst_wbr$0]),
    cst_href = "href",
    cst_rel = "rel",
    cst_src = "src",
    Stdlib_String = global_data.Stdlib__String,
    Xml_print = global_data.Xml_print,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Xml_stream = global_data.Xml_stream,
    cst_html = cst_html$1,
    cst_class = "class",
    cst_id = "id",
    cst_data = "data-",
    cst_title = cst_title$1,
    cst_xml_lang = cst_xml_lang$1,
    cst_lang = "lang",
    cst_style = cst_style$1,
    cst_property = "property",
    cst_onabort = "onabort",
    cst_onafterprint = "onafterprint",
    cst_onbeforeprint = "onbeforeprint",
    cst_onbeforeunload = "onbeforeunload",
    cst_onblur = "onblur",
    cst_oncanplay = "oncanplay",
    cst_oncanplaythrough = "oncanplaythrough",
    cst_onchange = "onchange",
    cst_onclose = "onclose",
    cst_ondurationchange = "ondurationchange",
    cst_onemptied = "onemptied",
    cst_onended = "onended",
    cst_onerror = "onerror",
    cst_onfocus = "onfocus",
    cst_onformchange = "onformchange",
    cst_onforminput = "onforminput",
    cst_onhashchange = "onhashchange",
    cst_oninput = "oninput",
    cst_oninvalid = "oninvalid",
    cst_onoffline = "onoffline",
    cst_ononline = "ononline",
    cst_onpause = "onpause",
    cst_onplay = "onplay",
    cst_onplaying = "onplaying",
    cst_onpagehide = "onpagehide",
    cst_onpageshow = "onpageshow",
    cst_onpopstate = "onpopstate",
    cst_onprogress = "onprogress",
    cst_onratechange = "onratechange",
    cst_onreadystatechange = "onreadystatechange",
    cst_onredo = "onredo",
    cst_onresize = "onresize",
    cst_onscroll = "onscroll",
    cst_onseeked = "onseeked",
    cst_onseeking = "onseeking",
    cst_onselect = "onselect",
    cst_onshow = "onshow",
    cst_onstalled = "onstalled",
    cst_onstorage = "onstorage",
    cst_onsubmit = "onsubmit",
    cst_onsuspend = "onsuspend",
    cst_ontimeupdate = "ontimeupdate",
    cst_onundo = "onundo",
    cst_onunload = "onunload",
    cst_onvolumechange = "onvolumechange",
    cst_onwaiting = "onwaiting",
    cst_onload = "onload",
    cst_onloadeddata = "onloadeddata",
    cst_onloadedmetadata = "onloadedmetadata",
    cst_onloadstart = "onloadstart",
    cst_onmessage = "onmessage",
    cst_onmousewheel = "onmousewheel",
    cst_onclick = "onclick",
    cst_oncontextmenu = "oncontextmenu",
    cst_ondblclick = "ondblclick",
    cst_ondrag = "ondrag",
    cst_ondragend = "ondragend",
    cst_ondragenter = "ondragenter",
    cst_ondragleave = "ondragleave",
    cst_ondragover = "ondragover",
    cst_ondragstart = "ondragstart",
    cst_ondrop = "ondrop",
    cst_onmousedown = "onmousedown",
    cst_onmouseup = "onmouseup",
    cst_onmouseover = "onmouseover",
    cst_onmousemove = "onmousemove",
    cst_onmouseout = "onmouseout",
    cst_ontouchstart = "ontouchstart",
    cst_ontouchend = "ontouchend",
    cst_ontouchmove = "ontouchmove",
    cst_ontouchcancel = "ontouchcancel",
    cst_onkeypress = "onkeypress",
    cst_onkeydown = "onkeydown",
    cst_onkeyup = "onkeyup",
    cst_version = "version",
    cst_xmlns = "xmlns",
    cst_manifest = cst_manifest$1,
    cst_cite = cst_cite$1,
    cst_xml_space = "xml:space",
    cst_accesskey = "accesskey",
    cst_charset = "charset",
    cst_accept_charset = "accept-charset",
    cst_accept = "accept",
    cst_hreflang = "hreflang",
    cst_download = "download",
    cst_tabindex = "tabindex",
    cst_type = cst_type$5,
    cst_alt = "alt",
    cst_height = "height",
    cst_width = "width",
    cst_for = cst_for$1,
    cst_for$0 = cst_for$1,
    cst_selected = cst_selected$1,
    cst_value = cst_value$3,
    cst_value$0 = cst_value$3,
    cst_value$1 = cst_value$3,
    cst_value$2 = cst_value$3,
    cst_action = "action",
    cst_method = "method",
    cst_formmethod = "formmethod",
    cst_enctype = "enctype",
    cst_checked = cst_checked$1,
    cst_disabled = cst_disabled$1,
    cst_readonly = cst_readonly$2,
    cst_maxlength = "maxlength",
    cst_minlength = "minlength",
    cst_name = "name",
    cst_allowfullscreen = "allowfullscreen",
    cst_allowpaymentrequest = "allowpaymentrequest",
    cst_referrerpolicy = "referrerpolicy",
    cst_autocomplete = "autocomplete",
    cst_async = cst_async$1,
    cst_autofocus = cst_autofocus$1,
    cst_autoplay = cst_autoplay$1,
    cst_muted = cst_muted$1,
    cst_crossorigin = "crossorigin",
    cst_integrity = "integrity",
    cst_mediagroup = "mediagroup",
    cst_challenge = "challenge",
    cst_contenteditable = "contenteditable",
    cst_contextmenu = "contextmenu",
    cst_controls = cst_controls$1,
    cst_dir = "dir",
    cst_draggable = "draggable",
    cst_form = cst_form$1,
    cst_formaction = "formaction",
    cst_formenctype = "formenctype",
    cst_formnovalidate = cst_formnovalidate$1,
    cst_formtarget = "formtarget",
    cst_hidden = cst_hidden$2,
    cst_high = "high",
    cst_icon = cst_icon$2,
    cst_ismap = cst_ismap$1,
    cst_keytype = "keytype",
    cst_list = "list",
    cst_loop = cst_loop$1,
    cst_low = "low",
    cst_max = cst_max$1,
    cst_max$0 = cst_max$1,
    cst_min = cst_min$1,
    cst_min$0 = cst_min$1,
    cst_inputmode = "inputmode",
    cst_novalidate = cst_novalidate$1,
    cst_open = cst_open$1,
    cst_optimum = "optimum",
    cst_pattern = "pattern",
    cst_placeholder = "placeholder",
    cst_poster = "poster",
    cst_preload = cst_preload$1,
    cst_pubdate = cst_pubdate$1,
    cst_radiogroup = "radiogroup",
    cst_required = cst_required$1,
    cst_reserved = cst_reserved$1,
    cst_sandbox = "sandbox",
    cst_spellcheck = "spellcheck",
    cst_scoped = cst_scoped$1,
    cst_seamless = cst_seamless$1,
    cst_sizes = cst_sizes$1,
    cst_span = cst_span$1,
    cst_xml_lang$0 = cst_xml_lang$1,
    cst_srcset = "srcset",
    cst_sizes$0 = cst_sizes$1,
    cst_start = "start",
    cst_step = "step",
    cst_translate = "translate",
    cst_wrap = "wrap",
    cst_size = "size",
    cst_type$0 = cst_type$5,
    cst_type$1 = cst_type$5,
    cst_type$2 = cst_type$5,
    cst_type$3 = cst_type$5,
    cst_type$4 = cst_type$5,
    cst_multiple = cst_multiple$1,
    cst_cols = cst_cols$1,
    cst_rows = cst_rows$1,
    cst_summary = cst_summary$1,
    cst_align = "align",
    cst_axis = "axis",
    cst_colspan = "colspan",
    cst_headers = "headers",
    cst_rowspan = "rowspan",
    cst_scope = "scope",
    cst_border = "border",
    cst_rules = "rules",
    cst_char = cst_char$1,
    cst_data$0 = "data",
    cst_codetype = "codetype",
    cst_frameborder = "frameborder",
    cst_marginheight = "marginheight",
    cst_marginwidth = "marginwidth",
    cst_scrolling = "scrolling",
    cst_target = "target",
    cst_content = "content",
    cst_http_equiv = "http-equiv",
    cst_media = "media",
    cst_role = "role",
    cst_aria = "aria-",
    cst_body = "body",
    cst_head = "head",
    cst_title$0 = cst_title$1,
    cst_html$0 = cst_html$1,
    cst_footer = "footer",
    cst_header = "header",
    cst_section = "section",
    cst_nav = "nav",
    cst_nbsp = "nbsp",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_hgroup = "hgroup",
    cst_address = "address",
    cst_blockquote = "blockquote",
    cst_dialog = "dialog",
    cst_div = "div",
    cst_p = "p",
    cst_pre = "pre",
    cst_abbr = "abbr",
    cst_br = cst_br$0,
    cst_cite$0 = cst_cite$1,
    cst_code = "code",
    cst_dfn = "dfn",
    cst_em = "em",
    cst_kbd = "kbd",
    cst_q = "q",
    cst_samp = "samp",
    cst_span$0 = cst_span$1,
    cst_strong = "strong",
    cst_time = cst_time$1,
    cst_var = "var",
    cst_a = "a",
    cst_dl = "dl",
    cst_ol = "ol",
    cst_ul = "ul",
    cst_dd = "dd",
    cst_dt = "dt",
    cst_li = "li",
    cst_hr = cst_hr$0,
    cst_b = "b",
    cst_i = "i",
    cst_u = "u",
    cst_small = "small",
    cst_sub = "sub",
    cst_sup = "sup",
    cst_mark = "mark",
    cst_rp = "rp",
    cst_rt = "rt",
    cst_ruby = "ruby",
    cst_wbr = cst_wbr$0,
    cst_bdo = "bdo",
    cst_datetime = cst_datetime$1,
    cst_shape = "shape",
    cst_coords = "coords",
    cst_usemap = "usemap",
    cst_defer = cst_defer$1,
    cst_label = cst_label$1,
    cst_area = cst_area$0,
    cst_map = "map",
    cst_del = "del",
    cst_ins = "ins",
    cst_script = "script",
    cst_noscript = "noscript",
    cst_template = "template",
    cst_article = "article",
    cst_aside = "aside",
    cst_main = "main",
    cst_audio = cst_audio$1,
    cst_video = "video",
    cst_canvas = "canvas",
    cst_command = cst_command$1,
    cst_menu = "menu",
    cst_embed = cst_embed$0,
    cst_source = cst_source$0,
    cst_meter = "meter",
    cst_output = "output",
    cst_form$0 = cst_form$1,
    cst_input = cst_input$0,
    cst_keygen = cst_keygen$0,
    cst_label$0 = cst_label$1,
    cst_option = "option",
    cst_select = "select",
    cst_textarea = "textarea",
    cst_button = cst_button$1,
    cst_datalist = "datalist",
    cst_progress = "progress",
    cst_legend = "legend",
    cst_details = "details",
    cst_summary$0 = cst_summary$1,
    cst_fieldset = "fieldset",
    cst_optgroup = "optgroup",
    cst_figcaption = "figcaption",
    cst_figure = "figure",
    cst_caption = "caption",
    cst_table = "table",
    cst_td = "td",
    cst_th = "th",
    cst_tr = "tr",
    cst_colgroup = cst_colgroup$1,
    cst_col = cst_col$1,
    cst_thead = "thead",
    cst_tbody = "tbody",
    cst_tfoot = "tfoot",
    cst_iframe = "iframe",
    cst_object = "object",
    cst_param = cst_param$0,
    cst_img = cst_img$0,
    cst_picture = "picture",
    cst_meta = cst_meta$0,
    cst_style$0 = cst_style$1,
    cst_link = cst_link$0,
    cst_base = cst_base$0,
    cst_allow_same_origin = "allow-same-origin",
    cst_allow_popups = "allow-popups",
    cst_allow_forms = "allow-forms",
    cst_allow_pointer_lock = "allow-pointer-lock",
    cst_allow_script = "allow-script",
    cst_allow_top_navigation = "allow-top-navigation",
    cst_external = cst_external$1,
    cst_canonical = "canonical",
    cst_prev = cst_prev$1,
    cst_next = cst_next$1,
    cst_last = cst_last$1,
    cst_icon$0 = cst_icon$2,
    cst_help = cst_help$1,
    cst_preconnect = "preconnect",
    cst_manifest$0 = cst_manifest$1,
    cst_noreferrer = cst_noreferrer$1,
    cst_author = cst_author$1,
    cst_license = cst_license$1,
    cst_search = cst_search$2,
    cst_noopener = "noopener",
    cst_first = cst_first$1,
    cst_bookmark = cst_bookmark$1,
    cst_preload$0 = cst_preload$1,
    cst_tag = cst_tag$1,
    cst_up = cst_up$1,
    cst_me = "me",
    cst_modulepreload = "modulepreload",
    cst_pingback = cst_pingback$1,
    cst_nofollow = cst_nofollow$1,
    cst_dns_prefetch = "dns-prefetch",
    cst_stylesheet = cst_stylesheet$1,
    cst_alternate = cst_alternate$1,
    cst_opener = "opener",
    cst_index = cst_index$1,
    cst_prerender = "prerender",
    cst_sidebar = cst_sidebar$1,
    cst_archives = cst_archives$1,
    cst_prefetch = cst_prefetch$1,
    cst_projection = "projection",
    cst_aural = "aural",
    cst_handheld = "handheld",
    cst_embossed = "embossed",
    cst_tty = "tty",
    cst_all = cst_all$1,
    cst_braille = "braille",
    cst_tv = "tv",
    cst_screen = "screen",
    cst_speech = "speech",
    cst_print = "print",
    cst_unsafe_url = "unsafe-url",
    cst_same_origin = "same-origin",
    cst_origin_when_cross_origin = "origin-when-cross-origin",
    cst_no_referrer_when_downgrade = "no-referrer-when-downgrade",
    cst_no_referrer = "no-referrer",
    cst_origin = "origin",
    cst_strict_origin = "strict-origin",
    cst_strict_origin_when_cross_o = "strict-origin-when-cross-origin",
    cst_external$0 = cst_external$1,
    cst_0 = "0",
    cst_formnovalidate$0 = cst_formnovalidate$1,
    cst_audio$0 = cst_audio$1,
    cst_text = cst_text$1,
    cst_async$0 = cst_async$1,
    cst_toolbar = "toolbar",
    cst_soft = "soft",
    cst_rows$0 = cst_rows$1,
    cst_rect = "rect",
    cst_prev$0 = cst_prev$1,
    cst_POST = "POST",
    cst_poly = "poly",
    cst_open$0 = cst_open$1,
    cst_decimal = "decimal",
    cst_none = "none",
    cst_next$0 = cst_next$1,
    cst_loop$0 = cst_loop$1,
    cst_left = "left",
    cst_last$0 = cst_last$1,
    cst_kana = "kana",
    cst_icon$1 = cst_icon$2,
    cst_help$0 = cst_help$1,
    cst_hard = "hard",
    cst_cols$0 = cst_cols$1,
    cst_char$0 = cst_char$1,
    cst_auto = "auto",
    cst_noreferrer$0 = cst_noreferrer$1,
    cst_author$0 = cst_author$1,
    cst_muted$0 = cst_muted$1,
    cst_autoplay$0 = cst_autoplay$1,
    cst_anonymous = "anonymous",
    cst_metadata = "metadata",
    cst_license$0 = cst_license$1,
    cst_search$0 = cst_search$2,
    cst_first$0 = cst_first$1,
    cst_novalidate$0 = cst_novalidate$1,
    cst_controls$0 = cst_controls$1,
    cst_bookmark$0 = cst_bookmark$1,
    cst_required$0 = cst_required$1,
    cst_selected$0 = cst_selected$1,
    cst_circle = "circle",
    cst_rowgroup = "rowgroup",
    cst_checkbox = cst_checkbox$1,
    cst_katakana = "katakana",
    cst_email = cst_email$1,
    cst_latin = "latin",
    cst_hidden$0 = cst_hidden$2,
    cst_yes = "yes",
    cst_url = cst_url$1,
    cst_tel = cst_tel$1,
    cst_tag$0 = cst_tag$1,
    cst_rtl = "rtl",
    cst_row = "row",
    cst_1 = "1",
    cst_ltr = "ltr",
    cst_GET = "GET",
    cst_col$0 = cst_col$1,
    cst_any = cst_any$2,
    cst_all$0 = cst_all$1,
    cst_up$0 = cst_up$1,
    cst_no = "no",
    cst_right = "right",
    cst_scoped$0 = cst_scoped$1,
    cst_numeric = "numeric",
    cst_pingback$0 = cst_pingback$1,
    cst_radio = cst_radio$1,
    cst_pubdate$0 = cst_pubdate$1,
    cst_multiple$0 = cst_multiple$1,
    cst_latin_name = "latin-name",
    cst_autofocus$0 = cst_autofocus$1,
    cst_nofollow$0 = cst_nofollow$1,
    cst_defer$0 = cst_defer$1,
    cst_full_width_latin = "full-width-latin",
    cst_default = "default",
    cst_context = "context",
    cst_verbatim = "verbatim",
    cst_checked$0 = cst_checked$1,
    cst_stylesheet$0 = cst_stylesheet$1,
    cst_reserved$0 = cst_reserved$1,
    cst_alternate$0 = cst_alternate$1,
    cst_http_www_w3_org_1999_xhtml = cst_http_www_w3_org_1999_xhtml$0,
    cst_disabled$0 = cst_disabled$1,
    cst_ismap$0 = cst_ismap$1,
    cst_use_credentials = "use-credentials",
    cst_index$0 = cst_index$1,
    cst_justify = "justify",
    cst_groups = "groups",
    cst_command$0 = cst_command$1,
    cst_sidebar$0 = cst_sidebar$1,
    cst_latin_prose = "latin-prose",
    cst_readonly$0 = cst_readonly$2,
    cst_colgroup$0 = cst_colgroup$1,
    cst_archives$0 = cst_archives$1,
    cst_seamless$0 = cst_seamless$1,
    cst_prefetch$0 = cst_prefetch$1,
    cst_preserve = "preserve",
    cst_week = "week",
    cst_time$0 = cst_time$1,
    cst_text$0 = cst_text$1,
    cst_file = "file",
    cst_date = "date",
    cst_datetime_local = "datetime-local",
    cst_password = "password",
    cst_month = "month",
    cst_search$1 = cst_search$2,
    cst_button$0 = cst_button$1,
    cst_checkbox$0 = cst_checkbox$1,
    cst_email$0 = cst_email$1,
    cst_hidden$1 = cst_hidden$2,
    cst_url$0 = cst_url$1,
    cst_tel$0 = cst_tel$1,
    cst_reset = "reset",
    cst_range = "range",
    cst_radio$0 = cst_radio$1,
    cst_readonly$1 = cst_readonly$2,
    cst_color = "color",
    cst_number = "number",
    cst_image = "image",
    cst_submit = "submit",
    cst_datetime$0 = cst_datetime$1,
    cst_module = "module",
    cst_application_javascript = "application/javascript",
    cst_on = cst_on$1,
    cst_off = cst_off$1,
    cst_any$0 = cst_any$2,
    _a_ = [0, [4, 0, 0, 0, [12, 120, [4, 0, 0, 0, 0]]], "%dx%d"],
    cst_any$1 = cst_any$2,
    _b_ = [0, [2, 0, [12, 32, [2, 0, [12, 119, 0]]]], "%s %sw"],
    _c_ = [0, [2, 0, [12, 32, [2, 0, [12, 120, 0]]]], "%s %sx"],
    cst_off$0 = cst_off$1,
    cst_on$0 = cst_on$1;
   function Make_with_wrapped_functions(Xml, C, Svg){
    var
     doctype = caml_call2(Xml_print[5], cst_html, 0),
     Info =
       [0,
        content_type,
        alternative_content_types,
        version,
        standard,
        namespace,
        doctype,
        emptytags],
     string_of_uri = Xml[2],
     uri_of_string = Xml[3];
    function to_xmlattribs(x){return x;}
    function to_attrib(x){return x;}
    var float_attrib = Xml[4], int_attrib = Xml[5], string_attrib = Xml[6];
    function uri_attrib(a, s){return caml_call2(Xml[13], a, s);}
    var space_sep_attrib = Xml[7], comma_sep_attrib = Xml[8];
    function user_attrib(f, name, v){
     var _dC_ = caml_call2(Xml[1][2], f, v);
     return caml_call2(Xml[6], name, _dC_);
    }
    var _A_ = C[3];
    function constant_attrib(a, param){
     return caml_call2(string_attrib, a, caml_call1(Xml[1][1], a));
    }
    function linktypes_attrib(name, x){return user_attrib(C[9], name, x);}
    function mediadesc_attrib(name, x){return user_attrib(C[10], name, x);}
    function srcset_attrib(name, x){return user_attrib(C[15], name, x);}
    var
     a_class = caml_call1(space_sep_attrib, cst_class),
     a_id = caml_call1(string_attrib, cst_id);
    function a_user_data(name){
     return caml_call1(string_attrib, caml_call2(Stdlib[28], cst_data, name));
    }
    var
     a_title = caml_call1(string_attrib, cst_title),
     a_xml_lang = caml_call1(string_attrib, cst_xml_lang),
     a_lang = caml_call1(string_attrib, cst_lang),
     a_style = caml_call1(string_attrib, cst_style),
     a_property = caml_call1(string_attrib, cst_property),
     a_onabort = caml_call1(Xml[9], cst_onabort),
     a_onafterprint = caml_call1(Xml[9], cst_onafterprint),
     a_onbeforeprint = caml_call1(Xml[9], cst_onbeforeprint),
     a_onbeforeunload = caml_call1(Xml[9], cst_onbeforeunload),
     a_onblur = caml_call1(Xml[9], cst_onblur),
     a_oncanplay = caml_call1(Xml[9], cst_oncanplay),
     a_oncanplaythrough = caml_call1(Xml[9], cst_oncanplaythrough),
     a_onchange = caml_call1(Xml[9], cst_onchange),
     a_onclose = caml_call1(Xml[9], cst_onclose),
     a_ondurationchange = caml_call1(Xml[9], cst_ondurationchange),
     a_onemptied = caml_call1(Xml[9], cst_onemptied),
     a_onended = caml_call1(Xml[9], cst_onended),
     a_onerror = caml_call1(Xml[9], cst_onerror),
     a_onfocus = caml_call1(Xml[9], cst_onfocus),
     a_onformchange = caml_call1(Xml[9], cst_onformchange),
     a_onforminput = caml_call1(Xml[9], cst_onforminput),
     a_onhashchange = caml_call1(Xml[9], cst_onhashchange),
     a_oninput = caml_call1(Xml[9], cst_oninput),
     a_oninvalid = caml_call1(Xml[9], cst_oninvalid),
     a_onoffline = caml_call1(Xml[9], cst_onoffline),
     a_ononline = caml_call1(Xml[9], cst_ononline),
     a_onpause = caml_call1(Xml[9], cst_onpause),
     a_onplay = caml_call1(Xml[9], cst_onplay),
     a_onplaying = caml_call1(Xml[9], cst_onplaying),
     a_onpagehide = caml_call1(Xml[9], cst_onpagehide),
     a_onpageshow = caml_call1(Xml[9], cst_onpageshow),
     a_onpopstate = caml_call1(Xml[9], cst_onpopstate),
     a_onprogress = caml_call1(Xml[9], cst_onprogress),
     a_onratechange = caml_call1(Xml[9], cst_onratechange),
     a_onreadystatechange = caml_call1(Xml[9], cst_onreadystatechange),
     a_onredo = caml_call1(Xml[9], cst_onredo),
     a_onresize = caml_call1(Xml[9], cst_onresize),
     a_onscroll = caml_call1(Xml[9], cst_onscroll),
     a_onseeked = caml_call1(Xml[9], cst_onseeked),
     a_onseeking = caml_call1(Xml[9], cst_onseeking),
     a_onselect = caml_call1(Xml[9], cst_onselect),
     a_onshow = caml_call1(Xml[9], cst_onshow),
     a_onstalled = caml_call1(Xml[9], cst_onstalled),
     a_onstorage = caml_call1(Xml[9], cst_onstorage),
     a_onsubmit = caml_call1(Xml[9], cst_onsubmit),
     a_onsuspend = caml_call1(Xml[9], cst_onsuspend),
     a_ontimeupdate = caml_call1(Xml[9], cst_ontimeupdate),
     a_onundo = caml_call1(Xml[9], cst_onundo),
     a_onunload = caml_call1(Xml[9], cst_onunload),
     a_onvolumechange = caml_call1(Xml[9], cst_onvolumechange),
     a_onwaiting = caml_call1(Xml[9], cst_onwaiting),
     a_onload = caml_call1(Xml[9], cst_onload),
     a_onloadeddata = caml_call1(Xml[9], cst_onloadeddata),
     a_onloadedmetadata = caml_call1(Xml[9], cst_onloadedmetadata),
     a_onloadstart = caml_call1(Xml[9], cst_onloadstart),
     a_onmessage = caml_call1(Xml[9], cst_onmessage),
     a_onmousewheel = caml_call1(Xml[9], cst_onmousewheel),
     a_onclick = caml_call1(Xml[10], cst_onclick),
     a_oncontextmenu = caml_call1(Xml[10], cst_oncontextmenu),
     a_ondblclick = caml_call1(Xml[10], cst_ondblclick),
     a_ondrag = caml_call1(Xml[10], cst_ondrag),
     a_ondragend = caml_call1(Xml[10], cst_ondragend),
     a_ondragenter = caml_call1(Xml[10], cst_ondragenter),
     a_ondragleave = caml_call1(Xml[10], cst_ondragleave),
     a_ondragover = caml_call1(Xml[10], cst_ondragover),
     a_ondragstart = caml_call1(Xml[10], cst_ondragstart),
     a_ondrop = caml_call1(Xml[10], cst_ondrop),
     a_onmousedown = caml_call1(Xml[10], cst_onmousedown),
     a_onmouseup = caml_call1(Xml[10], cst_onmouseup),
     a_onmouseover = caml_call1(Xml[10], cst_onmouseover),
     a_onmousemove = caml_call1(Xml[10], cst_onmousemove),
     a_onmouseout = caml_call1(Xml[10], cst_onmouseout),
     a_ontouchstart = caml_call1(Xml[12], cst_ontouchstart),
     a_ontouchend = caml_call1(Xml[12], cst_ontouchend),
     a_ontouchmove = caml_call1(Xml[12], cst_ontouchmove),
     a_ontouchcancel = caml_call1(Xml[12], cst_ontouchcancel),
     a_onkeypress = caml_call1(Xml[11], cst_onkeypress),
     a_onkeydown = caml_call1(Xml[11], cst_onkeydown),
     a_onkeyup = caml_call1(Xml[11], cst_onkeyup),
     a_version = caml_call1(string_attrib, cst_version);
    function a_xmlns(x){return user_attrib(C[2], cst_xmlns, x);}
    function a_manifest(_dB_){return uri_attrib(cst_manifest, _dB_);}
    function a_cite(_dA_){return uri_attrib(cst_cite, _dA_);}
    function a_xml_space(x){return user_attrib(C[2], cst_xml_space, x);}
    function a_accesskey(c){return user_attrib(C[5], cst_accesskey, c);}
    var
     a_charset = caml_call1(string_attrib, cst_charset),
     a_accept_charset = caml_call1(space_sep_attrib, cst_accept_charset),
     a_accept = caml_call1(comma_sep_attrib, cst_accept);
    function a_href(_dz_){return uri_attrib(cst_href, _dz_);}
    var a_hreflang = caml_call1(string_attrib, cst_hreflang);
    function a_download(file){return user_attrib(C[18], cst_download, file);}
    function a_rel(_dy_){return linktypes_attrib(cst_rel, _dy_);}
    var
     a_tabindex = caml_call1(int_attrib, cst_tabindex),
     a_mime_type = caml_call1(string_attrib, cst_type),
     a_alt = caml_call1(string_attrib, cst_alt);
    function a_height(p){return caml_call2(int_attrib, cst_height, p);}
    function a_src(_dx_){return uri_attrib(cst_src, _dx_);}
    function a_width(p){return caml_call2(int_attrib, cst_width, p);}
    var
     a_label_for = caml_call1(string_attrib, cst_for),
     a_output_for = caml_call1(space_sep_attrib, cst_for$0);
    function a_selected(_dw_){return constant_attrib(cst_selected, _dw_);}
    var
     a_text_value = caml_call1(string_attrib, cst_value),
     a_int_value = caml_call1(int_attrib, cst_value$0),
     a_value = caml_call1(string_attrib, cst_value$1),
     a_float_value = caml_call1(float_attrib, cst_value$2);
    function a_action(_dv_){return uri_attrib(cst_action, _dv_);}
    function a_method(x){return user_attrib(C[2], cst_method, x);}
    function a_formmethod(x){return user_attrib(C[2], cst_formmethod, x);}
    var a_enctype = caml_call1(string_attrib, cst_enctype);
    function a_checked(_du_){return constant_attrib(cst_checked, _du_);}
    function a_disabled(_dt_){return constant_attrib(cst_disabled, _dt_);}
    function a_readonly(_ds_){return constant_attrib(cst_readonly, _ds_);}
    var
     a_maxlength = caml_call1(int_attrib, cst_maxlength),
     a_minlength = caml_call1(int_attrib, cst_minlength),
     a_name = caml_call1(string_attrib, cst_name);
    function a_allowfullscreen(_dr_){
     return constant_attrib(cst_allowfullscreen, _dr_);
    }
    function a_allowpaymentrequest(_dq_){
     return constant_attrib(cst_allowpaymentrequest, _dq_);
    }
    function a_referrerpolicy(x){
     return user_attrib(C[11], cst_referrerpolicy, x);
    }
    function a_autocomplete(x){
     return user_attrib(C[16], cst_autocomplete, x);
    }
    function a_async(_dp_){return constant_attrib(cst_async, _dp_);}
    function a_autofocus(_do_){return constant_attrib(cst_autofocus, _do_);}
    function a_autoplay(_dn_){return constant_attrib(cst_autoplay, _dn_);}
    function a_muted(_dm_){return constant_attrib(cst_muted, _dm_);}
    function a_crossorigin(x){return user_attrib(C[2], cst_crossorigin, x);}
    var
     a_integrity = caml_call1(string_attrib, cst_integrity),
     a_mediagroup = caml_call1(string_attrib, cst_mediagroup),
     a_challenge = caml_call1(string_attrib, cst_challenge);
    function a_contenteditable(ce){
     return user_attrib(_A_, cst_contenteditable, ce);
    }
    var a_contextmenu = caml_call1(string_attrib, cst_contextmenu);
    function a_controls(_dl_){return constant_attrib(cst_controls, _dl_);}
    function a_dir(x){return user_attrib(C[2], cst_dir, x);}
    function a_draggable(d){return user_attrib(_A_, cst_draggable, d);}
    var a_form = caml_call1(string_attrib, cst_form);
    function a_formaction(_dk_){return uri_attrib(cst_formaction, _dk_);}
    var a_formenctype = caml_call1(string_attrib, cst_formenctype);
    function a_formnovalidate(_dj_){
     return constant_attrib(cst_formnovalidate, _dj_);
    }
    var a_formtarget = caml_call1(string_attrib, cst_formtarget);
    function a_hidden(_di_){return constant_attrib(cst_hidden, _di_);}
    var a_high = caml_call1(float_attrib, cst_high);
    function a_icon(_dh_){return uri_attrib(cst_icon, _dh_);}
    function a_ismap(_dg_){return constant_attrib(cst_ismap, _dg_);}
    var
     a_keytype = caml_call1(string_attrib, cst_keytype),
     a_list = caml_call1(string_attrib, cst_list);
    function a_loop(_df_){return constant_attrib(cst_loop, _df_);}
    var
     a_low = caml_call1(float_attrib, cst_low),
     a_max = caml_call1(float_attrib, cst_max),
     _B_ = C[8];
    function a_input_max(_de_){return user_attrib(_B_, cst_max$0, _de_);}
    var a_min = caml_call1(float_attrib, cst_min), _C_ = C[8];
    function a_input_min(_dd_){return user_attrib(_C_, cst_min$0, _dd_);}
    function a_inputmode(x){return user_attrib(C[2], cst_inputmode, x);}
    function a_novalidate(_dc_){return constant_attrib(cst_novalidate, _dc_);}
    function a_open(_db_){return constant_attrib(cst_open, _db_);}
    var
     a_optimum = caml_call1(float_attrib, cst_optimum),
     a_pattern = caml_call1(string_attrib, cst_pattern),
     a_placeholder = caml_call1(string_attrib, cst_placeholder);
    function a_poster(_da_){return uri_attrib(cst_poster, _da_);}
    function a_preload(x){return user_attrib(C[2], cst_preload, x);}
    function a_pubdate(_c$_){return constant_attrib(cst_pubdate, _c$_);}
    var a_radiogroup = caml_call1(string_attrib, cst_radiogroup);
    function a_required(_c__){return constant_attrib(cst_required, _c__);}
    function a_reversed(_c9_){return constant_attrib(cst_reserved, _c9_);}
    function a_sandbox(x){return user_attrib(C[13], cst_sandbox, x);}
    function a_spellcheck(sc){return user_attrib(_A_, cst_spellcheck, sc);}
    function a_scoped(_c8_){return constant_attrib(cst_scoped, _c8_);}
    function a_seamless(_c7_){return constant_attrib(cst_seamless, _c7_);}
    function a_sizes(sizes){return user_attrib(C[14], cst_sizes, sizes);}
    var
     a_span = caml_call1(int_attrib, cst_span),
     a_srclang = caml_call1(string_attrib, cst_xml_lang$0);
    function a_srcset(_c6_){return srcset_attrib(cst_srcset, _c6_);}
    var
     a_img_sizes = caml_call1(comma_sep_attrib, cst_sizes$0),
     a_start = caml_call1(int_attrib, cst_start);
    function a_step(step){return user_attrib(C[17], cst_step, step);}
    function a_translate(x){return user_attrib(C[2], cst_translate, x);}
    function a_wrap(x){return user_attrib(C[2], cst_wrap, x);}
    var a_size = caml_call1(int_attrib, cst_size);
    function a_input_type(it){return user_attrib(C[6], cst_type$0, it);}
    function a_menu_type(x){return user_attrib(C[2], cst_type$1, x);}
    function a_command_type(x){return user_attrib(C[2], cst_type$2, x);}
    function a_button_type(bt){return user_attrib(C[6], cst_type$3, bt);}
    function a_script_type(sc){return user_attrib(C[7], cst_type$4, sc);}
    function a_multiple(_c5_){return constant_attrib(cst_multiple, _c5_);}
    var
     a_cols = caml_call1(int_attrib, cst_cols),
     a_rows = caml_call1(int_attrib, cst_rows),
     a_summary = caml_call1(string_attrib, cst_summary);
    function a_align(x){return user_attrib(C[2], cst_align, x);}
    var
     a_axis = caml_call1(string_attrib, cst_axis),
     a_colspan = caml_call1(int_attrib, cst_colspan),
     a_headers = caml_call1(space_sep_attrib, cst_headers),
     a_rowspan = caml_call1(int_attrib, cst_rowspan);
    function a_scope(x){return user_attrib(C[2], cst_scope, x);}
    var a_border = caml_call1(int_attrib, cst_border);
    function a_rules(x){return user_attrib(C[2], cst_rules, x);}
    function a_char(c){return user_attrib(C[5], cst_char, c);}
    function a_data(_c4_){return uri_attrib(cst_data$0, _c4_);}
    var a_codetype = caml_call1(string_attrib, cst_codetype);
    function a_frameborder(x){return user_attrib(C[2], cst_frameborder, x);}
    var
     a_marginheight = caml_call1(int_attrib, cst_marginheight),
     a_marginwidth = caml_call1(int_attrib, cst_marginwidth);
    function a_scrolling(x){return user_attrib(C[2], cst_scrolling, x);}
    var
     a_target = caml_call1(string_attrib, cst_target),
     a_content = caml_call1(string_attrib, cst_content),
     a_http_equiv = caml_call1(string_attrib, cst_http_equiv);
    function a_media(_c3_){return mediadesc_attrib(cst_media, _c3_);}
    var a_role = caml_call1(space_sep_attrib, cst_role);
    function a_aria(name){
     return caml_call1
             (space_sep_attrib, caml_call2(Stdlib[28], cst_aria, name));
    }
    function terminal(tag, a, param){return caml_call2(Xml[20], a, tag);}
    function unary(tag, a, elt){
     var _c2_ = caml_call1(Xml[1][4], elt);
     return caml_call3(Xml[21], a, tag, _c2_);
    }
    function star(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function plus(tag, a, elt, elts){
     var _c1_ = caml_call2(Xml[1][5], elt, elts);
     return caml_call3(Xml[21], a, tag, _c1_);
    }
    function option_cons(opt, elts){
     if(! opt) return elts;
     var x = opt[1];
     return caml_call2(Xml[1][5], x, elts);
    }
    function body(_cZ_, _c0_){return star(cst_body, _cZ_, _c0_);}
    function head(_cW_, _cX_, _cY_){return plus(cst_head, _cW_, _cX_, _cY_);}
    function title(_cU_, _cV_){return unary(cst_title$0, _cU_, _cV_);}
    function html(a, head, body){
     var
      _cT_ = caml_call1(Xml[1][4], body),
      content = caml_call2(Xml[1][5], head, _cT_);
     return caml_call3(Xml[21], a, cst_html$0, content);
    }
    function footer(_cR_, _cS_){return star(cst_footer, _cR_, _cS_);}
    function header(_cP_, _cQ_){return star(cst_header, _cP_, _cQ_);}
    function section(_cN_, _cO_){return star(cst_section, _cN_, _cO_);}
    function nav(_cL_, _cM_){return star(cst_nav, _cL_, _cM_);}
    function txt(s){return caml_call1(Xml[17], s);}
    var entity = Xml[19];
    function space(param){return caml_call1(entity, cst_nbsp);}
    var cdata = Xml[22], cdata_script = Xml[23], cdata_style = Xml[24];
    function h1(_cJ_, _cK_){return star(cst_h1, _cJ_, _cK_);}
    function h2(_cH_, _cI_){return star(cst_h2, _cH_, _cI_);}
    function h3(_cF_, _cG_){return star(cst_h3, _cF_, _cG_);}
    function h4(_cD_, _cE_){return star(cst_h4, _cD_, _cE_);}
    function h5(_cB_, _cC_){return star(cst_h5, _cB_, _cC_);}
    function h6(_cz_, _cA_){return star(cst_h6, _cz_, _cA_);}
    function hgroup(_cx_, _cy_){return star(cst_hgroup, _cx_, _cy_);}
    function address(_cv_, _cw_){return star(cst_address, _cv_, _cw_);}
    function blockquote(_ct_, _cu_){return star(cst_blockquote, _ct_, _cu_);}
    function dialog(_cr_, _cs_){return star(cst_dialog, _cr_, _cs_);}
    function div(_cp_, _cq_){return star(cst_div, _cp_, _cq_);}
    function p(_cn_, _co_){return star(cst_p, _cn_, _co_);}
    function pre(_cl_, _cm_){return star(cst_pre, _cl_, _cm_);}
    function abbr(_cj_, _ck_){return star(cst_abbr, _cj_, _ck_);}
    function br(_ch_, _ci_){return terminal(cst_br, _ch_, _ci_);}
    function cite(_cf_, _cg_){return star(cst_cite$0, _cf_, _cg_);}
    function code(_cd_, _ce_){return star(cst_code, _cd_, _ce_);}
    function dfn(_cb_, _cc_){return star(cst_dfn, _cb_, _cc_);}
    function em(_b$_, _ca_){return star(cst_em, _b$_, _ca_);}
    function kbd(_b9_, _b__){return star(cst_kbd, _b9_, _b__);}
    function q(_b7_, _b8_){return star(cst_q, _b7_, _b8_);}
    function samp(_b5_, _b6_){return star(cst_samp, _b5_, _b6_);}
    function span(_b3_, _b4_){return star(cst_span$0, _b3_, _b4_);}
    function strong(_b1_, _b2_){return star(cst_strong, _b1_, _b2_);}
    function time(_bZ_, _b0_){return star(cst_time, _bZ_, _b0_);}
    function var$0(_bX_, _bY_){return star(cst_var, _bX_, _bY_);}
    function a(_bV_, _bW_){return star(cst_a, _bV_, _bW_);}
    function dl(_bT_, _bU_){return star(cst_dl, _bT_, _bU_);}
    function ol(_bR_, _bS_){return star(cst_ol, _bR_, _bS_);}
    function ul(_bP_, _bQ_){return star(cst_ul, _bP_, _bQ_);}
    function dd(_bN_, _bO_){return star(cst_dd, _bN_, _bO_);}
    function dt(_bL_, _bM_){return star(cst_dt, _bL_, _bM_);}
    function li(_bJ_, _bK_){return star(cst_li, _bJ_, _bK_);}
    function hr(_bH_, _bI_){return terminal(cst_hr, _bH_, _bI_);}
    function b(_bF_, _bG_){return star(cst_b, _bF_, _bG_);}
    function i(_bD_, _bE_){return star(cst_i, _bD_, _bE_);}
    function u(_bB_, _bC_){return star(cst_u, _bB_, _bC_);}
    function small(_bz_, _bA_){return star(cst_small, _bz_, _bA_);}
    function sub(_bx_, _by_){return star(cst_sub, _bx_, _by_);}
    function sup(_bv_, _bw_){return star(cst_sup, _bv_, _bw_);}
    function mark(_bt_, _bu_){return star(cst_mark, _bt_, _bu_);}
    function rp(_br_, _bs_){return star(cst_rp, _br_, _bs_);}
    function rt(_bp_, _bq_){return star(cst_rt, _bp_, _bq_);}
    function ruby(_bn_, _bo_){return star(cst_ruby, _bn_, _bo_);}
    function wbr(_bl_, _bm_){return terminal(cst_wbr, _bl_, _bm_);}
    function bdo(dir, opt, elts){
     var a = opt ? opt[1] : 0, _bk_ = [0, [0, a_dir(dir), a]];
     return caml_call3(Xml[21], _bk_, cst_bdo, elts);
    }
    var a_datetime = caml_call1(string_attrib, cst_datetime);
    function a_shape(x){return user_attrib(C[2], cst_shape, x);}
    function a_coords(coords){return user_attrib(C[12], cst_coords, coords);}
    var a_usemap = caml_call1(string_attrib, cst_usemap);
    function a_defer(_bj_){return constant_attrib(cst_defer, _bj_);}
    var a_label = caml_call1(string_attrib, cst_label);
    function area(alt, opt, param){
     var a = opt ? opt[1] : 0, _bi_ = [0, [0, caml_call1(a_alt, alt), a]];
     return caml_call2(Xml[20], _bi_, cst_area);
    }
    function map(_bg_, _bh_){return star(cst_map, _bg_, _bh_);}
    function del(_be_, _bf_){return star(cst_del, _be_, _bf_);}
    function ins(_bc_, _bd_){return star(cst_ins, _bc_, _bd_);}
    function script(_ba_, _bb_){return unary(cst_script, _ba_, _bb_);}
    function noscript(_a__, _a$_){return star(cst_noscript, _a__, _a$_);}
    function template(_a8_, _a9_){return star(cst_template, _a8_, _a9_);}
    function article(_a6_, _a7_){return star(cst_article, _a6_, _a7_);}
    function aside(_a4_, _a5_){return star(cst_aside, _a4_, _a5_);}
    function main(_a2_, _a3_){return star(cst_main, _a2_, _a3_);}
    function video_audio(name, src, srcs, opt, elts){
     var a = opt ? opt[1] : 0;
     if(src)
      var uri = src[1], a$0 = [0, uri_attrib(cst_src, uri), a];
     else
      var a$0 = a;
     if(! srcs) return caml_call3(Xml[21], [0, a$0], name, elts);
     var srcs$0 = srcs[1], _a1_ = caml_call2(Xml[1][6], srcs$0, elts);
     return caml_call3(Xml[21], [0, a$0], name, _a1_);
    }
    function audio(_aX_, _aY_, _aZ_, _a0_){
     return video_audio(cst_audio, _aX_, _aY_, _aZ_, _a0_);
    }
    function video(_aT_, _aU_, _aV_, _aW_){
     return video_audio(cst_video, _aT_, _aU_, _aV_, _aW_);
    }
    function canvas(_aR_, _aS_){return star(cst_canvas, _aR_, _aS_);}
    function command(label, opt, param){
     var a = opt ? opt[1] : 0, _aQ_ = [0, [0, caml_call1(a_label, label), a]];
     return caml_call2(Xml[20], _aQ_, cst_command);
    }
    function menu(children, a, param){
     if(children)
      var l = children[1][2], children$0 = l;
     else
      var children$0 = caml_call1(Xml[1][3], 0);
     return caml_call3(Xml[21], a, cst_menu, children$0);
    }
    function embed(_aO_, _aP_){return terminal(cst_embed, _aO_, _aP_);}
    function source(_aM_, _aN_){return terminal(cst_source, _aM_, _aN_);}
    function meter(_aK_, _aL_){return star(cst_meter, _aK_, _aL_);}
    function output_elt(_aI_, _aJ_){return star(cst_output, _aI_, _aJ_);}
    function form(_aG_, _aH_){return star(cst_form$0, _aG_, _aH_);}
    function svg(opt, children){
     var a = opt ? opt[1] : 0, _aF_ = caml_call2(Svg[243], [0, a], children);
     return caml_call1(Svg[326], _aF_);
    }
    function input(_aD_, _aE_){return terminal(cst_input, _aD_, _aE_);}
    function keygen(_aB_, _aC_){return terminal(cst_keygen, _aB_, _aC_);}
    function label(_az_, _aA_){return star(cst_label$0, _az_, _aA_);}
    function option(_ax_, _ay_){return unary(cst_option, _ax_, _ay_);}
    function select(_av_, _aw_){return star(cst_select, _av_, _aw_);}
    function textarea(_at_, _au_){return unary(cst_textarea, _at_, _au_);}
    function button(_ar_, _as_){return star(cst_button, _ar_, _as_);}
    function datalist(children, a, param){
     if(children)
      var x = children[1][2], children$0 = x;
     else
      var children$0 = caml_call1(Xml[1][3], 0);
     return caml_call3(Xml[21], a, cst_datalist, children$0);
    }
    function progress(_ap_, _aq_){return star(cst_progress, _ap_, _aq_);}
    function legend(_an_, _ao_){return star(cst_legend, _an_, _ao_);}
    function details(summary, a, children){
     return plus(cst_details, a, summary, children);
    }
    function summary(_al_, _am_){return star(cst_summary$0, _al_, _am_);}
    function fieldset(legend, a, elts){
     var _ak_ = option_cons(legend, elts);
     return caml_call3(Xml[21], a, cst_fieldset, _ak_);
    }
    function optgroup(label, opt, elts){
     var a = opt ? opt[1] : 0, _aj_ = [0, [0, caml_call1(a_label, label), a]];
     return caml_call3(Xml[21], _aj_, cst_optgroup, elts);
    }
    function figcaption(_ah_, _ai_){return star(cst_figcaption, _ah_, _ai_);}
    function figure(figcaption, a, elts){
     if(figcaption){
      var match = figcaption[1];
      if(437082891 <= match[1])
       var
        c = match[2],
        _af_ = caml_call1(Xml[1][4], c),
        _ag_ = caml_call2(Xml[1][6], elts, _af_);
      else
       var c$0 = match[2], _ag_ = caml_call2(Xml[1][5], c$0, elts);
      var content = _ag_;
     }
     else
      var content = elts;
     return caml_call3(Xml[21], a, cst_figure, content);
    }
    function caption(_ad_, _ae_){return star(cst_caption, _ad_, _ae_);}
    function tablex(caption, columns, thead, tfoot, a, elts){
     var content = option_cons(thead, option_cons(tfoot, elts));
     if(columns)
      var
       columns$0 = columns[1],
       content$0 = caml_call2(Xml[1][6], columns$0, content);
     else
      var content$0 = content;
     var content$1 = option_cons(caption, content$0);
     return caml_call3(Xml[21], a, cst_table, content$1);
    }
    function td(_ab_, _ac_){return star(cst_td, _ab_, _ac_);}
    function th(_$_, _aa_){return star(cst_th, _$_, _aa_);}
    function tr(_Z_, ___){return star(cst_tr, _Z_, ___);}
    function colgroup(_X_, _Y_){return star(cst_colgroup, _X_, _Y_);}
    function col(_V_, _W_){return terminal(cst_col, _V_, _W_);}
    function thead(_T_, _U_){return star(cst_thead, _T_, _U_);}
    function tbody(_R_, _S_){return star(cst_tbody, _R_, _S_);}
    function tfoot(_P_, _Q_){return star(cst_tfoot, _P_, _Q_);}
    function iframe(_N_, _O_){return star(cst_iframe, _N_, _O_);}
    function object(params, opt, elts){
     var a = opt ? opt[1] : 0;
     if(params)
      var e = params[1], elts$0 = caml_call2(Xml[1][6], e, elts);
     else
      var elts$0 = elts;
     return caml_call3(Xml[21], [0, a], cst_object, elts$0);
    }
    function img(src, alt, opt, param){
     var
      a = opt ? opt[1] : 0,
      _M_ = [0, caml_call1(a_alt, alt), a],
      a$0 = [0, uri_attrib(cst_src, src), _M_];
     return caml_call2(Xml[20], [0, a$0], cst_img);
    }
    function picture(img, a, elts){
     var
      _L_ = caml_call1(Xml[1][3], 0),
      tail_node = caml_call2(Xml[1][5], img, _L_),
      content = caml_call2(Xml[1][6], elts, tail_node);
     return caml_call3(Xml[21], a, cst_picture, content);
    }
    function meta(_J_, _K_){return terminal(cst_meta, _J_, _K_);}
    function style(opt, elts){
     var a = opt ? opt[1] : 0;
     return caml_call3(Xml[21], [0, a], cst_style$0, elts);
    }
    function link(rel, href, opt, param){
     var
      a = opt ? opt[1] : 0,
      _H_ = [0, uri_attrib(cst_href, href), a],
      _I_ = [0, [0, linktypes_attrib(cst_rel, rel), _H_]];
     return caml_call2(Xml[20], _I_, cst_link);
    }
    function base(_F_, _G_){return terminal(cst_base, _F_, _G_);}
    function tot(x){return x;}
    function totl(x){return x;}
    function toelt(x){return x;}
    function toeltl(x){return x;}
    function doc_toelt(x){return x;}
    var I = caml_call1(Xml_stream[2], Xml);
    function of_seq(s){var x = caml_call1(I[1], s); return x;}
    function data(s){return caml_call1(Xml[18], s);}
    function leaf(tag, a, param){return caml_call2(Xml[20], a, tag);}
    function node(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function coerce_elt(x){return x;}
    var
     float_attrib$0 = Xml[4],
     int_attrib$0 = Xml[5],
     string_attrib$0 = Xml[6];
    function uri_attrib$0(a, s){return caml_call2(Xml[13], a, s);}
    var
     space_sep_attrib$0 = Xml[7],
     comma_sep_attrib$0 = Xml[8],
     Unsafe =
       [0,
        data,
        leaf,
        node,
        coerce_elt,
        float_attrib$0,
        int_attrib$0,
        string_attrib$0,
        uri_attrib$0,
        space_sep_attrib$0,
        comma_sep_attrib$0];
    return [0,
            Xml,
            Info,
            string_of_uri,
            uri_of_string,
            to_xmlattribs,
            to_attrib,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            a_class,
            a_id,
            a_user_data,
            a_title,
            a_xml_lang,
            a_lang,
            a_style,
            a_property,
            a_onabort,
            a_onafterprint,
            a_onbeforeprint,
            a_onbeforeunload,
            a_onblur,
            a_oncanplay,
            a_oncanplaythrough,
            a_onchange,
            a_onclose,
            a_ondurationchange,
            a_onemptied,
            a_onended,
            a_onerror,
            a_onfocus,
            a_onformchange,
            a_onforminput,
            a_onhashchange,
            a_oninput,
            a_oninvalid,
            a_onoffline,
            a_ononline,
            a_onpause,
            a_onplay,
            a_onplaying,
            a_onpagehide,
            a_onpageshow,
            a_onpopstate,
            a_onprogress,
            a_onratechange,
            a_onreadystatechange,
            a_onredo,
            a_onresize,
            a_onscroll,
            a_onseeked,
            a_onseeking,
            a_onselect,
            a_onshow,
            a_onstalled,
            a_onstorage,
            a_onsubmit,
            a_onsuspend,
            a_ontimeupdate,
            a_onundo,
            a_onunload,
            a_onvolumechange,
            a_onwaiting,
            a_onload,
            a_onloadeddata,
            a_onloadedmetadata,
            a_onloadstart,
            a_onmessage,
            a_onmousewheel,
            a_onclick,
            a_oncontextmenu,
            a_ondblclick,
            a_ondrag,
            a_ondragend,
            a_ondragenter,
            a_ondragleave,
            a_ondragover,
            a_ondragstart,
            a_ondrop,
            a_onmousedown,
            a_onmouseup,
            a_onmouseover,
            a_onmousemove,
            a_onmouseout,
            a_ontouchstart,
            a_ontouchend,
            a_ontouchmove,
            a_ontouchcancel,
            a_onkeypress,
            a_onkeydown,
            a_onkeyup,
            a_version,
            a_xmlns,
            a_manifest,
            a_cite,
            a_xml_space,
            a_accesskey,
            a_charset,
            a_accept_charset,
            a_accept,
            a_href,
            a_hreflang,
            a_download,
            a_rel,
            a_tabindex,
            a_mime_type,
            a_alt,
            a_height,
            a_src,
            a_width,
            a_label_for,
            a_label_for,
            a_output_for,
            a_output_for,
            a_selected,
            a_text_value,
            a_int_value,
            a_value,
            a_float_value,
            a_action,
            a_method,
            a_formmethod,
            a_enctype,
            a_checked,
            a_disabled,
            a_readonly,
            a_maxlength,
            a_minlength,
            a_name,
            a_allowfullscreen,
            a_allowpaymentrequest,
            a_referrerpolicy,
            a_autocomplete,
            a_async,
            a_autofocus,
            a_autoplay,
            a_muted,
            a_crossorigin,
            a_integrity,
            a_mediagroup,
            a_challenge,
            a_contenteditable,
            a_contextmenu,
            a_controls,
            a_dir,
            a_draggable,
            a_form,
            a_formaction,
            a_formenctype,
            a_formnovalidate,
            a_formtarget,
            a_hidden,
            a_high,
            a_icon,
            a_ismap,
            a_keytype,
            a_list,
            a_loop,
            a_low,
            a_max,
            a_input_max,
            a_min,
            a_input_min,
            a_inputmode,
            a_novalidate,
            a_open,
            a_optimum,
            a_pattern,
            a_placeholder,
            a_poster,
            a_preload,
            a_pubdate,
            a_radiogroup,
            a_required,
            a_reversed,
            a_sandbox,
            a_spellcheck,
            a_scoped,
            a_seamless,
            a_sizes,
            a_span,
            a_srclang,
            a_srcset,
            a_img_sizes,
            a_start,
            a_step,
            a_translate,
            a_wrap,
            a_size,
            a_input_type,
            a_menu_type,
            a_command_type,
            a_button_type,
            a_script_type,
            a_multiple,
            a_cols,
            a_rows,
            a_summary,
            a_align,
            a_axis,
            a_colspan,
            a_headers,
            a_rowspan,
            a_scope,
            a_border,
            a_rules,
            a_char,
            a_data,
            a_codetype,
            a_frameborder,
            a_marginheight,
            a_marginwidth,
            a_scrolling,
            a_target,
            a_content,
            a_http_equiv,
            a_media,
            a_role,
            a_aria,
            ,
            ,
            ,
            ,
            ,
            body,
            head,
            title,
            html,
            footer,
            header,
            section,
            nav,
            txt,
            txt,
            entity,
            space,
            cdata,
            cdata_script,
            cdata_style,
            h1,
            h2,
            h3,
            h4,
            h5,
            h6,
            hgroup,
            address,
            blockquote,
            dialog,
            div,
            p,
            pre,
            abbr,
            br,
            cite,
            code,
            dfn,
            em,
            kbd,
            q,
            samp,
            span,
            strong,
            time,
            var$0,
            a,
            dl,
            ol,
            ul,
            dd,
            dt,
            li,
            hr,
            b,
            i,
            u,
            small,
            sub,
            sup,
            mark,
            rp,
            rt,
            ruby,
            wbr,
            bdo,
            a_datetime,
            a_shape,
            a_coords,
            a_usemap,
            a_defer,
            a_label,
            area,
            map,
            del,
            ins,
            script,
            noscript,
            template,
            article,
            aside,
            main,
            ,
            audio,
            video,
            canvas,
            command,
            menu,
            embed,
            source,
            meter,
            output_elt,
            form,
            svg,
            input,
            keygen,
            label,
            option,
            select,
            textarea,
            button,
            datalist,
            progress,
            legend,
            details,
            summary,
            fieldset,
            optgroup,
            figcaption,
            figure,
            caption,
            tablex,
            tablex,
            td,
            th,
            tr,
            colgroup,
            col,
            thead,
            tbody,
            tfoot,
            iframe,
            object,
            function(_D_, _E_){return terminal(cst_param, _D_, _E_);},
            img,
            picture,
            meta,
            style,
            link,
            base,
            tot,
            totl,
            toelt,
            toeltl,
            doc_toelt,
            ,
            of_seq,
            Unsafe];
   }
   function Wrapped_functions(Xml){
    function string_of_sandbox_token(param){
     return -177579325 <= param
             ? 642066717
               <= param
               ? 961985737 <= param ? cst_allow_same_origin : cst_allow_popups
               : -141440231
                 <= param
                 ? cst_allow_forms
                 : cst_allow_pointer_lock
             : -237921695
               <= param
               ? cst_allow_script
               : cst_allow_top_navigation;
    }
    function string_of_linktype(param){
     if(typeof param === "number")
      return 212027606 <= param
              ? 757955143
                <= param
                ? 870035731
                  <= param
                  ? 1021867988
                    <= param
                    ? 1026883179 <= param ? cst_external : cst_canonical
                    : 892857107 <= param ? cst_prev : cst_next
                  : 814486425
                    <= param
                    ? 847656566 <= param ? cst_last : cst_icon$0
                    : 803495649 <= param ? cst_help : cst_preconnect
                : 395967329
                  <= param
                  ? 693914176
                    <= param
                    ? 702265295 <= param ? cst_manifest$0 : cst_noreferrer
                    : 672161451 <= param ? cst_author : cst_license
                  : 381789656
                    <= param
                    ? 395056008 <= param ? cst_search : cst_noopener
                    : 332064784 <= param ? cst_first : cst_bookmark
              : -367306259
                <= param
                ? 17272
                  <= param
                  ? 4198970
                    <= param
                    ? 43282345 <= param ? cst_preload$0 : cst_tag
                    : 19067 <= param ? cst_up : cst_me
                  : -123098695
                    <= param
                    ? -103575427 <= param ? cst_modulepreload : cst_pingback
                    : -289155950 <= param ? cst_nofollow : cst_dns_prefetch
                : -784200974
                  <= param
                  ? -687429350
                    <= param
                    ? -543567890 <= param ? cst_stylesheet : cst_alternate
                    : -701966633 <= param ? cst_opener : cst_index
                  : -837966724
                    <= param
                    ? -787945575 <= param ? cst_prerender : cst_sidebar
                    : -954191215 <= param ? cst_archives : cst_prefetch;
     var s = param[2];
     return s;
    }
    function string_of_mediadesc_token(param){
     if(typeof param === "number")
      return 3256577 <= param
              ? 67844052
                <= param
                ? 985170249
                  <= param
                  ? 993823919 <= param ? cst_projection : cst_aural
                  : 741408196 <= param ? cst_handheld : cst_embossed
                : 4203225 <= param ? cst_tty : cst_all
              : -321929715
                === param
                ? cst_braille
                : -68046964
                  <= param
                  ? 18850 <= param ? cst_tv : cst_screen
                  : -275811774 <= param ? cst_speech : cst_print;
     var s = param[2];
     return s;
    }
    function string_of_referrerpolicy(param){
     return 128179133 <= param
             ? 516162486
               === param
               ? cst_unsafe_url
               : 880519217
                 <= param
                 ? 1065162943
                   <= param
                   ? cst_same_origin
                   : cst_origin_when_cross_origin
                 : 808133042
                   <= param
                   ? cst_no_referrer_when_downgrade
                   : cst_no_referrer
             : -6975994
               <= param
               ? 50834029 <= param ? cst : cst_origin
               : -512964804
                 <= param
                 ? cst_strict_origin
                 : cst_strict_origin_when_cross_o;
    }
    function string_of_big_variant(param){
     if(typeof param === "number")
      return 4448519 <= param
              ? 748545107
                <= param
                ? 892709484
                  <= param
                  ? 936387931
                    <= param
                    ? 984475830
                      <= param
                      ? 1003109192
                        <= param
                        ? 1026883179 <= param ? cst_external$0 : cst_0
                        : 995986491 <= param ? cst_formnovalidate$0 : cst_audio$0
                      : 936573133
                        === param
                        ? cst_text
                        : 963342108 <= param ? cst_async$0 : cst_toolbar
                    : 892857107
                      <= param
                      ? 914891065
                        <= param
                        ? 925976842 <= param ? cst_soft : cst_rows$0
                        : 914389316 <= param ? cst_rect : cst_prev$0
                      : 892711040 <= param ? cst_POST : cst_poly
                  : 847852583
                    <= param
                    ? 870035731
                      <= param
                      ? 874830961
                        <= param
                        ? 881668074 <= param ? cst_open$0 : cst_decimal
                        : 870530776 <= param ? cst_none : cst_next$0
                      : 848351876 <= param ? cst_loop$0 : cst_left
                    : 803495649
                      <= param
                      ? 836565865
                        <= param
                        ? 847656566 <= param ? cst_last$0 : cst_kana
                        : 814486425 <= param ? cst_icon$1 : cst_help$0
                      : 803298059 <= param ? cst_hard : cst_cols$0
                : 306241015
                  <= param
                  ? 475573507
                    <= param
                    ? 672161451
                      <= param
                      ? 726666127
                        <= param
                        ? 748194550 <= param ? cst_char$0 : cst_auto
                        : 693914176 <= param ? cst_noreferrer$0 : cst_author$0
                      : 596180811 <= param ? cst_muted$0 : cst_autoplay$0
                    : 395056008
                      <= param
                      ? 432776079
                        <= param
                        ? 434500685 <= param ? cst_anonymous : cst_metadata
                        : 395967329 <= param ? cst_license$0 : cst_search$0
                      : 332064784 <= param ? cst_first$0 : cst_novalidate$0
                  : 140750597
                    <= param
                    ? 186574459
                      <= param
                      ? 212027606
                        <= param
                        ? 292438678 <= param ? cst_controls$0 : cst_bookmark$0
                        : 202657151 <= param ? cst_required$0 : cst_selected$0
                      : 178382384 <= param ? cst_circle : cst_rowgroup
                    : 48900580
                      <= param
                      ? 95509868
                        <= param
                        ? 111644259 <= param ? cst_checkbox : cst_katakana
                        : 50085628 <= param ? cst_email : cst_latin
                      : 19559306 <= param ? cst_hidden$0 : cst_yes
              : -363872942
                <= param
                ? 19067
                  <= param
                  ? 3953222
                    <= param
                    ? 4103754
                      <= param
                      ? 4199867
                        <= param
                        ? 4252495 <= param ? cst_url : cst_tel
                        : 4198970 <= param ? cst_tag$0 : cst_rtl
                      : 4102650 <= param ? cst_row : cst_1
                    : 3257036
                      <= param
                      ? 3553398
                        <= param
                        ? 3805386 <= param ? cst_ltr : cst_GET
                        : 3356704 <= param ? cst_col$0 : cst_any
                      : 3256577 <= param ? cst_all$0 : cst_up$0
                  : -146439973
                    <= param
                    ? -116258131
                      <= param
                      ? -57574468
                        <= param
                        ? 17505 <= param ? cst_no : cst_right
                        : -100768656 <= param ? cst_scoped$0 : cst_numeric
                      : -123098695 <= param ? cst_pingback$0 : cst_radio
                    : -247853591
                      <= param
                      ? -197222864
                        <= param
                        ? -165772469 <= param ? cst_pubdate$0 : cst_multiple$0
                        : -200275514 <= param ? cst_latin_name : cst_autofocus$0
                      : -289155950 <= param ? cst_nofollow$0 : cst_defer$0
                : -773209244
                  <= param
                  ? -543567890
                    <= param
                    ? -514572330
                      <= param
                      ? -384499551
                        <= param
                        ? -369291781 <= param ? cst_full_width_latin : cst_default
                        : -423051825 <= param ? cst_context : cst_verbatim
                      : -529147129 <= param ? cst_checked$0 : cst_stylesheet$0
                    : -709493348
                      <= param
                      ? -687429350
                        <= param
                        ? -613973726 <= param ? cst_reserved$0 : cst_alternate$0
                        : -707104822
                          <= param
                          ? cst_http_www_w3_org_1999_xhtml
                          : cst_disabled$0
                      : -728306478 <= param ? cst_ismap$0 : cst_use_credentials
                  : -872161756
                    <= param
                    ? -826369749
                      <= param
                      ? -788068560
                        <= param
                        ? -784200974 <= param ? cst_index$0 : cst_justify
                        : -792946572 <= param ? cst_groups : cst_command$0
                      : -837966724 <= param ? cst_sidebar$0 : cst_latin_prose
                    : -967956361
                      <= param
                      ? -931002593
                        <= param
                        ? -883155966 <= param ? cst_readonly$0 : cst_colgroup$0
                        : -954191215 <= param ? cst_archives$0 : cst_seamless$0
                      : -1000861353 <= param ? cst_prefetch$0 : cst_preserve;
     var s = param[2];
     return s;
    }
    function string_of_input_type(param){
     return 50085628 <= param
             ? 612668487
               <= param
               ? 781515420
                 <= param
                 ? 936769581
                   <= param
                   ? 969837588 <= param ? cst_week : cst_time$0
                   : 936573133 <= param ? cst_text$0 : cst_file
                 : 758940238 <= param ? cst_date : cst_datetime_local
               : 242538002
                 <= param
                 ? 529348384
                   <= param
                   ? 578936635 <= param ? cst_password : cst_month
                   : 395056008 <= param ? cst_search$1 : cst_button$0
                 : 111644259 <= param ? cst_checkbox$0 : cst_email$0
             : -146439973
               <= param
               ? -101336657
                 <= param
                 ? 4252495
                   <= param
                   ? 19559306 <= param ? cst_hidden$1 : cst_url$0
                   : 4199867 <= param ? cst_tel$0 : cst_reset
                 : -145943139 <= param ? cst_range : cst_radio$0
               : -795439301
                 <= param
                 ? -578166461
                   <= param
                   ? -528289822 <= param ? cst_readonly$1 : cst_color
                   : -703661335 <= param ? cst_number : cst_image
                 : -828715976 <= param ? cst_submit : cst_datetime$0;
    }
    function string_of_script_type(param){
     if(typeof param === "number")
      return -177755956 <= param ? cst_module : cst_application_javascript;
     var s = param[2];
     return s;
    }
    function string_of_number_or_datetime(param){
     if(-703661335 <= param[1]){
      var n = param[2];
      return caml_call1(Stdlib[33], n);
     }
     var t = param[2];
     return t;
    }
    var
     string_of_character = caml_call1(Stdlib_String[1], 1),
     string_of_number = Stdlib[33],
     string_of_bool = Stdlib[30];
    function onoff_of_bool(param){return param ? cst_on : cst_off;}
    function unoption_string(param){
     if(! param) return cst$0;
     var x = param[1];
     return x;
    }
    function string_of_step(param){
     if(! param) return cst_any$0;
     var x = param[1];
     return caml_call1(Xml_print[6], x);
    }
    function string_of_sizes(param){
     if(! param) return cst_any$1;
     var
      l = param[1],
      _z_ =
        caml_call2
         (Stdlib_List[20],
          function(param){
           var y = param[2], x = param[1];
           return caml_call3(Stdlib_Printf[4], _a_, x, y);
          },
          l);
     return caml_call2(Stdlib_String[7], cst$1, _z_);
    }
    function string_of_sandbox(l){
     var _y_ = caml_call2(Stdlib_List[20], string_of_sandbox_token, l);
     return caml_call2(Stdlib_String[7], cst$2, _y_);
    }
    function string_of_numbers(l){
     var _x_ = caml_call2(Stdlib_List[20], string_of_number, l);
     return caml_call2(Stdlib_String[7], cst$3, _x_);
    }
    function string_of_mediadesc(l){
     var _w_ = caml_call2(Stdlib_List[20], string_of_mediadesc_token, l);
     return caml_call2(Stdlib_String[7], cst$4, _w_);
    }
    function string_of_linktypes(l){
     var _v_ = caml_call2(Stdlib_List[20], string_of_linktype, l);
     return caml_call2(Stdlib_String[7], cst$5, _v_);
    }
    function string_of_srcset(l){
     function f(param){
      var _q_ = param[1];
      if(-738802218 === _q_){
       var
        match = param[2],
        v = match[2],
        url = match[1],
        _r_ = caml_call1(string_of_number, v),
        _s_ = caml_call1(Xml[2], url);
       return caml_call3(Stdlib_Printf[4], _b_, _s_, _r_);
      }
      if(4252495 <= _q_){
       var url$0 = param[2];
       return caml_call1(Xml[2], url$0);
      }
      var
       match$0 = param[2],
       v$0 = match$0[2],
       url$1 = match$0[1],
       _t_ = caml_call1(Xml_print[6], v$0),
       _u_ = caml_call1(Xml[2], url$1);
      return caml_call3(Stdlib_Printf[4], _c_, _u_, _t_);
     }
     var _p_ = caml_call2(Stdlib_List[20], f, l);
     return caml_call2(Stdlib_String[7], cst$6, _p_);
    }
    function string_of_autocomplete(l){
     if(typeof l === "number"){
      if(3951439 <= l) return cst_off$0;
     }
     else{
      var strs = l[2];
      if(strs) return caml_call2(Stdlib_String[7], cst$7, strs);
     }
     return cst_on$0;
    }
    return [0,
            Xml,
            ,
            ,
            ,
            string_of_referrerpolicy,
            string_of_big_variant,
            string_of_input_type,
            string_of_script_type,
            string_of_number_or_datetime,
            string_of_character,
            ,
            string_of_bool,
            onoff_of_bool,
            unoption_string,
            string_of_step,
            string_of_sizes,
            string_of_sandbox,
            string_of_numbers,
            string_of_mediadesc,
            string_of_linktypes,
            string_of_srcset,
            string_of_autocomplete];
   }
   var
    Html_f =
      [0,
       function(_m_, _l_){
        var
         _k_ = Wrapped_functions(_m_),
         _o_ =
           Make_with_wrapped_functions
            (_m_,
             [0,
              _k_[1],
              _k_[6],
              _k_[12],
              _k_[13],
              _k_[10],
              _k_[7],
              _k_[8],
              _k_[9],
              _k_[20],
              _k_[19],
              _k_[5],
              _k_[18],
              _k_[17],
              _k_[16],
              _k_[21],
              _k_[22],
              _k_[15],
              _k_[14]],
             _l_),
         _n_ = _o_[366];
        return [0,
                _o_[1],
                _o_[2],
                _o_[3],
                _o_[4],
                _o_[19],
                _o_[21],
                _o_[20],
                _o_[22],
                _o_[23],
                _o_[24],
                _o_[27],
                _o_[28],
                _o_[29],
                _o_[30],
                _o_[31],
                _o_[32],
                _o_[33],
                _o_[34],
                _o_[35],
                _o_[36],
                _o_[37],
                _o_[38],
                _o_[39],
                _o_[40],
                _o_[41],
                _o_[42],
                _o_[43],
                _o_[44],
                _o_[45],
                _o_[78],
                _o_[46],
                _o_[47],
                _o_[48],
                _o_[49],
                _o_[50],
                _o_[51],
                _o_[52],
                _o_[53],
                _o_[54],
                _o_[55],
                _o_[56],
                _o_[57],
                _o_[58],
                _o_[59],
                _o_[60],
                _o_[61],
                _o_[62],
                _o_[63],
                _o_[64],
                _o_[65],
                _o_[66],
                _o_[67],
                _o_[68],
                _o_[69],
                _o_[70],
                _o_[71],
                _o_[72],
                _o_[73],
                _o_[74],
                _o_[75],
                _o_[76],
                _o_[77],
                _o_[79],
                _o_[80],
                _o_[81],
                _o_[82],
                _o_[83],
                _o_[84],
                _o_[85],
                _o_[86],
                _o_[87],
                _o_[88],
                _o_[89],
                _o_[90],
                _o_[91],
                _o_[92],
                _o_[93],
                _o_[94],
                _o_[95],
                _o_[96],
                _o_[97],
                _o_[98],
                _o_[99],
                _o_[100],
                _o_[139],
                _o_[140],
                _o_[142],
                _o_[143],
                _o_[144],
                _o_[145],
                _o_[146],
                _o_[147],
                _o_[148],
                _o_[149],
                _o_[150],
                _o_[151],
                _o_[152],
                _o_[153],
                _o_[154],
                _o_[155],
                _o_[156],
                _o_[157],
                _o_[158],
                _o_[159],
                _o_[160],
                _o_[161],
                _o_[162],
                _o_[163],
                _o_[164],
                _o_[165],
                _o_[166],
                _o_[167],
                _o_[168],
                _o_[169],
                _o_[170],
                _o_[171],
                _o_[172],
                _o_[173],
                _o_[174],
                _o_[175],
                _o_[176],
                _o_[177],
                _o_[178],
                _o_[179],
                _o_[180],
                _o_[181],
                _o_[182],
                _o_[141],
                _o_[183],
                _o_[184],
                _o_[185],
                _o_[186],
                _o_[187],
                _o_[188],
                _o_[189],
                _o_[190],
                _o_[191],
                _o_[192],
                _o_[193],
                _o_[194],
                _o_[195],
                _o_[196],
                _o_[197],
                _o_[101],
                _o_[102],
                _o_[103],
                _o_[104],
                _o_[105],
                _o_[106],
                _o_[107],
                _o_[108],
                _o_[109],
                _o_[110],
                _o_[111],
                _o_[112],
                _o_[113],
                _o_[114],
                _o_[115],
                _o_[295],
                _o_[129],
                _o_[133],
                _o_[205],
                _o_[132],
                _o_[120],
                _o_[121],
                _o_[122],
                _o_[123],
                _o_[136],
                _o_[137],
                _o_[130],
                _o_[131],
                _o_[204],
                _o_[138],
                _o_[206],
                _o_[124],
                _o_[198],
                _o_[118],
                _o_[199],
                _o_[125],
                _o_[126],
                _o_[127],
                _o_[128],
                _o_[134],
                _o_[135],
                _o_[202],
                _o_[203],
                _o_[201],
                _o_[200],
                _o_[300],
                _o_[208],
                _o_[209],
                _o_[210],
                _o_[211],
                _o_[212],
                _o_[213],
                _o_[207],
                _o_[214],
                _o_[215],
                _o_[216],
                _o_[116],
                _o_[117],
                _o_[119],
                _o_[296],
                _o_[297],
                _o_[298],
                _o_[217],
                _o_[218],
                _o_[219],
                _o_[220],
                _o_[221],
                _o_[222],
                _o_[223],
                _o_[224],
                _o_[225],
                _o_[299],
                _o_[226],
                _o_[25],
                _o_[26],
                _o_[227],
                _o_[228],
                _o_[242],
                _o_[237],
                _o_[235],
                _o_[358],
                _o_[236],
                _o_[234],
                _o_[322],
                _o_[238],
                _o_[239],
                _o_[240],
                _o_[241],
                _o_[249],
                _o_[250],
                _o_[251],
                _o_[252],
                _o_[253],
                _o_[254],
                _o_[255],
                _o_[256],
                _o_[308],
                _o_[309],
                _o_[310],
                _o_[260],
                _o_[261],
                _o_[257],
                _o_[258],
                _o_[259],
                _o_[276],
                _o_[277],
                _o_[278],
                _o_[279],
                _o_[280],
                _o_[281],
                _o_[337],
                _o_[338],
                _o_[282],
                _o_[283],
                _o_[284],
                _o_[285],
                _o_[286],
                _o_[287],
                _o_[288],
                _o_[289],
                _o_[293],
                _o_[294],
                _o_[262],
                _o_[263],
                _o_[264],
                _o_[265],
                _o_[266],
                _o_[267],
                _o_[268],
                _o_[269],
                _o_[270],
                _o_[271],
                _o_[272],
                _o_[273],
                _o_[274],
                _o_[275],
                _o_[303],
                _o_[304],
                _o_[353],
                _o_[354],
                _o_[350],
                _o_[351],
                _o_[352],
                _o_[317],
                _o_[312],
                _o_[313],
                _o_[314],
                _o_[318],
                _o_[301],
                _o_[302],
                _o_[339],
                _o_[341],
                _o_[340],
                _o_[345],
                _o_[346],
                _o_[347],
                _o_[348],
                _o_[349],
                _o_[342],
                _o_[343],
                _o_[344],
                _o_[321],
                _o_[335],
                _o_[332],
                _o_[325],
                _o_[323],
                _o_[329],
                _o_[327],
                _o_[330],
                _o_[336],
                _o_[326],
                _o_[328],
                _o_[324],
                _o_[331],
                _o_[319],
                _o_[320],
                _o_[244],
                _o_[245],
                _o_[246],
                _o_[247],
                _o_[248],
                _o_[333],
                _o_[334],
                _o_[315],
                _o_[316],
                _o_[305],
                _o_[306],
                _o_[307],
                _o_[355],
                _o_[356],
                _o_[357],
                _o_[291],
                _o_[290],
                _o_[292],
                _o_[243],
                _o_[365],
                _o_[359],
                _o_[360],
                _o_[361],
                _o_[362],
                _o_[363],
                _o_[5],
                _o_[6],
                [0,
                 _n_[1],
                 _n_[3],
                 _n_[2],
                 _n_[4],
                 _n_[7],
                 _n_[5],
                 _n_[6],
                 _n_[8],
                 _n_[9],
                 _n_[10]]];
       },
       function(_i_){
        var _j_ = Wrapped_functions(_i_);
        return [0,
                _j_[1],
                _j_[6],
                _j_[12],
                _j_[13],
                _j_[10],
                _j_[7],
                _j_[8],
                _j_[9],
                _j_[20],
                _j_[19],
                _j_[5],
                _j_[18],
                _j_[17],
                _j_[16],
                _j_[21],
                _j_[22],
                _j_[15],
                _j_[14]];
       },
       function(_f_, _e_, _d_){
        var _g_ = Make_with_wrapped_functions(_f_, _e_, _d_), _h_ = _g_[366];
        return [0,
                _g_[1],
                _g_[2],
                _g_[3],
                _g_[4],
                _g_[19],
                _g_[21],
                _g_[20],
                _g_[22],
                _g_[23],
                _g_[24],
                _g_[27],
                _g_[28],
                _g_[29],
                _g_[30],
                _g_[31],
                _g_[32],
                _g_[33],
                _g_[34],
                _g_[35],
                _g_[36],
                _g_[37],
                _g_[38],
                _g_[39],
                _g_[40],
                _g_[41],
                _g_[42],
                _g_[43],
                _g_[44],
                _g_[45],
                _g_[78],
                _g_[46],
                _g_[47],
                _g_[48],
                _g_[49],
                _g_[50],
                _g_[51],
                _g_[52],
                _g_[53],
                _g_[54],
                _g_[55],
                _g_[56],
                _g_[57],
                _g_[58],
                _g_[59],
                _g_[60],
                _g_[61],
                _g_[62],
                _g_[63],
                _g_[64],
                _g_[65],
                _g_[66],
                _g_[67],
                _g_[68],
                _g_[69],
                _g_[70],
                _g_[71],
                _g_[72],
                _g_[73],
                _g_[74],
                _g_[75],
                _g_[76],
                _g_[77],
                _g_[79],
                _g_[80],
                _g_[81],
                _g_[82],
                _g_[83],
                _g_[84],
                _g_[85],
                _g_[86],
                _g_[87],
                _g_[88],
                _g_[89],
                _g_[90],
                _g_[91],
                _g_[92],
                _g_[93],
                _g_[94],
                _g_[95],
                _g_[96],
                _g_[97],
                _g_[98],
                _g_[99],
                _g_[100],
                _g_[139],
                _g_[140],
                _g_[142],
                _g_[143],
                _g_[144],
                _g_[145],
                _g_[146],
                _g_[147],
                _g_[148],
                _g_[149],
                _g_[150],
                _g_[151],
                _g_[152],
                _g_[153],
                _g_[154],
                _g_[155],
                _g_[156],
                _g_[157],
                _g_[158],
                _g_[159],
                _g_[160],
                _g_[161],
                _g_[162],
                _g_[163],
                _g_[164],
                _g_[165],
                _g_[166],
                _g_[167],
                _g_[168],
                _g_[169],
                _g_[170],
                _g_[171],
                _g_[172],
                _g_[173],
                _g_[174],
                _g_[175],
                _g_[176],
                _g_[177],
                _g_[178],
                _g_[179],
                _g_[180],
                _g_[181],
                _g_[182],
                _g_[141],
                _g_[183],
                _g_[184],
                _g_[185],
                _g_[186],
                _g_[187],
                _g_[188],
                _g_[189],
                _g_[190],
                _g_[191],
                _g_[192],
                _g_[193],
                _g_[194],
                _g_[195],
                _g_[196],
                _g_[197],
                _g_[101],
                _g_[102],
                _g_[103],
                _g_[104],
                _g_[105],
                _g_[106],
                _g_[107],
                _g_[108],
                _g_[109],
                _g_[110],
                _g_[111],
                _g_[112],
                _g_[113],
                _g_[114],
                _g_[115],
                _g_[295],
                _g_[129],
                _g_[133],
                _g_[205],
                _g_[132],
                _g_[120],
                _g_[121],
                _g_[122],
                _g_[123],
                _g_[136],
                _g_[137],
                _g_[130],
                _g_[131],
                _g_[204],
                _g_[138],
                _g_[206],
                _g_[124],
                _g_[198],
                _g_[118],
                _g_[199],
                _g_[125],
                _g_[126],
                _g_[127],
                _g_[128],
                _g_[134],
                _g_[135],
                _g_[202],
                _g_[203],
                _g_[201],
                _g_[200],
                _g_[300],
                _g_[208],
                _g_[209],
                _g_[210],
                _g_[211],
                _g_[212],
                _g_[213],
                _g_[207],
                _g_[214],
                _g_[215],
                _g_[216],
                _g_[116],
                _g_[117],
                _g_[119],
                _g_[296],
                _g_[297],
                _g_[298],
                _g_[217],
                _g_[218],
                _g_[219],
                _g_[220],
                _g_[221],
                _g_[222],
                _g_[223],
                _g_[224],
                _g_[225],
                _g_[299],
                _g_[226],
                _g_[25],
                _g_[26],
                _g_[227],
                _g_[228],
                _g_[242],
                _g_[237],
                _g_[235],
                _g_[358],
                _g_[236],
                _g_[234],
                _g_[322],
                _g_[238],
                _g_[239],
                _g_[240],
                _g_[241],
                _g_[249],
                _g_[250],
                _g_[251],
                _g_[252],
                _g_[253],
                _g_[254],
                _g_[255],
                _g_[256],
                _g_[308],
                _g_[309],
                _g_[310],
                _g_[260],
                _g_[261],
                _g_[257],
                _g_[258],
                _g_[259],
                _g_[276],
                _g_[277],
                _g_[278],
                _g_[279],
                _g_[280],
                _g_[281],
                _g_[337],
                _g_[338],
                _g_[282],
                _g_[283],
                _g_[284],
                _g_[285],
                _g_[286],
                _g_[287],
                _g_[288],
                _g_[289],
                _g_[293],
                _g_[294],
                _g_[262],
                _g_[263],
                _g_[264],
                _g_[265],
                _g_[266],
                _g_[267],
                _g_[268],
                _g_[269],
                _g_[270],
                _g_[271],
                _g_[272],
                _g_[273],
                _g_[274],
                _g_[275],
                _g_[303],
                _g_[304],
                _g_[353],
                _g_[354],
                _g_[350],
                _g_[351],
                _g_[352],
                _g_[317],
                _g_[312],
                _g_[313],
                _g_[314],
                _g_[318],
                _g_[301],
                _g_[302],
                _g_[339],
                _g_[341],
                _g_[340],
                _g_[345],
                _g_[346],
                _g_[347],
                _g_[348],
                _g_[349],
                _g_[342],
                _g_[343],
                _g_[344],
                _g_[321],
                _g_[335],
                _g_[332],
                _g_[325],
                _g_[323],
                _g_[329],
                _g_[327],
                _g_[330],
                _g_[336],
                _g_[326],
                _g_[328],
                _g_[324],
                _g_[331],
                _g_[319],
                _g_[320],
                _g_[244],
                _g_[245],
                _g_[246],
                _g_[247],
                _g_[248],
                _g_[333],
                _g_[334],
                _g_[315],
                _g_[316],
                _g_[305],
                _g_[306],
                _g_[307],
                _g_[355],
                _g_[356],
                _g_[357],
                _g_[291],
                _g_[290],
                _g_[292],
                _g_[243],
                _g_[365],
                _g_[359],
                _g_[360],
                _g_[361],
                _g_[362],
                _g_[363],
                _g_[5],
                _g_[6],
                [0,
                 _h_[1],
                 _h_[3],
                 _h_[2],
                 _h_[4],
                 _h_[7],
                 _h_[5],
                 _h_[6],
                 _h_[8],
                 _h_[9],
                 _h_[10]]];
       }];
   runtime.caml_register_global(535, Html_f, "Html_f");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
