// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Sexplib0__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Sexplib0 = [0],
    Sexplib0$0 = [0, Sexplib0];
   runtime.caml_register_global(0, Sexplib0$0, "Sexplib0__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp
//# unitInfo: Requires: Stdlib__Buffer, Stdlib__Bytes, Stdlib__BytesLabels, Stdlib__Char, Stdlib__Format, Stdlib__ListLabels, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "(",
    cst$12 = "()",
    cst$13 = ")",
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$11,
    cst$3 = cst$12,
    cst$4 = cst$13,
    cst$5 = " ",
    cst$6 = cst$11,
    cst$7 = cst$12,
    cst$8 = cst$13,
    cst$10 = cst$12,
    cst$9 = cst$12,
    cst = "\\",
    cst$0 = ' "',
    cst$1 = '"',
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function sexp_of_t(t){return t;}
   function t_of_sexp(t){return t;}
   function compare(a$0, b$0){
    if(a$0 === b$0) return 0;
    if(0 === a$0[0]){
     var a$1 = a$0[1];
     if(0 !== b$0[0]) return -1;
     var b$1 = b$0[1];
     return caml_call2(Stdlib_StringLabels[10], a$1, b$1);
    }
    var a$2 = a$0[1];
    if(0 === b$0[0]) return 1;
    var b$2 = b$0[1], a = a$2, b = b$2;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var ys = b[2], y = b[1], xs = a[2], x = a[1], res = compare(x, y);
     if(0 !== res) return res;
     a = xs;
     b = ys;
    }
   }
   function equal(a, b){
    var _D_ = a === b ? 1 : 0;
    if(_D_)
     var _E_ = _D_;
    else{
     if(0 === a[0]){
      var a$0 = a[1];
      if(0 === b[0]){
       var b$0 = b[1];
       return caml_call2(Stdlib_StringLabels[9], a$0, b$0);
      }
     }
     else{
      var a$1 = a[1];
      if(0 !== b[0]){
       var b$1 = b[1];
       return caml_call3(Stdlib_ListLabels[16], equal, a$1, b$1);
      }
     }
     var _E_ = 0;
    }
    return _E_;
   }
   var
    Not_found_s = [248, "Sexplib0__Sexp.Not_found_s", caml_fresh_oo_id(0)],
    Of_sexp_error = [248, "Sexplib0__Sexp.Of_sexp_error", caml_fresh_oo_id(0)],
    default_indent = [0, 1],
    cst_n = "\\n",
    _a_ = [0, 0, 0],
    _b_ = [0, [15, [17, 2, 0]], "%a@?"];
   function must_escape(str){
    var len = caml_ml_string_length(str), _t_ = 0 === len ? 1 : 0;
    if(_t_) return _t_;
    var ix$1 = len - 1 | 0, ix = ix$1;
    for(;;){
     var match = caml_string_get(str, ix);
     a:
     {
      b:
      {
       if(92 <= match){
        var switcher = match - 93 | 0;
        if(33 < switcher >>> 0){if(0 <= switcher) break a; break b;}
        if(31 === switcher){
         var _u_ = 0 < ix ? 1 : 0;
         if(_u_){
          var
           next = ix - 1 | 0,
           _v_ = caml_string_get(str, next),
           _w_ = caml_call2(Stdlib_Char[6], _v_, 35);
          if(! _w_){ix = next; continue;}
          var _x_ = _w_;
         }
         else
          var _x_ = _u_;
         return _x_;
        }
       }
       else
        if(42 <= match){
         if(59 === match) break b;
        }
        else{
         if(33 > match) break a;
         switch(match - 33 | 0){
           case 2:
            var _z_ = 0 < ix ? 1 : 0;
            if(_z_){
             var
              next$0 = ix - 1 | 0,
              _A_ = caml_string_get(str, next$0),
              _B_ = caml_call2(Stdlib_Char[6], _A_, 124);
             if(! _B_){ix = next$0; continue;}
             var _C_ = _B_;
            }
            else
             var _C_ = _z_;
            return _C_;
           case 1:
           case 7:
           case 8:
            break b;
         }
        }
       var _y_ = 0 < ix ? 1 : 0;
       if(! _y_) return _y_;
       var ix$0 = ix - 1 | 0;
       ix = ix$0;
       continue;
      }
      return 1;
     }
     return 1;
    }
   }
   function escaped(s){
    var n = [0, 0], _j_ = caml_ml_string_length(s) - 1 | 0, _i_ = 0;
    if(_j_ >= 0){
     var i$0 = _i_;
     for(;;){
      var match = caml_string_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _q_ = match - 34 | 0;
          if(58 < _q_ >>> 0){
           if(93 <= _q_) break c;
          }
          else if(56 < _q_ - 1 >>> 0) break b;
          var _r_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _r_ = 4;
        break a;
       }
       var _r_ = 2;
      }
      n[1] = n[1] + _r_ | 0;
      var _s_ = i$0 + 1 | 0;
      if(_j_ === i$0) break;
      i$0 = _s_;
     }
    }
    if(n[1] === caml_ml_string_length(s)) return s;
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _l_ = caml_ml_string_length(s) - 1 | 0, _k_ = 0;
    if(_l_ >= 0){
     var i = _k_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        var _n_ = caml_call1(Stdlib_Char[1], 48 + (c / 100 | 0) | 0);
        caml_bytes_unsafe_set(s$0, n[1], _n_);
        n[1]++;
        var
         _o_ = caml_call1(Stdlib_Char[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        caml_bytes_unsafe_set(s$0, n[1], _o_);
        n[1]++;
        var _p_ = caml_call1(Stdlib_Char[1], 48 + (c % 10 | 0) | 0);
        caml_bytes_unsafe_set(s$0, n[1], _p_);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _m_ = i + 1 | 0;
      if(_l_ === i) break;
      i = _m_;
     }
    }
    return caml_call1(Stdlib_BytesLabels[44], s$0);
   }
   function esc_str(str){
    var
     estr = escaped(str),
     elen = caml_ml_string_length(estr),
     res = caml_create_bytes(elen + 2 | 0);
    caml_call5(Stdlib_Bytes[12], estr, 0, res, 1, elen);
    caml_bytes_unsafe_set(res, 0, 34);
    caml_bytes_unsafe_set(res, elen + 1 | 0, 34);
    return caml_call1(Stdlib_BytesLabels[44], res);
   }
   function index_of_newline(str, start){
    return caml_call3(Stdlib_StringLabels[33], str, start, 10);
   }
   function mach_maybe_esc_str(str){
    return must_escape(str) ? esc_str(str) : str;
   }
   function pp_hum_indent(indent, ppf, param){
    if(0 === param[0]){
     var str = param[1];
     if(! must_escape(str)) return caml_call2(Stdlib_Format[13], ppf, str);
     var match = index_of_newline(str, 0);
     if(match)
      var
       index = match[1],
       _f_ = (index + 1 | 0) === caml_ml_string_length(str) ? 1 : 0;
     else
      var _f_ = 1;
     if(_f_){
      var _g_ = esc_str(str);
      return caml_call2(Stdlib_Format[13], ppf, _g_);
     }
     caml_call2(Stdlib_Format[1], ppf, 0);
     caml_call2(Stdlib_Format[13], ppf, cst$0);
     var index$0 = 0;
     for(;;){
      var next_newline = index_of_newline(str, index$0);
      if(next_newline)
       var end_pos = next_newline[1], end_pos$0 = end_pos;
      else
       var end_pos$0 = caml_ml_string_length(str);
      var
       next_line =
         caml_call3
          (Stdlib_StringLabels[16], str, index$0, end_pos$0 - index$0 | 0),
       _h_ = escaped(next_line);
      caml_call2(Stdlib_Format[13], ppf, _h_);
      if(! next_newline){
       caml_call2(Stdlib_Format[13], ppf, cst$1);
       return caml_call2(Stdlib_Format[3], ppf, 0);
      }
      var newline_index = next_newline[1];
      caml_call2(Stdlib_Format[13], ppf, cst);
      caml_call2(Stdlib_Format[35], ppf, 0);
      caml_call2(Stdlib_Format[13], ppf, cst_n);
      var index$1 = newline_index + 1 | 0;
      index$0 = index$1;
     }
    }
    else{
     var match$0 = param[1];
     if(! match$0) return caml_call2(Stdlib_Format[13], ppf, cst$3);
     var t = match$0[2], h = match$0[1];
     caml_call2(Stdlib_Format[1], ppf, indent);
     caml_call2(Stdlib_Format[13], ppf, cst$2);
     pp_hum_indent(indent, ppf, h);
     var param$0 = t;
     for(;;){
      if(! param$0){
       caml_call2(Stdlib_Format[13], ppf, cst$4);
       return caml_call2(Stdlib_Format[3], ppf, 0);
      }
      var t$0 = param$0[2], h$0 = param$0[1];
      caml_call2(Stdlib_Format[28], ppf, 0);
      pp_hum_indent(indent, ppf, h$0);
      param$0 = t$0;
     }
    }
   }
   function pp_mach_internal(may_need_space, ppf, param){
    if(0 === param[0]){
     var
      str = param[1],
      str$0 = mach_maybe_esc_str(str),
      new_may_need_space = str$0 === str ? 1 : 0,
      new_may_need_space$0 =
        may_need_space ? new_may_need_space : may_need_space;
     if(new_may_need_space$0) caml_call2(Stdlib_Format[13], ppf, cst$5);
     caml_call2(Stdlib_Format[13], ppf, str$0);
     return new_may_need_space;
    }
    var match = param[1];
    if(! match){caml_call2(Stdlib_Format[13], ppf, cst$7); return 0;}
    var t = match[2], h = match[1];
    caml_call2(Stdlib_Format[13], ppf, cst$6);
    var
     may_need_space$0 = pp_mach_internal(0, ppf, h),
     may_need_space$1 = may_need_space$0,
     param$0 = t;
    for(;;){
     if(! param$0){caml_call2(Stdlib_Format[13], ppf, cst$8); return 0;}
     var
      t$0 = param$0[2],
      h$0 = param$0[1],
      may_need_space$2 = pp_mach_internal(may_need_space$1, ppf, h$0);
     may_need_space$1 = may_need_space$2;
     param$0 = t$0;
    }
   }
   function pp_hum(ppf, sexp){
    return pp_hum_indent(default_indent[1], ppf, sexp);
   }
   function pp_mach(ppf, sexp){pp_mach_internal(0, ppf, sexp); return 0;}
   function size_loop(acc, param){
    var c = acc[2], v = acc[1];
    if(0 === param[0]){
     var str = param[1];
     return [0, v + 1 | 0, c + caml_ml_string_length(str) | 0];
    }
    var lst = param[1];
    return caml_call3(Stdlib_ListLabels[26], size_loop, acc, lst);
   }
   function size(sexp){return size_loop(_a_, sexp);}
   function to_buffer_hum(buf, opt, sexp){
    var
     indent = opt ? opt[1] : default_indent[1],
     ppf = caml_call1(Stdlib_Format[116], buf);
    return caml_call4
            (Stdlib_Format[139],
             ppf,
             _b_,
             function(_d_, _e_){return pp_hum_indent(indent, _d_, _e_);},
             sexp);
   }
   function to_buffer_mach(buf, sexp){
    function loop(may_need_space, param){
     if(0 === param[0]){
      var
       str = param[1],
       str$0 = mach_maybe_esc_str(str),
       new_may_need_space = str$0 === str ? 1 : 0,
       new_may_need_space$0 =
         may_need_space ? new_may_need_space : may_need_space;
      if(new_may_need_space$0) caml_call2(Stdlib_Buffer[12], buf, 32);
      caml_call2(Stdlib_Buffer[16], buf, str$0);
      return new_may_need_space;
     }
     var match = param[1];
     if(! match){caml_call2(Stdlib_Buffer[16], buf, cst$9); return 0;}
     var t = match[2], h = match[1];
     caml_call2(Stdlib_Buffer[12], buf, 40);
     var
      may_need_space$0 = loop(0, h),
      may_need_space$1 = may_need_space$0,
      param$0 = t;
     for(;;){
      if(! param$0){caml_call2(Stdlib_Buffer[12], buf, 41); return 0;}
      var
       t$0 = param$0[2],
       h$0 = param$0[1],
       may_need_space$2 = loop(may_need_space$1, h$0);
      may_need_space$1 = may_need_space$2;
      param$0 = t$0;
     }
    }
    loop(0, sexp);
    return 0;
   }
   function to_buffer_gen(buf, add_char, add_string, sexp){
    function loop(may_need_space, param){
     if(0 === param[0]){
      var
       str = param[1],
       str$0 = mach_maybe_esc_str(str),
       new_may_need_space = str$0 === str ? 1 : 0,
       new_may_need_space$0 =
         may_need_space ? new_may_need_space : may_need_space;
      if(new_may_need_space$0) caml_call2(add_char, buf, 32);
      caml_call2(add_string, buf, str$0);
      return new_may_need_space;
     }
     var match = param[1];
     if(! match){caml_call2(add_string, buf, cst$10); return 0;}
     var t = match[2], h = match[1];
     caml_call2(add_char, buf, 40);
     var
      may_need_space$0 = loop(0, h),
      may_need_space$1 = may_need_space$0,
      param$0 = t;
     for(;;){
      if(! param$0){caml_call2(add_char, buf, 41); return 0;}
      var
       t$0 = param$0[2],
       h$0 = param$0[1],
       may_need_space$2 = loop(may_need_space$1, h$0);
      may_need_space$1 = may_need_space$2;
      param$0 = t$0;
     }
    }
    loop(0, sexp);
    return 0;
   }
   function buffer(param){return caml_call1(Stdlib_Buffer[1], 1024);}
   function to_string_hum(indent, sexp){
    if(0 === sexp[0]){
     var str = sexp[1], _c_ = index_of_newline(str, 0) ? 0 : 1;
     if(_c_) return mach_maybe_esc_str(str);
    }
    var buf = buffer(0);
    to_buffer_hum(buf, indent, sexp);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function to_string_mach(sexp){
    if(0 === sexp[0]){var str = sexp[1]; return mach_maybe_esc_str(str);}
    var buf = buffer(0);
    to_buffer_mach(buf, sexp);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   var of_float_style = [0, 1009018843], of_int_style = [0, 1009018843];
   function message(name, fields){
    function conv_fields(param){
     if(! param) return 0;
     var
      rest = param[2],
      match = param[1],
      fsexp = match[2],
      fname = match[1];
     return fname !== ""
             ? [0, [1, [0, [0, fname], [0, fsexp, 0]]], conv_fields(rest)]
             : [0, fsexp, conv_fields(rest)];
    }
    return [1, [0, [0, name], conv_fields(fields)]];
   }
   var
    Sexplib0_Sexp =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       compare,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp_mach,
       to_string_hum,
       to_string_mach,
       to_string_mach,
       of_float_style,
       of_int_style,
       [0,
        size,
        buffer,
        to_buffer_mach,
        to_buffer_hum,
        to_buffer_mach,
        to_buffer_gen,
        mach_maybe_esc_str,
        must_escape,
        esc_str]];
   runtime.caml_register_global(25, Sexplib0_Sexp, "Sexplib0__Sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_grammar
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    doc_comment_tag = "sexp_grammar.doc_comment",
    type_name_tag = "sexp_grammar.type_name",
    assoc_tag = "sexp_grammar.assoc",
    assoc_key_tag = "sexp_grammar.assoc.key",
    assoc_value_tag = "sexp_grammar.assoc.value",
    completion_suggested = "sexp_grammar.completion-suggested";
   function coerce(t){return t;}
   function tag(param, key, value){return [5, [0, key, value, param]];}
   var
    Sexplib0_Sexp_grammar =
      [0,
       coerce,
       tag,
       doc_comment_tag,
       type_name_tag,
       assoc_tag,
       assoc_key_tag,
       assoc_value_tag,
       completion_suggested];
   runtime.caml_register_global
    (6, Sexplib0_Sexp_grammar, "Sexplib0__Sexp_grammar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_grammar
//# unitInfo: Requires: Sexplib0__Sexp_grammar, Stdlib__ListLabels
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    unit_sexp_grammar = [2, 0],
    sexp_t_sexp_grammar = [0, "Sexp.t"],
    empty_sexp_grammar = [4, 0],
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels;
   function sexp_grammar_with_tags(grammar, tags){
    return caml_call3
            (Stdlib_ListLabels[27],
             function(param, grammar){
              var value = param[2], key = param[1];
              return [5, [0, key, value, grammar]];
             },
             tags,
             grammar);
   }
   function sexp_grammar_with_tag_list(x, tags){
    return caml_call3
            (Stdlib_ListLabels[27],
             function(param, grammar){
              var value = param[2], key = param[1];
              return [0, [0, key, value, grammar]];
             },
             tags,
             x);
   }
   function ref_sexp_grammar(grammar){
    return caml_call1(Sexplib0_Sexp_grammar[1], grammar);
   }
   function lazy_t_sexp_grammar(grammar){
    return caml_call1(Sexplib0_Sexp_grammar[1], grammar);
   }
   function option_sexp_grammar(param){return [1, param];}
   function list_sexp_grammar(param){return [2, [1, param]];}
   function array_sexp_grammar(param){return [2, [1, param]];}
   var
    Sexplib0_Sexp_conv_grammar =
      [0,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       0,
       4,
       4,
       1,
       2,
       3,
       2,
       2,
       2,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       empty_sexp_grammar,
       empty_sexp_grammar];
   runtime.caml_register_global
    (5, Sexplib0_Sexp_conv_grammar, "Sexplib0__Sexp_conv_grammar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv
//# unitInfo: Requires: CamlinternalLazy, Sexplib0__Sexp, Sexplib0__Sexp_conv_grammar, Stdlib, Stdlib__Arg, Stdlib__ArrayLabels, Stdlib__BytesLabels, Stdlib__Ephemeron, Stdlib__Int32, Stdlib__Int64, Stdlib__Lazy, Stdlib__ListLabels, Stdlib__MoreLabels, Stdlib__Nativeint, Stdlib__Obj, Stdlib__Parsing, Stdlib__Printexc, Stdlib__Printf, Stdlib__Queue, Stdlib__Scanf, Stdlib__Stack, Stdlib__StringLabels, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assert_failure$0 = "Assert_failure",
    cst_None = "None",
    cst_Some = "Some",
    cst_none = "none",
    cst_option_of_sexp_only_none_c$1 = "option_of_sexp: only none can be atom",
    cst_some = "some",
    cst_src_sexp_conv_ml = "src/sexp_conv.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_format_float = runtime.caml_format_float,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_MoreLabels = global_data.Stdlib__MoreLabels,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Obj = global_data.Stdlib__Obj,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_Ephemeron = global_data.Stdlib__Ephemeron,
    Sexplib0_Sexp_conv_grammar = global_data.Sexplib0__Sexp_conv_grammar,
    default_string_of_float =
      [0,
       function(x){
        var y = caml_format_float("%.15G", x);
        return caml_float_of_string(y) === x
                ? y
                : caml_format_float("%.17G", x);
       }],
    read_old_option_format = [0, 1],
    write_old_option_format = [0, 1],
    _a_ = [1, 0],
    _b_ = [0, cst_some],
    _c_ = [1, 0],
    _d_ = [0, cst_none],
    _e_ = [0, "<opaque>"],
    _f_ = [0, "<fun>"];
   function list_map(f, l){return caml_call2(Stdlib_ListLabels[20], f, l);}
   function sexp_of_unit(param){return _a_;}
   function sexp_of_bool(b){return [0, caml_call1(Stdlib[30], b)];}
   function sexp_of_string(str){return [0, str];}
   function sexp_of_bytes(bytes){
    return [0, caml_call1(Stdlib_BytesLabels[6], bytes)];
   }
   function sexp_of_char(c){
    return [0, caml_call2(Stdlib_StringLabels[1], 1, c)];
   }
   function sexp_of_int(n){return [0, caml_call1(Stdlib[33], n)];}
   function sexp_of_float(n){
    return [0, caml_call1(default_string_of_float[1], n)];
   }
   function sexp_of_int32(n){return [0, caml_call1(Stdlib_Int32[14], n)];}
   function sexp_of_int64(n){return [0, caml_call1(Stdlib_Int64[14], n)];}
   function sexp_of_nativeint(n){
    return [0, caml_call1(Stdlib_Nativeint[15], n)];
   }
   function sexp_of_ref(sexp_of_a, rf){return caml_call1(sexp_of_a, rf[1]);}
   function sexp_of_lazy_t(sexp_of_a, lv){
    var _aJ_ = runtime.caml_obj_tag(lv);
    a:
    if(250 === _aJ_)
     var _aK_ = lv[1];
    else{
     if(246 !== _aJ_ && 244 !== _aJ_){var _aK_ = lv; break a;}
     var _aK_ = caml_call1(CamlinternalLazy[2], lv);
    }
    return caml_call1(sexp_of_a, _aK_);
   }
   function sexp_of_option(sexp_of_a, param){
    if(! param) return write_old_option_format[1] ? _c_ : _d_;
    var x = param[1];
    return write_old_option_format[1]
            ? [1, [0, caml_call1(sexp_of_a, x), 0]]
            : [1, [0, _b_, [0, caml_call1(sexp_of_a, x), 0]]];
   }
   function sexp_of_pair(sexp_of_a, sexp_of_b, param){
    var b = param[2], a = param[1], _aI_ = [0, caml_call1(sexp_of_b, b), 0];
    return [1, [0, caml_call1(sexp_of_a, a), _aI_]];
   }
   function sexp_of_triple(sexp_of_a, sexp_of_b, sexp_of_c, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     _aG_ = [0, caml_call1(sexp_of_c, c), 0],
     _aH_ = [0, caml_call1(sexp_of_b, b), _aG_];
    return [1, [0, caml_call1(sexp_of_a, a), _aH_]];
   }
   function sexp_of_list(sexp_of_a, lst){
    return [1, caml_call2(Stdlib_ListLabels[20], sexp_of_a, lst)];
   }
   function sexp_of_array(sexp_of_a, ar){
    var lst_ref = [0, 0], _aD_ = ar.length - 2 | 0;
    if(_aD_ >= 0){
     var i = _aD_;
     for(;;){
      var _aE_ = lst_ref[1];
      lst_ref[1] =
       [0, caml_call1(sexp_of_a, caml_check_bound(ar, i)[1 + i]), _aE_];
      var _aF_ = i - 1 | 0;
      if(0 === i) break;
      i = _aF_;
     }
    }
    return [1, lst_ref[1]];
   }
   function sexp_of_hashtbl(sexp_of_key, sexp_of_val, htbl){
    function coll(k, v, acc){
     var _aC_ = [0, caml_call1(sexp_of_val, v), 0];
     return [0, [1, [0, caml_call1(sexp_of_key, k), _aC_]], acc];
    }
    return [1, caml_call3(Stdlib_MoreLabels[1][14], coll, htbl, 0)];
   }
   function sexp_of_opaque(param){return _e_;}
   function sexp_of_fun(param){return _f_;}
   function equal(_aB_, _aA_){return _aB_ === _aA_ ? 1 : 0;}
   var
    hash = Stdlib_Obj[22][3],
    Exn_table = caml_call1(Stdlib_Ephemeron[1][3], [0, equal, hash]),
    the_exn_table = caml_call1(Exn_table[1], 17);
   function add(opt, param, extension_constructor, sexp_of_exn){
    var printexc = opt ? opt[1] : 1;
    return caml_call3
            (Exn_table[5],
             the_exn_table,
             extension_constructor,
             [0, sexp_of_exn, printexc]);
   }
   function find_auto(for_printexc, exn){
    var
     extension_constructor = caml_call1(Stdlib_Obj[22][1], exn),
     match = caml_call2(Exn_table[8], the_exn_table, extension_constructor);
    if(! match) return 0;
    var match$0 = match[1], printexc = match$0[2], sexp_of_exn = match$0[1];
    if(for_printexc && ! printexc) return 0;
    return [0, caml_call1(sexp_of_exn, exn)];
   }
   function size(param){return caml_call1(Exn_table[18], the_exn_table)[1];}
   var For_unit_tests_only = [0, size], _g_ = [0, 2];
   function sexp_of_exn_opt(exn){return find_auto(0, exn);}
   function sexp_of_exn(exn){
    var match = sexp_of_exn_opt(exn);
    if(! match) return [1, [0, [0, caml_call1(Stdlib_Printexc[1], exn)], 0]];
    var sexp = match[1];
    return sexp;
   }
   function exn_to_string(e){
    var _az_ = sexp_of_exn(e);
    return caml_call2(Sexplib0_Sexp[13], 0, _az_);
   }
   caml_call1
    (Stdlib_Printexc[9],
     function(exn){
      var match = find_auto(1, exn);
      if(! match) return 0;
      var sexp = match[1];
      return [0, caml_call2(Sexplib0_Sexp[13], _g_, sexp)];
     });
   var _h_ = [0, 2];
   function printexc_prefer_sexp(exn){
    var match = sexp_of_exn_opt(exn);
    if(! match) return caml_call1(Stdlib_Printexc[1], exn);
    var sexp = match[1];
    return caml_call2(Sexplib0_Sexp[13], _h_, sexp);
   }
   var
    Of_sexp_error = Sexplib0_Sexp[6],
    record_check_extra_fields = [0, 1],
    cst_unit_of_sexp_empty_list_ne = "unit_of_sexp: empty list needed",
    cst_bool_of_sexp_unknown_strin = "bool_of_sexp: unknown string",
    cst_bool_of_sexp_atom_needed = "bool_of_sexp: atom needed",
    cst_string_of_sexp_atom_needed = "string_of_sexp: atom needed",
    cst_bytes_of_sexp_atom_needed = "bytes_of_sexp: atom needed",
    cst_char_of_sexp_atom_string_m =
      "char_of_sexp: atom string must contain one character only",
    cst_char_of_sexp_atom_needed = "char_of_sexp: atom needed",
    cst_int_of_sexp = "int_of_sexp: ",
    cst_int_of_sexp_atom_needed = "int_of_sexp: atom needed",
    cst_float_of_sexp = "float_of_sexp: ",
    cst_float_of_sexp_atom_needed = "float_of_sexp: atom needed",
    cst_int32_of_sexp = "int32_of_sexp: ",
    cst_int32_of_sexp_atom_needed = "int32_of_sexp: atom needed",
    cst_int64_of_sexp = "int64_of_sexp: ",
    cst_int64_of_sexp_atom_needed = "int64_of_sexp: atom needed",
    cst_nativeint_of_sexp = "nativeint_of_sexp: ",
    cst_nativeint_of_sexp_atom_nee = "nativeint_of_sexp: atom needed",
    cst_option_of_sexp_only_none_c = cst_option_of_sexp_only_none_c$1,
    cst_option_of_sexp_list_must_r =
      "option_of_sexp: list must represent optional value",
    cst_option_of_sexp_only_none_c$0 = cst_option_of_sexp_only_none_c$1,
    cst_option_of_sexp_list_must_b = "option_of_sexp: list must be (some el)",
    cst_pair_of_sexp_list_needed = "pair_of_sexp: list needed",
    cst_pair_of_sexp_list_must_con =
      "pair_of_sexp: list must contain exactly two elements only",
    cst_triple_of_sexp_list_needed = "triple_of_sexp: list needed",
    cst_triple_of_sexp_list_must_c =
      "triple_of_sexp: list must contain exactly three elements only",
    cst_list_of_sexp_list_needed = "list_of_sexp: list needed",
    cst_array_of_sexp_list_needed = "array_of_sexp: list needed",
    cst_hashtbl_of_sexp_list_neede = "hashtbl_of_sexp: list needed",
    cst_hashtbl_of_sexp_tuple_list = "hashtbl_of_sexp: tuple list needed",
    cst_opaque_of_sexp_cannot_conv =
      "opaque_of_sexp: cannot convert opaque values",
    cst_fun_of_sexp_cannot_convert =
      "fun_of_sexp: cannot convert function values";
   function of_sexp_error_exn(exc, sexp){
    throw caml_maybe_attach_backtrace([0, Of_sexp_error, exc, sexp], 1);
   }
   function of_sexp_error(what, sexp){
    throw caml_maybe_attach_backtrace
           ([0, Of_sexp_error, [0, Stdlib[7], what], sexp], 1);
   }
   function unit_of_sexp(sexp){
    if(1 === sexp[0] && ! sexp[1]) return 0;
    return of_sexp_error(cst_unit_of_sexp_empty_list_ne, sexp);
   }
   function bool_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_bool_of_sexp_atom_needed, sexp);
    var _ay_ = sexp[1];
    a:
    if(_ay_ !== "False"){
     if(_ay_ !== "True"){
      if(_ay_ === "false") break a;
      if(_ay_ !== "true")
       return of_sexp_error(cst_bool_of_sexp_unknown_strin, sexp);
     }
     return 1;
    }
    return 0;
   }
   function string_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_string_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    return str;
   }
   function bytes_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_bytes_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    return caml_call1(Stdlib_BytesLabels[5], str);
   }
   function char_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_char_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    if(1 !== runtime.caml_ml_string_length(str))
     of_sexp_error(cst_char_of_sexp_atom_string_m, sexp);
    return runtime.caml_string_get(str, 0);
   }
   function int_of_sexp(sexp){
    if(0 !== sexp[0]) return of_sexp_error(cst_int_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var _ax_ = caml_int_of_string(str); return _ax_;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), _aw_ = exn_to_string(exc);
     return of_sexp_error(caml_call2(Stdlib[28], cst_int_of_sexp, _aw_), sexp);
    }
   }
   function float_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_float_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var _av_ = caml_float_of_string(str); return _av_;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), _au_ = exn_to_string(exc);
     return of_sexp_error
             (caml_call2(Stdlib[28], cst_float_of_sexp, _au_), sexp);
    }
   }
   function int32_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_int32_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var _at_ = caml_int_of_string(str); return _at_;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), _as_ = exn_to_string(exc);
     return of_sexp_error
             (caml_call2(Stdlib[28], cst_int32_of_sexp, _as_), sexp);
    }
   }
   function int64_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_int64_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var _ar_ = runtime.caml_int64_of_string(str); return _ar_;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), _aq_ = exn_to_string(exc);
     return of_sexp_error
             (caml_call2(Stdlib[28], cst_int64_of_sexp, _aq_), sexp);
    }
   }
   function nativeint_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_nativeint_of_sexp_atom_nee, sexp);
    var str = sexp[1];
    try{var _ap_ = caml_int_of_string(str); return _ap_;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), _ao_ = exn_to_string(exc);
     return of_sexp_error
             (caml_call2(Stdlib[28], cst_nativeint_of_sexp, _ao_), sexp);
    }
   }
   function ref_of_sexp(a_of_sexp, sexp){
    return [0, caml_call1(a_of_sexp, sexp)];
   }
   function lazy_t_of_sexp(a_of_sexp, sexp){
    var _an_ = caml_call1(a_of_sexp, sexp);
    return caml_call1(Stdlib_Lazy[4], _an_);
   }
   function option_of_sexp(a_of_sexp, sexp){
    if(! read_old_option_format[1]){
     if(0 === sexp[0]){
      var _ai_ = sexp[1];
      if(_ai_ !== cst_None && _ai_ !== cst_none)
       return of_sexp_error(cst_option_of_sexp_only_none_c$0, sexp);
      return 0;
     }
     var _aj_ = sexp[1];
     a:
     if(_aj_){
      var _ak_ = _aj_[1];
      if(0 === _ak_[0]){
       var _al_ = _ak_[1];
       if(_al_ !== cst_Some && _al_ !== cst_some) break a;
       var _am_ = _aj_[2];
       if(_am_ && ! _am_[2]){
        var el$0 = _am_[1];
        return [0, caml_call1(a_of_sexp, el$0)];
       }
      }
     }
     return of_sexp_error(cst_option_of_sexp_list_must_b, sexp);
    }
    if(0 === sexp[0]){
     var _ad_ = sexp[1];
     if(_ad_ !== cst_None && _ad_ !== cst_none)
      return of_sexp_error(cst_option_of_sexp_only_none_c, sexp);
    }
    else{
     var _ae_ = sexp[1];
     if(_ae_){
      var _af_ = _ae_[1];
      a:
      {
       if(_ae_[2]){
        b:
        if(0 === _af_[0]){
         var _ag_ = _af_[1];
         if(_ag_ !== cst_Some && _ag_ !== cst_some) break b;
         var _ah_ = _ae_[2];
         if(! _ah_[2]){var el = _ah_[1]; break a;}
        }
        return of_sexp_error(cst_option_of_sexp_list_must_r, sexp);
       }
       var el = _af_;
      }
      return [0, caml_call1(a_of_sexp, el)];
     }
    }
    return 0;
   }
   function pair_of_sexp(a_of_sexp, b_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_pair_of_sexp_list_needed, sexp);
    var _ab_ = sexp[1];
    if(_ab_){
     var _ac_ = _ab_[2];
     if(_ac_ && ! _ac_[2]){
      var
       b_sexp = _ac_[1],
       a_sexp = _ab_[1],
       a = caml_call1(a_of_sexp, a_sexp),
       b = caml_call1(b_of_sexp, b_sexp);
      return [0, a, b];
     }
    }
    return of_sexp_error(cst_pair_of_sexp_list_must_con, sexp);
   }
   function triple_of_sexp(a_of_sexp, b_of_sexp, c_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_triple_of_sexp_list_needed, sexp);
    var ___ = sexp[1];
    if(___){
     var _$_ = ___[2];
     if(_$_){
      var _aa_ = _$_[2];
      if(_aa_ && ! _aa_[2]){
       var
        c_sexp = _aa_[1],
        b_sexp = _$_[1],
        a_sexp = ___[1],
        a = caml_call1(a_of_sexp, a_sexp),
        b = caml_call1(b_of_sexp, b_sexp),
        c = caml_call1(c_of_sexp, c_sexp);
       return [0, a, b, c];
      }
     }
    }
    return of_sexp_error(cst_triple_of_sexp_list_must_c, sexp);
   }
   function list_of_sexp(a_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_list_of_sexp_list_needed, sexp);
    var lst = sexp[1];
    return caml_call2(Stdlib_ListLabels[20], a_of_sexp, lst);
   }
   function array_of_sexp(a_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_array_of_sexp_list_needed, sexp);
    var match = sexp[1];
    if(! match) return [0];
    var
     t = match[2],
     h = match[1],
     len = caml_call1(Stdlib_ListLabels[1], t) + 1 | 0,
     res = runtime.caml_make_vect(len, caml_call1(a_of_sexp, h)),
     i = 1,
     param = t;
    for(;;){
     if(! param) return res;
     var t$0 = param[2], h$0 = param[1], _Z_ = caml_call1(a_of_sexp, h$0);
     caml_check_bound(res, i)[1 + i] = _Z_;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = t$0;
    }
   }
   function hashtbl_of_sexp(key_of_sexp, val_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_hashtbl_of_sexp_list_neede, sexp);
    var lst = sexp[1], htbl = caml_call2(Stdlib_MoreLabels[1][1], 0, 0);
    function act(param){
     if(1 === param[0]){
      var _V_ = param[1];
      if(_V_){
       var _W_ = _V_[2];
       if(_W_ && ! _W_[2]){
        var
         v_sexp = _W_[1],
         k_sexp = _V_[1],
         _X_ = caml_call1(val_of_sexp, v_sexp),
         _Y_ = caml_call1(key_of_sexp, k_sexp);
        return caml_call3(Stdlib_MoreLabels[1][5], htbl, _Y_, _X_);
       }
      }
     }
     return of_sexp_error(cst_hashtbl_of_sexp_tuple_list, sexp);
    }
    caml_call2(Stdlib_ListLabels[18], act, lst);
    return htbl;
   }
   function opaque_of_sexp(sexp){
    return of_sexp_error(cst_opaque_of_sexp_cannot_conv, sexp);
   }
   function fun_of_sexp(sexp){
    return of_sexp_error(cst_fun_of_sexp_cannot_convert, sexp);
   }
   var
    sexp_grammar_with_tags = Sexplib0_Sexp_conv_grammar[1],
    sexp_grammar_with_tag_list = Sexplib0_Sexp_conv_grammar[2],
    unit_sexp_grammar = Sexplib0_Sexp_conv_grammar[3],
    bool_sexp_grammar = Sexplib0_Sexp_conv_grammar[4],
    string_sexp_grammar = Sexplib0_Sexp_conv_grammar[5],
    bytes_sexp_grammar = Sexplib0_Sexp_conv_grammar[6],
    char_sexp_grammar = Sexplib0_Sexp_conv_grammar[7],
    int_sexp_grammar = Sexplib0_Sexp_conv_grammar[8],
    float_sexp_grammar = Sexplib0_Sexp_conv_grammar[9],
    int32_sexp_grammar = Sexplib0_Sexp_conv_grammar[10],
    int64_sexp_grammar = Sexplib0_Sexp_conv_grammar[11],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv_grammar[12],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv_grammar[13],
    ref_sexp_grammar = Sexplib0_Sexp_conv_grammar[14],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv_grammar[15],
    option_sexp_grammar = Sexplib0_Sexp_conv_grammar[16],
    list_sexp_grammar = Sexplib0_Sexp_conv_grammar[17],
    array_sexp_grammar = Sexplib0_Sexp_conv_grammar[18],
    opaque_sexp_grammar = Sexplib0_Sexp_conv_grammar[19],
    fun_sexp_grammar = Sexplib0_Sexp_conv_grammar[20],
    _i_ =
      [0,
       [2,
        0,
        [12, 32, [2, 0, [12, 58, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]]]]]],
       "%s %s:%d:%d"];
   function get_flc_error(name, param){
    var chr = param[3], line = param[2], file = param[1];
    return [0, caml_call5(Stdlib_Printf[4], _i_, name, file, line, chr)];
   }
   var
    _j_ = [0, "Sys.Break"],
    _k_ = [0, cst_src_sexp_conv_ml, 394, 15],
    _l_ = [0, "Stack.Empty"],
    _m_ = [0, cst_src_sexp_conv_ml, 390, 15],
    _n_ = [0, "Scanf.Scan_failure"],
    _o_ = [0, cst_src_sexp_conv_ml, 386, 15],
    _p_ = [0, "Queue.Empty"],
    _q_ = [0, cst_src_sexp_conv_ml, 382, 15],
    _r_ = [0, "Parsing.Parse_error"],
    _s_ = [0, cst_src_sexp_conv_ml, 378, 15],
    _t_ = [0, "Lazy.Undefined"],
    _u_ = [0, cst_src_sexp_conv_ml, 374, 15],
    _v_ = [0, "Arg.Bad"],
    _w_ = [0, cst_src_sexp_conv_ml, 370, 15],
    _x_ = [0, "Arg.Help"],
    _y_ = [0, cst_src_sexp_conv_ml, 366, 15],
    _z_ = [0, "Sys_error"],
    _A_ = [0, cst_src_sexp_conv_ml, 362, 15],
    _B_ = [0, "Not_found_s"],
    _C_ = [0, cst_src_sexp_conv_ml, 358, 15],
    cst_Match_failure = "Match_failure",
    _D_ = [0, cst_src_sexp_conv_ml, 354, 15],
    _E_ = [0, "Invalid_argument"],
    _F_ = [0, cst_src_sexp_conv_ml, 350, 15],
    _G_ = [0, "Not_found"],
    _H_ = [0, cst_src_sexp_conv_ml, 346, 15],
    _I_ = [0, "Failure"],
    _J_ = [0, cst_src_sexp_conv_ml, 342, 15],
    _K_ = [0, "End_of_file"],
    _L_ = [0, cst_src_sexp_conv_ml, 338, 15],
    _M_ = [0, "Exit"],
    _N_ = [0, cst_src_sexp_conv_ml, 334, 15],
    cst_Assert_failure = cst_Assert_failure$0,
    _O_ = [0, cst_src_sexp_conv_ml, 330, 15],
    _P_ = [0, 0],
    _Q_ = [0, 0];
   caml_call2
    (Stdlib_ListLabels[18],
     function(param){
      var handler = param[2], extension_constructor = param[1];
      return add(_Q_, _P_, extension_constructor, handler);
     },
     [0,
      [0,
       Stdlib[5],
       function(param){
        if(param[1] !== Stdlib[5])
         throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
        var arg = param[2];
        return get_flc_error(cst_Assert_failure, arg);
       }],
      [0,
       [0,
        Stdlib[3],
        function(param){
         if(param === Stdlib[3]) return _M_;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _N_], 1);
        }],
       [0,
        [0,
         Stdlib[12],
         function(param){
          if(param === Stdlib[12]) return _K_;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _L_], 1);
         }],
        [0,
         [0,
          Stdlib[7],
          function(param){
           if(param[1] !== Stdlib[7])
            throw caml_maybe_attach_backtrace([0, Assert_failure, _J_], 1);
           var arg = param[2];
           return [1, [0, _I_, [0, [0, arg], 0]]];
          }],
         [0,
          [0,
           Stdlib[8],
           function(param){
            if(param === Stdlib[8]) return _G_;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
           }],
          [0,
           [0,
            Stdlib[6],
            function(param){
             if(param[1] !== Stdlib[6])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
             var arg = param[2];
             return [1, [0, _E_, [0, [0, arg], 0]]];
            }],
           [0,
            [0,
             Stdlib[4],
             function(param){
              if(param[1] !== Stdlib[4])
               throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
              var arg = param[2];
              return get_flc_error(cst_Match_failure, arg);
             }],
            [0,
             [0,
              Sexplib0_Sexp[5],
              function(param){
               if(param[1] !== Sexplib0_Sexp[5])
                throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
               var arg = param[2];
               return [1, [0, _B_, [0, arg, 0]]];
              }],
             [0,
              [0,
               Stdlib[11],
               function(param){
                if(param[1] !== Stdlib[11])
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _A_], 1);
                var arg = param[2];
                return [1, [0, _z_, [0, [0, arg], 0]]];
               }],
              [0,
               [0,
                Stdlib_Arg[7],
                function(param){
                 if(param[1] !== Stdlib_Arg[7])
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _y_], 1);
                 var arg = param[2];
                 return [1, [0, _x_, [0, [0, arg], 0]]];
                }],
               [0,
                [0,
                 Stdlib_Arg[8],
                 function(param){
                  if(param[1] !== Stdlib_Arg[8])
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _w_], 1);
                  var arg = param[2];
                  return [1, [0, _v_, [0, [0, arg], 0]]];
                 }],
                [0,
                 [0,
                  Stdlib_Lazy[1],
                  function(param){
                   if(param === Stdlib_Lazy[1]) return _t_;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _u_], 1);
                  }],
                 [0,
                  [0,
                   Stdlib_Parsing[10],
                   function(param){
                    if(param === Stdlib_Parsing[10]) return _r_;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _s_], 1);
                   }],
                  [0,
                   [0,
                    Stdlib_Queue[1],
                    function(param){
                     if(param === Stdlib_Queue[1]) return _p_;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _q_], 1);
                    }],
                   [0,
                    [0,
                     Stdlib_Scanf[2],
                     function(param){
                      if(param[1] !== Stdlib_Scanf[2])
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _o_], 1);
                      var arg = param[2];
                      return [1, [0, _n_, [0, [0, arg], 0]]];
                     }],
                    [0,
                     [0,
                      Stdlib_Stack[1],
                      function(param){
                       if(param === Stdlib_Stack[1]) return _l_;
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _m_], 1);
                      }],
                     [0,
                      [0,
                       Stdlib_Sys[44],
                       function(param){
                        if(param === Stdlib_Sys[44]) return _j_;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _k_], 1);
                       }],
                      0]]]]]]]]]]]]]]]]]);
   var
    _R_ = [0, "Sexplib.Conv.Of_sexp_error"],
    _S_ = [0, cst_src_sexp_conv_ml, 406, 15],
    _T_ = [0, 0],
    _U_ = [0, 1];
   caml_call2
    (Stdlib_ListLabels[18],
     function(param){
      var handler = param[2], extension_constructor = param[1];
      return add(_U_, _T_, extension_constructor, handler);
     },
     [0,
      [0,
       Of_sexp_error,
       function(param){
        if(param[1] !== Of_sexp_error)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _S_], 1);
        var sexp = param[3], exc = param[2];
        return [1, [0, _R_, [0, sexp_of_exn(exc), [0, sexp, 0]]]];
       }],
      0]);
   var
    Sexplib0_Sexp_conv =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       [0, add, For_unit_tests_only]];
   runtime.caml_register_global
    (117, Sexplib0_Sexp_conv, "Sexplib0__Sexp_conv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_error
//# unitInfo: Requires: Sexplib0__Sexp_conv, Stdlib__ListLabels, Stdlib__Printf, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = " ",
    cst_has_incorrect_number_of_ar = " has incorrect number of arguments",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    msg = "this constructor does not take arguments",
    msg$0 = "this constructor requires arguments",
    msg$1 = "expected a variant type, saw a nested list",
    msg$2 = "expected a variant type, saw an empty list",
    msg$3 = "unexpected variant constructor",
    msg$4 = "record conversion: a [sexp.bool] field was given a payload.",
    msg$5 =
      "record conversion: only pairs expected, their first element must be an atom",
    msg$6 = "list instead of atom for record expected",
    msg$7 =
      "cannot convert values of types resulting from polymorphic record fields",
    msg$8 = "no matching variant found",
    msg$9 = "polymorphic variant does not take arguments",
    msg$10 = "polymorphic variant tag takes an argument",
    msg$11 = "a nested list is an invalid polymorphic variant",
    msg$12 = "the empty list is an invalid polymorphic variant",
    msg$13 = "trying to convert an empty type",
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    _a_ = [0, [2, 0, [11, "_of_sexp: ", [2, 0, 0]]], "%s_of_sexp: %s"],
    _b_ =
      [0,
       [11, "tuple of size ", [4, 0, 0, 0, [11, " expected", 0]]],
       "tuple of size %d expected"],
    _c_ =
      [0,
       [2,
        0,
        [11, "_of_sexp: expected a pair beginning with label ", [2, 0, 0]]],
       "%s_of_sexp: expected a pair beginning with label %s"],
    _d_ =
      [0,
       [2,
        0,
        [11,
         "_of_sexp: incorrect label for element ",
         [2, 0, [11, " at position ", [4, 3, 0, 0, 0]]]]],
       "%s_of_sexp: incorrect label for element %s at position %i"],
    _e_ =
      [0,
       [11, "sum tag ", [3, 0, [11, cst_has_incorrect_number_of_ar, 0]]],
       "sum tag %S has incorrect number of arguments"],
    _f_ = [0, [2, 0, [11, ": ", [2, 0, 0]]], "%s: %s"],
    cst_duplicate_fields = "duplicate fields",
    cst_extra_fields = "extra fields",
    _g_ =
      [0,
       [11, "the following record elements were undefined: ", [2, 0, 0]],
       "the following record elements were undefined: %s"];
   function error(loc, sexp, msg){
    var _k_ = caml_call3(Stdlib_Printf[4], _a_, loc, msg);
    return caml_call2(Sexplib0_Sexp_conv[27], _k_, sexp);
   }
   function simple_error(msg, loc, sexp){return error(loc, sexp, msg);}
   function tuple_of_size_n_expected(loc, n, sexp){
    return error(loc, sexp, caml_call2(Stdlib_Printf[4], _b_, n));
   }
   function tuple_pair_expected(loc, name, sexp){
    var msg = caml_call3(Stdlib_Printf[4], _c_, loc, name);
    return caml_call2(Sexplib0_Sexp_conv[27], msg, sexp);
   }
   function tuple_incorrect_label(loc, name, pos, sexp){
    var msg = caml_call4(Stdlib_Printf[4], _d_, loc, name, pos);
    return caml_call2(Sexplib0_Sexp_conv[27], msg, sexp);
   }
   function stag_no_args(loc, sexp){return error(loc, sexp, msg);}
   function stag_incorrect_n_args(loc, tag, sexp){
    return error(loc, sexp, caml_call2(Stdlib_Printf[4], _e_, tag));
   }
   function stag_takes_args(loc, sexp){return error(loc, sexp, msg$0);}
   function nested_list_invalid_sum(loc, sexp){return error(loc, sexp, msg$1);
   }
   function empty_list_invalid_sum(loc, sexp){return error(loc, sexp, msg$2);}
   function unexpected_stag(loc, sexp){return error(loc, sexp, msg$3);}
   function record_sexp_bool_with_payload(loc, sexp){return error(loc, sexp, msg$4);
   }
   function record_only_pairs_expected(loc, sexp){return error(loc, sexp, msg$5);
   }
   function record_invalid_fields(what, loc, fld_names, sexp){
    var fld_names_str = caml_call2(Stdlib_StringLabels[7], cst, fld_names);
    return error
            (loc,
             sexp,
             caml_call3(Stdlib_Printf[4], _f_, what, fld_names_str));
   }
   function record_duplicate_fields(loc, fld_names, sexp){
    return record_invalid_fields(cst_duplicate_fields, loc, fld_names, sexp);
   }
   function record_extra_fields(loc, fld_names, sexp){
    return record_invalid_fields(cst_extra_fields, loc, fld_names, sexp);
   }
   function record_get_undefined_loop(fields, param){
    var fields$0 = fields, param$0 = param;
    for(;;){
     if(! param$0){
      var _j_ = caml_call1(Stdlib_ListLabels[10], fields$0);
      return caml_call2(Stdlib_StringLabels[7], cst$0, _j_);
     }
     var _i_ = param$0[1];
     if(_i_[1]){
      var rest = param$0[2], field = _i_[2], fields$1 = [0, field, fields$0];
      fields$0 = fields$1;
      param$0 = rest;
     }
     else{var rest$0 = param$0[2]; param$0 = rest$0;}
    }
   }
   function record_undefined_elements(loc, sexp, lst){
    var
     undefined$0 = record_get_undefined_loop(0, lst),
     msg = caml_call2(Stdlib_Printf[4], _g_, undefined$0);
    return error(loc, sexp, msg);
   }
   function record_list_instead_atom(loc, sexp){return error(loc, sexp, msg$6);
   }
   function record_poly_field_value(loc, sexp){return error(loc, sexp, msg$7);
   }
   var
    No_variant_match =
      [248,
       "Sexplib0__Sexp_conv_error.No_variant_match",
       runtime.caml_fresh_oo_id(0)],
    _h_ =
      [0,
       [11,
        "polymorphic variant tag ",
        [3, 0, [11, cst_has_incorrect_number_of_ar, 0]]],
       "polymorphic variant tag %S has incorrect number of arguments"];
   function no_variant_match(param){
    throw caml_maybe_attach_backtrace(No_variant_match, 1);
   }
   function no_matching_variant_found(loc, sexp){return error(loc, sexp, msg$8);
   }
   function ptag_no_args(loc, sexp){return error(loc, sexp, msg$9);}
   function ptag_incorrect_n_args(loc, cnstr, sexp){
    return error(loc, sexp, caml_call2(Stdlib_Printf[4], _h_, cnstr));
   }
   function ptag_takes_args(loc, sexp){return error(loc, sexp, msg$10);}
   function nested_list_invalid_poly_var(loc, sexp){return error(loc, sexp, msg$11);
   }
   function empty_list_invalid_poly_var(loc, sexp){return error(loc, sexp, msg$12);
   }
   function empty_type(loc, sexp){return error(loc, sexp, msg$13);}
   var
    Sexplib0_Sexp_conv_error =
      [0,
       Of_sexp_error,
       error,
       simple_error,
       tuple_of_size_n_expected,
       tuple_pair_expected,
       tuple_incorrect_label,
       stag_no_args,
       stag_incorrect_n_args,
       stag_takes_args,
       nested_list_invalid_sum,
       empty_list_invalid_sum,
       unexpected_stag,
       record_sexp_bool_with_payload,
       record_only_pairs_expected,
       record_invalid_fields,
       record_duplicate_fields,
       record_extra_fields,
       record_get_undefined_loop,
       record_undefined_elements,
       record_list_instead_atom,
       record_poly_field_value,
       No_variant_match,
       no_variant_match,
       no_matching_variant_found,
       ptag_no_args,
       ptag_incorrect_n_args,
       ptag_takes_args,
       nested_list_invalid_poly_var,
       empty_list_invalid_poly_var,
       empty_type];
   runtime.caml_register_global
    (32, Sexplib0_Sexp_conv_error, "Sexplib0__Sexp_conv_error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_labeled_tuple
//# unitInfo: Requires: Sexplib0__Sexp_conv_error, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error;
   function labeled_tuple_of_sexp(caller, fields$2, create, original_sexp){
    var t = fields$2, acc = 0;
    for(;;){
     if(! t) break;
     var acc$0 = acc + 1 | 0, t$0 = t[3];
     t = t$0;
     acc = acc$0;
    }
    if(0 === original_sexp[0])
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], caller, acc, original_sexp);
    var list$2 = original_sexp[1];
    a:
    {
     var pos$1 = 0;
     if(fields$2){
      var fields = fields$2[3], conv = fields$2[2], name = fields$2[1];
      if(list$2){
       var list = list$2[2], sexp = list$2[1];
       if(1 === sexp[0]){
        var _a_ = sexp[1];
        if(_a_){
         var _b_ = _a_[1];
         if(0 === _b_[0]){
          var _c_ = _a_[2];
          if(_c_ && ! _c_[2]){
           var sexp$0 = _c_[1], atom = _b_[1];
           if(! caml_call2(Stdlib_String[9], atom, name)){
            var
             _g_ =
               caml_call4
                (Sexplib0_Sexp_conv_error[6],
                 caller,
                 name,
                 pos$1,
                 original_sexp);
            break a;
           }
           var
            block = [0, caml_call1(conv, sexp$0), 24029],
            dst = block,
            offset = 1,
            fields$0 = fields,
            pos = 1,
            list$0 = list;
           for(;;){
            b:
            if(fields$0){
             var
              fields$1 = fields$0[3],
              conv$0 = fields$0[2],
              name$0 = fields$0[1];
             if(list$0){
              var list$1 = list$0[2], sexp$1 = list$0[1];
              if(1 === sexp$1[0]){
               var _d_ = sexp$1[1];
               if(_d_){
                var _e_ = _d_[1];
                if(0 === _e_[0]){
                 var _f_ = _d_[2];
                 if(_f_ && ! _f_[2]){
                  var sexp$2 = _f_[1], atom$0 = _e_[1];
                  if(caml_call2(Stdlib_String[9], atom$0, name$0)){
                   var dst$0 = [0, caml_call1(conv$0, sexp$2), 24029];
                   dst[1 + offset] = dst$0;
                   var pos$0 = pos + 1 | 0;
                   dst = dst$0;
                   offset = 1;
                   fields$0 = fields$1;
                   pos = pos$0;
                   list$0 = list$1;
                   continue;
                  }
                  dst[1 + offset] =
                   caml_call4
                    (Sexplib0_Sexp_conv_error[6],
                     caller,
                     name$0,
                     pos,
                     original_sexp);
                  break b;
                 }
                }
               }
              }
              dst[1 + offset] =
               caml_call3(Sexplib0_Sexp_conv_error[5], caller, name$0, sexp$1);
             }
             else
              dst[1 + offset] =
               caml_call3
                (Sexplib0_Sexp_conv_error[4], caller, acc, original_sexp);
            }
            else if(list$0)
             dst[1 + offset] =
              caml_call3
               (Sexplib0_Sexp_conv_error[4], caller, acc, original_sexp);
            else
             dst[1 + offset] = 0;
            var _g_ = block;
            break a;
           }
          }
         }
        }
       }
       var _g_ = caml_call3(Sexplib0_Sexp_conv_error[5], caller, name, sexp);
      }
      else
       var
        _g_ =
          caml_call3(Sexplib0_Sexp_conv_error[4], caller, acc, original_sexp);
     }
     else
      var
       _g_ =
         list$2
          ? caml_call3
            (Sexplib0_Sexp_conv_error[4], caller, acc, original_sexp)
          : 0;
    }
    return caml_call1(create, _g_);
   }
   var Sexplib0_Sexp_conv_labeled_tup = [0, [0], labeled_tuple_of_sexp];
   runtime.caml_register_global
    (2, Sexplib0_Sexp_conv_labeled_tup, "Sexplib0__Sexp_conv_labeled_tuple");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_record
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__ArrayLabels, Stdlib__ListLabels, Stdlib__Option, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    absent = [0, ""],
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib = global_data.Stdlib,
    Kind = [0];
   function combine(a, b){
    a:
    if(typeof a !== "number"){
     b:
     {
      c:
      {
       d:
       {
        e:
        switch(a[0]){
          case 0:
           var a$0 = a[1];
           if(typeof b !== "number")
            switch(b[0]){
              case 3: break;
              case 0:
               var b$0 = b[1]; return [0, caml_call2(Stdlib[37], a$0, b$0)];
              case 1:
               break d;
              default: var t$0 = a; break e;
            }
           break b;
          case 1:
           var a$1 = a[1];
           if(typeof b !== "number")
            switch(b[0]){
              case 3: break;
              case 1:
               var b$1 = b[1]; return [1, caml_call2(Stdlib[37], a$1, b$1)];
              default: var t = a; break c;
            }
           break b;
          case 2:
           var a$2 = a[1];
           if(typeof b !== "number")
            switch(b[0]){
              case 3: break;
              case 0:
               var t$0 = b; break e;
              case 1:
               break d;
              default:
               var b$2 = b[1]; return [2, caml_call2(Stdlib[37], a$2, b$2)];
            }
           break b;
          default: break a;
        }
        return t$0;
       }
       var t = b;
      }
      return t;
     }
     return b;
    }
    return a;
   }
   var
    Malformed =
      [248,
       "Sexplib0__Sexp_conv_record.Malformed",
       runtime.caml_fresh_oo_id(0)],
    _a_ = [1, 0],
    _b_ = [3, 0],
    dummy = 0;
   function parse_value_malformed(malformed, fields, state, pos){
    try{
     parse_values(fields[4], state, pos + 1 | 0);
     var malformed$0 = malformed;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Malformed) throw caml_maybe_attach_backtrace(exn, 0);
     var other = exn[2], malformed$0 = combine(malformed, other);
    }
    throw caml_maybe_attach_backtrace([0, Malformed, malformed$0], 1);
   }
   function parse_values(fields, state, pos){
    if(! fields) return 0;
    var
     rest = fields[4],
     conv = fields[3],
     kind = fields[2],
     name = fields[1],
     sexp$5 = state[1 + pos];
    a:
    {
     b:
     {
      if(typeof kind !== "number"){
       var default$0 = kind[1];
       if(0 === sexp$5[0])
        var _E_ = caml_call1(default$0, 0);
       else{
        var _F_ = sexp$5[1];
        if(! _F_) break b;
        var _G_ = _F_[2];
        if(! _G_) break b;
        if(_G_[2]) break b;
        var sexp$4 = _G_[1], _E_ = caml_call1(conv, sexp$4);
       }
       var value = _E_;
       break a;
      }
      switch(kind){
        case 0:
         if(0 === sexp$5[0]){var value = caml_call1(conv, _a_); break a;}
         var _q_ = sexp$5[1];
         if(_q_){
          var _r_ = _q_[2];
          if(_r_ && ! _r_[2]){
           var sexp = _r_[1], value = caml_call1(conv, sexp);
           break a;
          }
         }
         break;
        case 1:
         if(0 === sexp$5[0]){
          var
           value =
             parse_value_malformed([2, [0, name, 0]], fields, state, pos);
          break a;
         }
         var _u_ = sexp$5[1];
         if(_u_){
          var _v_ = _u_[2];
          if(_v_ && ! _v_[2]){
           var sexp$0 = _v_[1], value = caml_call1(conv, sexp$0);
           break a;
          }
         }
         break;
        case 2:
         if(0 === sexp$5[0]){var value = [0]; break a;}
         var _w_ = sexp$5[1];
         if(_w_){
          var _x_ = _w_[2];
          if(_x_ && ! _x_[2]){
           var
            sexp$1 = _x_[1],
            value = caml_call2(Sexplib0_Sexp_conv[45], conv, sexp$1);
           break a;
          }
         }
         break;
        case 3:
         if(0 === sexp$5[0]){var value = 0; break a;}
         var _y_ = sexp$5[1];
         c:
         {
          if(_y_ && ! _y_[2]){var _z_ = 1; break c;}
          var _z_ = parse_value_malformed(0, fields, state, pos);
         }
         var value = _z_;
         break a;
        case 4:
         if(0 === sexp$5[0]){var value = 0; break a;}
         var _A_ = sexp$5[1];
         if(_A_){
          var _B_ = _A_[2];
          if(_B_ && ! _B_[2]){
           var
            sexp$2 = _B_[1],
            value = caml_call2(Sexplib0_Sexp_conv[44], conv, sexp$2);
           break a;
          }
         }
         break;
        default:
         if(0 === sexp$5[0]){var value = 0; break a;}
         var _C_ = sexp$5[1];
         if(_C_){
          var _D_ = _C_[2];
          if(_D_ && ! _D_[2]){
           var sexp$3 = _D_[1], value = [0, caml_call1(conv, sexp$3)];
           break a;
          }
         }
      }
     }
     var _s_ = sexp$5[1];
     b:
     {
      if(_s_ && _s_[2]){
       var _t_ = parse_value_malformed([3, [0, sexp$5]], fields, state, pos);
       break b;
      }
      var _t_ = parse_value_malformed(_b_, fields, state, pos);
     }
     var value = _t_;
    }
    return [0, value, parse_values(rest, state, pos + 1 | 0)];
   }
   function parse_spine_malformed
   (malformed, index, extra, seen, state, len, sexps){
    try{
     parse_spine_slow(index, extra, seen, state, len, sexps);
     var malformed$0 = malformed;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Malformed) throw caml_maybe_attach_backtrace(exn, 0);
     var other = exn[2], malformed$0 = combine(malformed, other);
    }
    throw caml_maybe_attach_backtrace([0, Malformed, malformed$0], 1);
   }
   function parse_spine_slow(index, extra, seen, state, len, sexps){
    var sexps$0 = sexps;
    for(;;){
     if(! sexps$0) return;
     var field = sexps$0[1];
     if(1 === field[0]){
      var _l_ = field[1];
      if(_l_){
       var match = _l_[1];
       if(0 === match[0]){
        var
         sexps$2 = sexps$0[2],
         name = match[1],
         i = caml_call1(index, name),
         _m_ = seen <= i ? 1 : 0,
         _n_ = _m_ ? i < len ? 1 : 0 : _m_;
        if(_n_){
         var pos = i - seen | 0;
         if(0 !== state[1 + pos][0])
          return parse_spine_malformed
                  ([1, [0, name, 0]], index, extra, seen, state, len, sexps$2);
         state[1 + pos] = field;
         sexps$0 = sexps$2;
         continue;
        }
        var _o_ = 0 <= i ? 1 : 0, _p_ = _o_ ? i < seen ? 1 : 0 : _o_;
        if(_p_)
         return parse_spine_malformed
                 ([1, [0, name, 0]], index, extra, seen, state, len, sexps$2);
        if(! extra)
         return parse_spine_malformed
                 ([0, [0, name, 0]], index, extra, seen, state, len, sexps$2);
        sexps$0 = sexps$2;
        continue;
       }
      }
     }
     var sexps$1 = sexps$0[2];
     return parse_spine_malformed
             ([3, [0, field]], index, extra, seen, state, len, sexps$1);
    }
   }
   function parse_record_slow(fields, index, extra, seen, sexps){
    var t = fields, unseen = 0;
    for(;;){
     if(! t){
      var
       state = runtime.caml_make_vect(unseen, absent),
       len = seen + unseen | 0;
      parse_spine_slow(index, extra, seen, state, len, sexps);
      return parse_values(fields, state, 0);
     }
     var rest = t[4], acc = unseen + 1 | 0;
     t = rest;
     unseen = acc;
    }
   }
   function parse_spine_fast(fields, index, extra, seen, sexps){
    if(! fields)
     return sexps ? parse_record_slow(fields, index, extra, seen, sexps) : 0;
    var
     rest = fields[4],
     conv = fields[3],
     kind = fields[2],
     name = fields[1];
    if(sexps){
     var _d_ = sexps[1];
     if(0 !== _d_[0]){
      var _e_ = _d_[1];
      if(_e_){
       var match = _e_[1];
       if(0 === match[0]){
        var others = sexps[2], args = _e_[2], atom = match[1];
        if(caml_call2(Stdlib_StringLabels[9], atom, name)){
         if(typeof kind === "number")
          switch(kind){
            case 0:
             if(args && ! args[2]){
              var
               sexp = args[1],
               _f_ =
                 parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, caml_call1(conv, sexp), _f_];
             }
             break;
            case 1:
             if(args && ! args[2]){
              var
               sexp$0 = args[1],
               _g_ =
                 parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, caml_call1(conv, sexp$0), _g_];
             }
             break;
            case 2:
             if(args && ! args[2]){
              var
               sexp$1 = args[1],
               _h_ =
                 parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0,
                      caml_call2(Sexplib0_Sexp_conv[45], conv, sexp$1),
                      _h_];
             }
             break;
            case 3:
             if(! args)
              return [0,
                      1,
                      parse_spine_fast(rest, index, extra, seen + 1 | 0, others)];
             break;
            case 4:
             if(args && ! args[2]){
              var
               sexp$2 = args[1],
               _i_ =
                 parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0,
                      caml_call2(Sexplib0_Sexp_conv[44], conv, sexp$2),
                      _i_];
             }
             break;
            default:
             if(args && ! args[2]){
              var
               sexp$3 = args[1],
               _j_ =
                 parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, [0, caml_call1(conv, sexp$3)], _j_];
             }
          }
         else if(args && ! args[2]){
          var
           sexp$4 = args[1],
           _k_ = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
          return [0, caml_call1(conv, sexp$4), _k_];
         }
         return parse_record_slow(fields, index, extra, seen, sexps);
        }
       }
      }
     }
    }
    return parse_record_slow(fields, index, extra, seen, sexps);
   }
   function record_of_sexps
   (caller,
    context$0,
    fields,
    index_of_field,
    allow_extra_fields,
    create,
    sexps){
    var
     allow_extra_fields$0 =
       allow_extra_fields || 1 - Sexplib0_Sexp_conv[26][1];
    try{
     var
      value =
        parse_spine_fast
         (fields, index_of_field, allow_extra_fields$0, 0, sexps);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Malformed) throw caml_maybe_attach_backtrace(exn, 0);
     var malformed = exn[2];
     if(typeof malformed === "number")
      return caml_call2(Sexplib0_Sexp_conv_error[13], caller, context$0);
     switch(malformed[0]){
       case 0:
        var names = malformed[1];
        return caml_call3
                (Sexplib0_Sexp_conv_error[17], caller, names, context$0);
       case 1:
        var names$0 = malformed[1];
        return caml_call3
                (Sexplib0_Sexp_conv_error[16], caller, names$0, context$0);
       case 2:
        var
         names$1 = malformed[1],
         _c_ =
           caml_call2
            (Stdlib_ListLabels[20],
             function(name){return [0, 1, name];},
             names$1);
        return caml_call1
                (caml_call2(Sexplib0_Sexp_conv_error[19], caller, context$0),
                 _c_);
       default:
        var
         maybe_context = malformed[1],
         context = caml_call2(Stdlib_Option[3], maybe_context, context$0);
        return caml_call2(Sexplib0_Sexp_conv_error[14], caller, context);
     }
    }
    return caml_call1(create, value);
   }
   function record_of_sexp
   (caller, fields, index_of_field, allow_extra_fields, create, sexp){
    if(0 === sexp[0])
     return caml_call2(Sexplib0_Sexp_conv_error[20], caller, sexp);
    var sexps = sexp[1];
    return record_of_sexps
            (caller,
             sexp,
             fields,
             index_of_field,
             allow_extra_fields,
             create,
             sexps);
   }
   var
    Sexplib0_Sexp_conv_record =
      [0, Kind, [0], record_of_sexp, record_of_sexps];
   runtime.caml_register_global
    (10, Sexplib0_Sexp_conv_record, "Sexplib0__Sexp_conv_record");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexpable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib0_Sexpable = [0];
   runtime.caml_register_global(0, Sexplib0_Sexpable, "Sexplib0__Sexpable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib0 = [0];
   runtime.caml_register_global(0, Sexplib0, "Sexplib0");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
