// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Ocsigen_lib_base
//# unitInfo: Requires: CamlinternalLazy, Lwt, Stdlib, Stdlib__List, Stdlib__Map, Stdlib__Set, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst$6 = "..",
    cst$7 = "/",
    caml_equal = runtime.caml_equal,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = cst$7,
    cst$3 = cst$7,
    cst$2 = cst$5,
    cst$0 = cst$5,
    cst$1 = ":",
    cst = cst$5,
    advert =
      "Page generated by OCaml with Ocsigen.\nSee http://ocsigen.org/ and http://caml.inria.fr/ for information",
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Lwt = global_data.Lwt,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    Ocsigen_Internal_Error =
      [248, "Ocsigen_lib_base.Ocsigen_Internal_Error", caml_fresh_oo_id(0)],
    Input_is_too_large =
      [248, "Ocsigen_lib_base.Input_is_too_large", caml_fresh_oo_id(0)],
    Ocsigen_Bad_Request =
      [248, "Ocsigen_lib_base.Ocsigen_Bad_Request", caml_fresh_oo_id(0)],
    Ocsigen_Request_too_long =
      [248, "Ocsigen_lib_base.Ocsigen_Request_too_long", caml_fresh_oo_id(0)],
    symbol_bind = Lwt[6],
    symbol = Lwt[71];
   function symbol$0(___){
    var _$_ = runtime.caml_obj_tag(___);
    if(250 === _$_) return ___[1];
    if(246 !== _$_ && 244 !== _$_) return ___;
    return caml_call1(CamlinternalLazy[2], ___);
   }
   function symbol$1(x, f){return caml_call1(f, x);}
   function symbol$2(f, x){return caml_call1(f, x);}
   function comp(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function curry(f, x, y){return caml_call1(f, [0, x, y]);}
   function uncurry(f, param){
    var y = param[2], x = param[1];
    return caml_call2(f, x, y);
   }
   function fst(param){var a = param[1]; return a;}
   function snd(param){var a = param[2]; return a;}
   function thd(param){var a = param[3]; return a;}
   var Tuple3 = [0, fst, snd, thd];
   function map(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function get(f, param){
    if(! param) return caml_call1(f, 0);
    var x = param[1];
    return x;
   }
   function get$0(a, param){if(! param) return a; var x = param[1]; return x;}
   function iter(f, param){
    if(! param) return 0;
    var x = param[1];
    return caml_call1(f, x);
   }
   function return$0(x){return [0, x];}
   function bind(opt, k){
    if(! opt) return 0;
    var x = opt[1];
    return caml_call1(k, x);
   }
   function to_list(param){
    if(! param) return 0;
    var v = param[1];
    return [0, v, 0];
   }
   function map$0(f, param){
    if(! param) return caml_call1(Lwt[4], 0);
    var x = param[1];
    return caml_call2
            (symbol_bind,
             caml_call1(f, x),
             function(v){return caml_call1(Lwt[4], [0, v]);});
   }
   function get$1(f, param){
    if(! param) return caml_call1(f, 0);
    var x = param[1];
    return caml_call1(Lwt[4], x);
   }
   function get$2(a, param){
    if(! param) return a;
    var x = param[1];
    return caml_call1(Lwt[4], x);
   }
   function iter$0(f, param){
    if(! param) return caml_call1(Lwt[4], 0);
    var x = param[1];
    return caml_call1(f, x);
   }
   function bind$0(opt, k){
    if(! opt) return caml_call1(Lwt[4], 0);
    var x = opt[1];
    return caml_call1(k, x);
   }
   var
    Lwt$0 = [0, map$0, get$1, get$2, iter$0, bind$0],
    Option = [0, map, get, get$0, iter, return$0, bind, to_list, Lwt$0],
    length = Stdlib_List[1],
    compare_lengths = Stdlib_List[2],
    compare_length_with = Stdlib_List[3],
    is_empty = Stdlib_List[4],
    cons = Stdlib_List[5],
    hd = Stdlib_List[6],
    tl = Stdlib_List[7],
    nth = Stdlib_List[8],
    nth_opt = Stdlib_List[9],
    rev = Stdlib_List[10],
    init = Stdlib_List[11],
    append = Stdlib_List[12],
    rev_append = Stdlib_List[13],
    concat = Stdlib_List[14],
    flatten = Stdlib_List[15],
    equal = Stdlib_List[16],
    compare = Stdlib_List[17],
    iter$1 = Stdlib_List[18],
    iteri = Stdlib_List[19],
    map$1 = Stdlib_List[20],
    mapi = Stdlib_List[21],
    rev_map = Stdlib_List[22],
    filter_map = Stdlib_List[23],
    concat_map = Stdlib_List[24],
    fold_left_map = Stdlib_List[25],
    fold_left = Stdlib_List[26],
    fold_right = Stdlib_List[27],
    iter2 = Stdlib_List[28],
    map2 = Stdlib_List[29],
    rev_map2 = Stdlib_List[30],
    fold_left2 = Stdlib_List[31],
    fold_right2 = Stdlib_List[32],
    for_all = Stdlib_List[33],
    exists = Stdlib_List[34],
    for_all2 = Stdlib_List[35],
    exists2 = Stdlib_List[36],
    mem = Stdlib_List[37],
    memq = Stdlib_List[38],
    find = Stdlib_List[39],
    find_opt = Stdlib_List[40],
    find_index = Stdlib_List[41],
    find_map = Stdlib_List[42],
    find_mapi = Stdlib_List[43],
    filter = Stdlib_List[44],
    find_all = Stdlib_List[45],
    filteri = Stdlib_List[46],
    partition = Stdlib_List[47],
    partition_map = Stdlib_List[48],
    assoc = Stdlib_List[49],
    assoc_opt = Stdlib_List[50],
    assq = Stdlib_List[51],
    assq_opt = Stdlib_List[52],
    mem_assoc = Stdlib_List[53],
    mem_assq = Stdlib_List[54],
    remove_assoc = Stdlib_List[55],
    remove_assq = Stdlib_List[56],
    split = Stdlib_List[57],
    combine = Stdlib_List[58],
    sort = Stdlib_List[59],
    stable_sort = Stdlib_List[60],
    fast_sort = Stdlib_List[61],
    sort_uniq = Stdlib_List[62],
    merge = Stdlib_List[63],
    to_seq = Stdlib_List[64],
    of_seq = Stdlib_List[65],
    _a_ = [0, 0, 0],
    cst_Clist_value = "Clist.value";
   function map_filter(f, l){
    var acc = 0, param = l;
    for(;;){
     if(! param) return caml_call1(Stdlib_List[10], acc);
     var q = param[2], t = param[1], match = caml_call1(f, t);
     if(match){
      var r = match[1], acc$0 = [0, r, acc];
      acc = acc$0;
      param = q;
     }
     else
      param = q;
    }
   }
   function remove_first_if_any(a, param){
    if(! param) return 0;
    var b = param[1], l = param[2];
    if(caml_equal(a, b)) return l;
    var l$0 = param[2];
    return [0, b, remove_first_if_any(a, l$0)];
   }
   function remove_first_if_any_q(a, param){
    if(! param) return 0;
    var b = param[1], l = param[2];
    if(a === b) return l;
    var l$0 = param[2];
    return [0, b, remove_first_if_any_q(a, l$0)];
   }
   function remove_first(a, param){
    if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var b = param[1], l = param[2];
    if(caml_equal(a, b)) return l;
    var l$0 = param[2];
    return [0, b, remove_first(a, l$0)];
   }
   function remove_first_q(a, param){
    if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var b = param[1], l = param[2];
    if(a === b) return l;
    var l$0 = param[2];
    return [0, b, remove_first_q(a, l$0)];
   }
   function remove_all(a, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var b = param$0[1], l = param$0[2];
     if(! caml_equal(a, b)){
      var l$0 = param$0[2];
      return [0, b, remove_all(a, l$0)];
     }
     param$0 = l;
    }
   }
   function remove_all_q(a, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var b = param$0[1], l = param$0[2];
     if(a !== b){var l$0 = param$0[2]; return [0, b, remove_all_q(a, l$0)];}
     param$0 = l;
    }
   }
   function remove_all_assoc(a, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var _Z_ = param$0[1], l = param$0[2], b = _Z_[1];
     if(! caml_equal(a, b)){
      var l$0 = param$0[2];
      return [0, _Z_, remove_all_assoc(a, l$0)];
     }
     param$0 = l;
    }
   }
   function remove_all_assoc_q(a, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var _Y_ = param$0[1], l = param$0[2], b = _Y_[1];
     if(a !== b){
      var l$0 = param$0[2];
      return [0, _Y_, remove_all_assoc_q(a, l$0)];
     }
     param$0 = l;
    }
   }
   function last(param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var b = param$0[1];
     if(! param$0[2]) return b;
     var l = param$0[2];
     param$0 = l;
    }
   }
   function assoc_remove(a, param){
    if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var _X_ = param[1], l = param[2], c = _X_[2], b = _X_[1];
    if(caml_equal(a, b)) return [0, c, l];
    var
     l$0 = param[2],
     match = assoc_remove(a, l$0),
     ll = match[2],
     v = match[1];
    return [0, v, [0, _X_, ll]];
   }
   function is_prefix(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return 1;
     if(l2$0){
      var ll2 = l2$0[2], b = l2$0[1], ll1 = l1$0[2], a = l1$0[1];
      if(caml_equal(a, b)){l1$0 = ll1; l2$0 = ll2; continue;}
     }
     return 0;
    }
   }
   function chop(n, xs){
    var n$0 = n, xs$0 = xs;
    for(;;){
     if(0 >= n$0) return xs$0;
     if(! xs$0) return 0;
     var xs$1 = xs$0[2], n$1 = n$0 - 1 | 0;
     n$0 = n$1;
     xs$0 = xs$1;
    }
   }
   function split_at(n, xs){
    if(0 >= n) return [0, 0, xs];
    if(! xs) return _a_;
    var
     xs$0 = xs[2],
     x = xs[1],
     match = split_at(n - 1 | 0, xs$0),
     r = match[2],
     l = match[1];
    return [0, [0, x, l], r];
   }
   function make(c){
    var x = [];
    runtime.caml_update_dummy(x, [0, c, x, x]);
    return x;
   }
   function make$0(c){return make([0, c]);}
   function create(param){return make(0);}
   function insert(p, x){
    var n = p[3];
    p[3] = x;
    x[2] = p;
    x[3] = n;
    n[2] = x;
    return 0;
   }
   function remove(x){
    var p = x[2], n = x[3];
    p[3] = n;
    n[2] = p;
    x[3] = x;
    x[2] = x;
    return 0;
   }
   function in_list(x){return x[3] !== x ? 1 : 0;}
   function is_empty$0(set){return set[3] === set ? 1 : 0;}
   function value(c){
    var match = c[1];
    if(! match) return caml_call1(Stdlib[2], cst_Clist_value);
    var c$0 = match[1];
    return c$0;
   }
   function iter$2(f, node){
    var node$0 = node;
    for(;;){
     var match = node$0[3][1];
     if(! match) return 0;
     var c = match[1];
     caml_call1(f, c);
     var node$1 = node$0[3];
     node$0 = node$1;
    }
   }
   function fold_left$0(f, a, node){
    var a$0 = a, node$0 = node;
    for(;;){
     var match = node$0[3][1];
     if(! match) return a$0;
     var c = match[1], node$1 = node$0[3], a$1 = caml_call2(f, a$0, c);
     a$0 = a$1;
     node$0 = node$1;
    }
   }
   var
    Clist =
      [0,
       make$0,
       create,
       insert,
       remove,
       value,
       in_list,
       is_empty$0,
       iter$2,
       fold_left$0],
    compare$0 = runtime.caml_compare,
    Table = caml_call1(Stdlib_Map[1], [0, compare$0]),
    Int = [0, Table],
    make$1 = Stdlib_String[1],
    init$0 = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat$0 = Stdlib_String[7],
    cat = Stdlib_String[8],
    equal$0 = Stdlib_String[9],
    compare$1 = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map$2 = Stdlib_String[18],
    mapi$0 = Stdlib_String[19],
    fold_left$1 = Stdlib_String[20],
    fold_right$0 = Stdlib_String[21],
    for_all$0 = Stdlib_String[22],
    exists$0 = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter$3 = Stdlib_String[30],
    iteri$0 = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq$0 = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq$0 = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64];
   function remove_spaces(s, beg, endd){
    function find_not_space(s, i, step){
     var i$0 = i;
     for(;;){
      if(endd >= i$0 && i$0 >= beg){
       if(32 !== caml_string_get(s, i$0)) return i$0;
       var i$1 = i$0 + step | 0;
       i$0 = i$1;
       continue;
      }
      return i$0;
     }
    }
    var first = find_not_space(s, beg, 1), last = find_not_space(s, endd, -1);
    return first <= last
            ? caml_call3
              (Stdlib_String[16], s, first, (1 + last | 0) - first | 0)
            : cst;
   }
   function basic_sep(char$0, s){
    try{
     var
      seppos = caml_call2(Stdlib_String[36], s, char$0),
      _U_ =
        caml_call3
         (Stdlib_String[16],
          s,
          seppos + 1 | 0,
          (caml_ml_string_length(s) - seppos | 0) - 1 | 0),
      _V_ = [0, caml_call3(Stdlib_String[16], s, 0, seppos), _U_];
     return _V_;
    }
    catch(_W_){
     var _T_ = caml_wrap_exception(_W_);
     if(_T_[1] === Stdlib[6]) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     throw caml_maybe_attach_backtrace(_T_, 0);
    }
   }
   function sep(char$0, s){
    var
     len = caml_ml_string_length(s),
     seppos = caml_call2(Stdlib_String[36], s, char$0),
     _S_ = remove_spaces(s, seppos + 1 | 0, len - 1 | 0);
    return [0, remove_spaces(s, 0, seppos - 1 | 0), _S_];
   }
   function split$0(opt, char$0, s){
    var multisep = opt ? opt[1] : 0, longueur = caml_ml_string_length(s);
    function aux(deb){
     if(longueur <= deb) return 0;
     try{
      var firstsep = caml_call3(Stdlib_String[32], s, deb, char$0);
      a:
      {
       if(multisep && firstsep === deb){var _P_ = aux(deb + 1 | 0); break a;}
       var
        _Q_ = aux(firstsep + 1 | 0),
        _P_ = [0, remove_spaces(s, deb, firstsep - 1 | 0), _Q_];
      }
      return _P_;
     }
     catch(_R_){
      var _O_ = caml_wrap_exception(_R_);
      if(_O_ === Stdlib[8])
       return [0, remove_spaces(s, deb, longueur - 1 | 0), 0];
      throw caml_maybe_attach_backtrace(_O_, 0);
     }
    }
    return aux(0);
   }
   function may_append(s1, sep, s2){
    if(s2 === cst$5) return s1;
    var _N_ = caml_call2(Stdlib[28], sep, s2);
    return caml_call2(Stdlib[28], s1, _N_);
   }
   function may_concat(s1, sep, s2){
    return s2 !== cst$5
            ? s1
              !== cst$5
              ? caml_call2(Stdlib_String[7], sep, [0, s1, [0, s2, 0]])
              : s2
            : s1;
   }
   function first_diff(s1, s2, n, last){
    try{
     var
      _K_ = caml_string_get(s2, n),
      _L_ =
        caml_string_get(s1, n) === _K_
         ? n === last ? last + 1 | 0 : first_diff(s1, s2, n + 1 | 0, last)
         : n;
     return _L_;
    }
    catch(_M_){
     var _J_ = caml_wrap_exception(_M_);
     if(_J_[1] === Stdlib[6]) return n;
     throw caml_maybe_attach_backtrace(_J_, 0);
    }
   }
   var
    Table$0 = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]),
    Set = caml_call1(Stdlib_Set[1], [0, Stdlib_String[10]]),
    Map = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]),
    String_base =
      [0,
       make$1,
       init$0,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat$0,
       cat,
       equal$0,
       compare$1,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map$2,
       mapi$0,
       fold_left$1,
       fold_right$0,
       for_all$0,
       exists$0,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter$3,
       iteri$0,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq$0,
       to_seqi,
       of_seq$0,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       remove_spaces,
       basic_sep,
       sep,
       split$0,
       may_append,
       may_concat,
       first_diff,
       Table$0,
       Set,
       Map],
    cst_https = "https://",
    cst_http = "http://",
    _b_ = [0, cst$5, 0],
    _c_ = [0, cst$5, 0],
    _d_ = [0, cst$5, 0],
    _e_ = [0, cst$5, 0],
    _f_ = [0, cst$5, 0],
    _g_ = [0, cst$5, 0],
    _h_ = [0, cst$5, 0],
    _i_ = [0, cst$5, 0],
    _j_ = [0, cst$6, [0, cst$5, 0]],
    _k_ = [0, cst$5, 0];
   function make_absolute_url(https, host, port, uri){
    a:
    {
     b:
     {
      if(80 === port && ! https) break b;
      if(https && 443 === port) break b;
      var
       _I_ = caml_call1(Stdlib[33], port),
       _E_ = caml_call2(Stdlib[28], cst$1, _I_);
      break a;
     }
     var _E_ = cst$0;
    }
    var
     _F_ = caml_call2(Stdlib[28], _E_, uri),
     _G_ = caml_call2(Stdlib[28], host, _F_),
     _H_ = https ? cst_https : cst_http;
    return caml_call2(Stdlib[28], _H_, _G_);
   }
   function aux(l){
    var l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var a = l$0[1];
     if(a !== cst$5){
      if(a === cst$6){var l$2 = l$0[2]; l$0 = l$2; continue;}
     }
     else if(! l$0[2]) return l$0;
     var l$1 = l$0[2];
     return [0, a, aux(l$1)];
    }
   }
   function remove_dotdot(l){
    if(! l) return 0;
    if(l[1] !== cst$5) return aux(l);
    var l$0 = l[2];
    return [0, cst$2, aux(l$0)];
   }
   function remove_end_slash(s){
    try{
     var
      _C_ =
        47 === caml_string_get(s, caml_ml_string_length(s) - 1 | 0)
         ? caml_call3
           (Stdlib_String[16], s, 0, caml_ml_string_length(s) - 1 | 0)
         : s;
     return _C_;
    }
    catch(_D_){
     var _B_ = caml_wrap_exception(_D_);
     if(_B_[1] === Stdlib[6]) return s;
     throw caml_maybe_attach_backtrace(_B_, 0);
    }
   }
   function remove_internal_slash(u){
    function aux(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var a = param$0[1];
      if(! param$0[2]) return [0, a, 0];
      if(a !== cst$5){var l = param$0[2]; return [0, a, aux(l)];}
      var l$0 = param$0[2];
      param$0 = l$0;
     }
    }
    if(! u) return 0;
    var l = u[2], a = u[1];
    return [0, a, aux(l)];
   }
   function change_empty_list(l){return l ? l : _b_;}
   function add_end_slash_if_missing(a){
    if(! a) return _c_;
    var a$0 = a[1];
    if(a$0 === cst$5 && ! a[2]) return a;
    var l = a[2];
    return [0, a$0, add_end_slash_if_missing(l)];
   }
   function remove_slash_at_end(param){
    a:
    if(param){
     var a = param[1];
     if(a === cst$5 && ! param[2]) break a;
     var l = param[2];
     return [0, a, remove_slash_at_end(l)];
    }
    return 0;
   }
   function remove_slash_at_beginning(l){
    if(! l) return 0;
    if(l[1] !== cst$5) return l;
    var l$0 = l[2];
    return l$0 ? l$0 : _d_;
   }
   function is_prefix_skip_end_slash(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     a:
     if(l1$0){
      var a = l1$0[1];
      if(a === cst$5 && ! l1$0[2]) break a;
      if(l2$0){
       var ll2 = l2$0[2], b = l2$0[1], ll1 = l1$0[2];
       if(a === b){l1$0 = ll1; l2$0 = ll2; continue;}
      }
      return 0;
     }
     return 1;
    }
   }
   function split_fragment(s){
    try{
     var
      pos = caml_call2(Stdlib_String[36], s, 35),
      _y_ =
        [0,
         caml_call3
          (Stdlib_String[16],
           s,
           pos + 1 | 0,
           (caml_ml_string_length(s) - 1 | 0) - pos | 0)],
      _z_ = [0, caml_call3(Stdlib_String[16], s, 0, pos), _y_];
     return _z_;
    }
    catch(_A_){
     var _x_ = caml_wrap_exception(_A_);
     if(_x_ === Stdlib[8]) return [0, s, 0];
     throw caml_maybe_attach_backtrace(_x_, 0);
    }
   }
   function join_path(l){
    if(l && l[1] === cst$5 && ! l[2]) return cst$4;
    return caml_call2(Stdlib_String[7], cst$3, l);
   }
   function split_path(s){
    var l = caml_ml_string_length(s);
    function collect_words(k){
     try{var _v_ = caml_call3(Stdlib_String[32], s, k, 47), k$0 = _v_;}
     catch(_w_){
      var _u_ = caml_wrap_exception(_w_);
      if(_u_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_u_, 0);
      var k$0 = l;
     }
     var word = caml_call3(Stdlib_String[16], s, k, k$0 - k | 0);
     return l <= k$0 ? [0, word, 0] : [0, word, collect_words(k$0 + 1 | 0)];
    }
    var other = collect_words(0);
    if(other && other[1] === cst$5){
     var _t_ = other[2];
     if(! _t_) return 0;
     if(_t_[1] === cst$5 && ! _t_[2]) return _e_;
    }
    return other;
   }
   function norm_path(l){
    function remove_slash_slash(l, first){
     var l$0 = l, first$0 = first;
     for(;;){
      if(! l$0) return 0;
      var x = l$0[1];
      if(x === cst$5){
       var l$2 = l$0[2];
       if(! l$2) return _g_;
       if(l$2[1] === cst$5 && ! l$2[2] && first$0) return _f_;
       if(! first$0){l$0 = l$2; first$0 = 0; continue;}
      }
      var l$1 = l$0[2];
      return [0, x, remove_slash_slash(l$1, 0)];
     }
    }
    function remove_dot(l, first){
     var l$0 = l, first$0 = first;
     for(;;){
      if(! l$0) return 0;
      var x = l$0[1];
      if(x !== "."){var l$1 = l$0[2]; return [0, x, remove_dot(l$1, 0)];}
      var match = l$0[2];
      a:
      if(match){
       var x$0 = match[1];
       if(x$0 === cst$5 && ! match[2]) break a;
       var l$2 = match[2], l$3 = [0, x$0, l$2];
       l$0 = l$3;
       first$0 = 0;
       continue;
      }
      return first$0 ? 0 : _h_;
     }
    }
    function remove_dot_dot_once(l, first){
     if(! l) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var x = l[1], _s_ = l[2];
     if(_s_ && _s_[1] === cst$6){
      var l$1 = _s_[2];
      if(! l$1 && x !== cst$5 && x !== cst$6 && ! first) return _i_;
      if(x !== cst$5 && x !== cst$6) return l$1;
     }
     var l$0 = l[2];
     return [0, x, remove_dot_dot_once(l$0, 0)];
    }
    function remove_dot_dot(l){
     try{
      var l$0 = remove_dot_dot_once(l, 1), _q_ = remove_dot_dot(l$0);
      return _q_;
     }
     catch(_r_){
      var _p_ = caml_wrap_exception(_r_);
      if(_p_ === Stdlib[8]) return l;
      throw caml_maybe_attach_backtrace(_p_, 0);
     }
    }
    var l$0 = remove_dot_dot(remove_dot(remove_slash_slash(l, 1), 1));
    if(l$0){
     var _n_ = l$0[1];
     if(_n_ !== cst$5){
      if(_n_ === cst$6 && ! l$0[2]) return _j_;
     }
     else{
      var _o_ = l$0[2];
      if(_o_ && _o_[1] === cst$5 && ! _o_[2]) return _k_;
     }
    }
    return l$0;
   }
   var
    Url_base =
      [0,
       make_absolute_url,
       remove_dotdot,
       remove_end_slash,
       remove_internal_slash,
       change_empty_list,
       add_end_slash_if_missing,
       remove_slash_at_end,
       remove_slash_at_beginning,
       is_prefix_skip_end_slash,
       split_fragment,
       join_path,
       split_path,
       norm_path],
    debug = Stdlib[53],
    Ocsigen_lib_base =
      [0,
       Ocsigen_Internal_Error,
       Input_is_too_large,
       Ocsigen_Bad_Request,
       Ocsigen_Request_too_long,
       symbol_bind,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       comp,
       curry,
       uncurry,
       Tuple3,
       function(_m_){return _m_;},
       function(_l_){return _l_;},
       advert,
       Option,
       [0,
        length,
        compare_lengths,
        compare_length_with,
        is_empty,
        cons,
        hd,
        tl,
        nth,
        nth_opt,
        rev,
        init,
        append,
        rev_append,
        concat,
        flatten,
        equal,
        compare,
        iter$1,
        iteri,
        map$1,
        mapi,
        rev_map,
        filter_map,
        concat_map,
        fold_left_map,
        fold_left,
        fold_right,
        iter2,
        map2,
        rev_map2,
        fold_left2,
        fold_right2,
        for_all,
        exists,
        for_all2,
        exists2,
        mem,
        memq,
        find,
        find_opt,
        find_index,
        find_map,
        find_mapi,
        filter,
        find_all,
        filteri,
        partition,
        partition_map,
        assoc,
        assoc_opt,
        assq,
        assq_opt,
        mem_assoc,
        mem_assq,
        remove_assoc,
        remove_assq,
        split,
        combine,
        sort,
        stable_sort,
        fast_sort,
        sort_uniq,
        merge,
        to_seq,
        of_seq,
        map_filter,
        last,
        assoc_remove,
        remove_first_if_any,
        remove_first_if_any_q,
        remove_first,
        remove_first_q,
        remove_all,
        remove_all_q,
        remove_all_assoc,
        remove_all_assoc_q,
        is_prefix,
        chop,
        split_at],
       Clist,
       Int,
       String_base,
       Url_base,
       debug];
   runtime.caml_register_global(58, Ocsigen_lib_base, "Ocsigen_lib_base");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
