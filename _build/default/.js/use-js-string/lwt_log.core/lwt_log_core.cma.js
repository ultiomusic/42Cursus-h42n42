// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Lwt_log_rules
//# unitInfo: Requires: Stdlib__Array, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "*",
    ocaml_lex_tables =
      [0,
       "\0\0\xfd\xff\x02\0r\0\xe4\0\x04\0t\0V\x01\xc8\x01:\x02t\x02\0\0\xfa\x02 \0\xfe\xff\xff\xff\xe6\0",
       "\x03\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff",
       "\x02\0\0\0\x02\0\x02\0\x02\0\xff\xff\x02\0\x02\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x05\0\0\0\0\0\0\0\0\0\x10\0\x10\0\0\0\0\0\0\0\0\0\x06\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\x10\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x0f\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x10\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\xff\xff\0\0\x04\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\x0f\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x02\0\x02\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x04\0\xff\xff\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\x10\0\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\xff\xff\x10\0\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\x02\0\x04\0\x06\0\0\0\b\0\n\0\f\0|\0\0\0\0\0\xee\0\0\0\0\0\0\0\0\0",
       "\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0'\0'\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\x01\0\0\0\x01\0\x01\0\x01\0\0\0\x01\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x17\0\x17\0$\0$\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x17\0\0\0$\0\0\0$\0\x14\0\0\0\t\0\0\0\t\0\0\0\0\0\0\0\x1a\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x02\0\x02\0\x03\0\x03\0\x04\0\x04\0\x06\0\x06\0\x07\0\x07\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\x04\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\b\0\x05\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\x04\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\xff\x05\xff\xff\x04\xff\x03\xff\xff\x06\xff\xff\0\x04\xff\x03\xff\x04\xff\xff\x06\x05\xff\x05\x06\xff\x05\x06\x06\xff\xff\x07\xff\x06\xff\xff\x07\xff\xff\0\x03\x01\x05\x02\x07\xff"],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Parse_error =
      [248, "Lwt_log_rules.Parse_error", runtime.caml_fresh_oo_id(0)];
   function rules(lexbuf){
    lexbuf[10] = runtime.caml_make_vect(8, -1);
    var _d_ = lexbuf[6];
    caml_check_bound(lexbuf[10], 4)[5] = _d_;
    var _e_ = lexbuf[6];
    caml_check_bound(lexbuf[10], 3)[4] = _e_;
    var ocaml_lex_state = 0;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[21], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
    switch(ocaml_lex_state$0){
      case 0:
       var
        _f_ = caml_check_bound(lexbuf[10], 1)[2],
        _g_ = caml_check_bound(lexbuf[10], 0)[1],
        pattern = caml_call3(Stdlib_Lexing[16], lexbuf, _g_, _f_),
        _h_ = lexbuf[6],
        _i_ = caml_check_bound(lexbuf[10], 2)[3],
        level = caml_call3(Stdlib_Lexing[16], lexbuf, _i_, _h_);
       return [0, [0, pattern, level], semi_colon_and_rules(lexbuf)];
      case 1:
       var
        _j_ = lexbuf[6],
        _k_ = caml_check_bound(lexbuf[10], 0)[1],
        level$0 = caml_call3(Stdlib_Lexing[16], lexbuf, _k_, _j_);
       return [0, [0, cst, level$0], semi_colon_and_rules(lexbuf)];
      case 2:
       return 0;
      default: throw caml_maybe_attach_backtrace(Parse_error, 1);
    }
   }
   function semi_colon_and_rules(lexbuf){
    var ocaml_lex_state = 13;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return rules(lexbuf);
        case 1:
         return 0;
        default: throw caml_maybe_attach_backtrace(Parse_error, 1);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function rules$0(buf){
    try{var _b_ = [0, rules(buf)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_ === Parse_error) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var Lwt_log_rules = [0, rules$0];
   runtime.caml_register_global(4, Lwt_log_rules, "Lwt_log_rules");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_log_core
//# unitInfo: Requires: CamlinternalLazy, Lwt, Lwt_list, Lwt_log_rules, Stdlib, Stdlib__Buffer, Stdlib__Hashtbl, Stdlib__Lazy, Stdlib__Lexing, Stdlib__Printexc, Stdlib__Printf, Stdlib__String, Stdlib__Sys, Stdlib__Weak
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Invalid_log_rules$1 = "Invalid log rules",
    cst_Lwt_log = "Lwt_log: ",
    cst_debug$0 = "debug",
    cst_error$0 = "error",
    cst_fatal$0 = "fatal",
    cst_info$0 = "info",
    cst_notice$0 = "notice",
    cst_warning$0 = "warning",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = ": ",
    file = "<unknown>",
    fmt =
      [0,
       [11, "invalid log level (", [2, 0, [12, 41, 0]]],
       "invalid log level (%s)"],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Lwt = global_data.Lwt,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Lwt_list = global_data.Lwt_list,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Lwt_log_rules = global_data.Lwt_log_rules,
    Stdlib_Weak = global_data.Stdlib__Weak,
    cst_debug = cst_debug$0,
    cst_info = cst_info$0,
    cst_notice = cst_notice$0,
    cst_warning = cst_warning$0,
    cst_error = cst_error$0,
    cst_fatal = cst_fatal$0,
    _c_ = [0, 3],
    _d_ = [0, 2],
    _e_ = [0, 1],
    _f_ = [0, 5],
    _g_ = [0, 4],
    _h_ = [0, 0],
    _j_ = [0, cst$1, 0];
   function string_of_level(param){
    switch(param){
      case 0:
       return cst_debug;
      case 1:
       return cst_info;
      case 2:
       return cst_notice;
      case 3:
       return cst_warning;
      case 4:
       return cst_error;
      default: return cst_fatal;
    }
   }
   function level_of_string(str){
    var str$0 = caml_call1(Stdlib_String[27], str);
    return str$0 !== cst_debug$0
            ? str$0
              !== cst_error$0
              ? str$0
                !== cst_fatal$0
                ? str$0
                  !== cst_info$0
                  ? str$0
                    !== cst_notice$0
                    ? str$0 !== cst_warning$0 ? 0 : _c_
                    : _d_
                  : _e_
                : _f_
              : _g_
            : _h_;
   }
   function sub_equal(str, ofs, patt){
    var
     str_len = caml_ml_string_length(str),
     patt_len = caml_ml_string_length(patt),
     _aq_ = (ofs + patt_len | 0) <= str_len ? 1 : 0;
    if(! _aq_) return _aq_;
    var ofs$0 = ofs, ofs_patt = 0;
    for(;;){
     var _am_ = ofs_patt === patt_len ? 1 : 0;
     if(_am_)
      var _an_ = _am_;
     else{
      var
       _ao_ = caml_string_get(patt, ofs_patt),
       _ap_ = caml_string_get(str, ofs$0) === _ao_ ? 1 : 0;
      if(_ap_){
       var ofs_patt$0 = ofs_patt + 1 | 0, ofs$1 = ofs$0 + 1 | 0;
       ofs$0 = ofs$1;
       ofs_patt = ofs_patt$0;
       continue;
      }
      var _an_ = _ap_;
     }
     return _an_;
    }
   }
   function split(pattern){
    var len = caml_ml_string_length(pattern);
    function loop(ofs){
     if(ofs === len) return _j_;
     try{
      var
       _ak_ = [0, caml_call3(Stdlib_String[32], pattern, ofs, 42)],
       match = _ak_;
     }
     catch(_al_){
      var _ai_ = caml_wrap_exception(_al_);
      if(_ai_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ai_, 0);
      var match = 0;
     }
     if(! match)
      return [0,
              caml_call3(Stdlib_String[16], pattern, ofs, len - ofs | 0),
              0];
     var ofs$0 = match[1], _aj_ = loop(ofs$0 + 1 | 0);
     return [0,
             caml_call3(Stdlib_String[16], pattern, ofs, ofs$0 - ofs | 0),
             _aj_];
    }
    return loop(0);
   }
   var
    rules = [0, 0],
    _a_ = [0, [12, 10, [10, 0]], "\n%!"],
    _b_ = [0, [11, cst_Lwt_log, 0], cst_Lwt_log],
    cst_Invalid_log_rules = cst_Invalid_log_rules$1,
    cst_Invalid_log_rules$0 = cst_Invalid_log_rules$1,
    _k_ = [0, [11, "Invalid log rules\n", [10, 0]], "Invalid log rules\n%!"],
    dummy = 0;
   function load_rules(str, fail_on_error){
    function loop(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var
       rest = param$0[2],
       match = param$0[1],
       level_str = match[2],
       pattern = match[1],
       pattern$0 = split(pattern),
       level = level_of_string(level_str);
      if(level){
       var level$0 = level[1];
       return [0, [0, pattern$0, level$0], loop(rest)];
      }
      if(fail_on_error)
       throw caml_maybe_attach_backtrace
              ([0, Stdlib[7], cst_Invalid_log_rules], 1);
      var
       _ag_ = caml_call2(Stdlib[98], fmt, _a_),
       _ah_ = caml_call2(Stdlib[98], _b_, _ag_);
      caml_call1(caml_call1(Stdlib_Printf[3], _ah_), level_str);
      param$0 = rest;
     }
    }
    var
     _af_ = caml_call2(Stdlib_Lexing[3], 0, str),
     match = caml_call1(Lwt_log_rules[1], _af_);
    if(match){var l = match[1]; rules[1] = loop(l); return;}
    if(fail_on_error)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[7], cst_Invalid_log_rules$0], 1);
    return caml_call1(Stdlib_Printf[3], _k_);
   }
   var
    cst_backtrace = "\nbacktrace:\n",
    _m_ =
      [0,
       [11, "Lwt_log_core.render: unknown variable ", [3, 0, 0]],
       "Lwt_log_core.render: unknown variable %S"],
    _i_ = [0, cst$1, 0],
    cst_main = "main",
    cst_Lwt_log_core_Logger_closed = "Lwt_log_core.Logger_closed";
   try{var _n_ = [0, runtime.caml_sys_getenv("LWT_LOG")], match = _n_;}
   catch(_ae_){
    var _l_ = caml_wrap_exception(_ae_);
    if(_l_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_l_, 0);
    var match = 0;
   }
   if(match){var str = match[1]; load_rules(str, 0);}
   function equal(a, b){return a[1] === b[1] ? 1 : 0;}
   function hash(s){return caml_call1(Stdlib_Hashtbl[28], s[1]);}
   var
    Sections = caml_call1(Stdlib_Weak[9], [0, equal, hash]),
    sections = caml_call1(Sections[1], 32);
   function find_level(string){
    var param = rules[1];
    for(;;){
     if(! param) return 2;
     var
      rest = param[2],
      match = param[1],
      level = match[2],
      pattern$0 = match[1],
      length = caml_ml_string_length(string);
     let length$0 = length;
     var
      loop =
        function(offset, pattern){
         if(offset === length$0){
          var
           ___ = 0 === pattern ? 1 : 0,
           _$_ = ___ || runtime.caml_equal(pattern, _i_);
          return _$_;
         }
         if(! pattern) return 0;
         var
          pattern$0 = pattern[2],
          literal = pattern[1],
          literal_length = caml_ml_string_length(literal),
          max_offset = length$0 - literal_length | 0,
          offset$0 = offset;
         for(;;){
          var _aa_ = offset$0 <= max_offset ? 1 : 0;
          if(_aa_){
           var
            _ab_ = sub_equal(string, offset$0, literal),
            _ac_ =
              _ab_ ? loop$0(offset$0 + literal_length | 0, pattern$0) : _ab_;
           if(! _ac_){
            var offset$1 = offset$0 + 1 | 0;
            offset$0 = offset$1;
            continue;
           }
           var _ad_ = _ac_;
          }
          else
           var _ad_ = _aa_;
          return _ad_;
         }
        };
     let loop$0 = loop;
     if(pattern$0)
      var
       pattern = pattern$0[2],
       literal = pattern$0[1],
       _Y_ = sub_equal(string, 0, literal),
       _Z_ = _Y_ ? loop(caml_ml_string_length(literal), pattern) : _Y_;
     else
      var _Z_ = string === cst$1 ? 1 : 0;
     if(_Z_) return level;
     param = rest;
    }
   }
   function recompute_levels(param){
    return caml_call2
            (Sections[10],
             function(section){
              var
               _W_ = 1 - section[3],
               _X_ = _W_ ? (section[2] = find_level(section[1]), 0) : _W_;
              return _X_;
             },
             sections);
   }
   function make(name){
    var section = [0, name, 2, 0];
    try{var _U_ = caml_call2(Sections[6], sections, section); return _U_;}
    catch(_V_){
     var _T_ = caml_wrap_exception(_V_);
     if(_T_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_T_, 0);
     section[2] = find_level(name);
     caml_call2(Sections[4], sections, section);
     return section;
    }
   }
   function name(section){return section[1];}
   var main = make(cst_main);
   function level(section){return section[2];}
   function set_level(section, level){
    section[2] = level;
    section[3] = 1;
    return 0;
   }
   function reset_level(section){
    var
     _R_ = section[3],
     _S_ =
       _R_ ? (section[3] = 0, section[2] = find_level(section[1]), 0) : _R_;
    return _S_;
   }
   function load_rules$0(opt, str){
    var fail_on_error = opt ? opt[1] : 0;
    load_rules(str, fail_on_error);
    return recompute_levels(0);
   }
   function add_rule(pattern, level){
    var _Q_ = rules[1];
    rules[1] = [0, [0, split(pattern), level], _Q_];
    return recompute_levels(0);
   }
   function append_rule(pattern, level){
    var _P_ = [0, [0, split(pattern), level], 0];
    rules[1] = caml_call2(Stdlib[37], rules[1], _P_);
    return recompute_levels(0);
   }
   function reset_rules(param){rules[1] = 0; return recompute_levels(0);}
   var
    Logger_closed =
      [248, cst_Lwt_log_core_Logger_closed, runtime.caml_fresh_oo_id(0)];
   function close(logger){
    logger[1] = 1;
    var _N_ = logger[3], _O_ = runtime.caml_obj_tag(_N_);
    if(250 === _O_) return _N_[1];
    if(246 !== _O_ && 244 !== _O_) return _N_;
    return caml_call1(CamlinternalLazy[2], _N_);
   }
   function make$0(output, close){
    return [0, 0, output, caml_call1(Stdlib_Lazy[6], close)];
   }
   function broadcast(loggers){
    return make$0
            (function(section, level, lines){
              return caml_call2
                      (Lwt_list[2],
                       function(logger){
                        return caml_call3(logger[2], section, level, lines);
                       },
                       loggers);
             },
             Lwt[4]);
   }
   function dispatch(f){
    return make$0
            (function(section, level, lines){
              return caml_call3
                      (caml_call2(f, section, level)[2], section, level, lines);
             },
             Lwt[4]);
   }
   var location_key = caml_call1(Lwt[49], 0);
   function render(buffer, template, section, level, message){
    var match = caml_call1(Lwt[50], location_key);
    if(match)
     var loc = match[1], column = loc[3], line = loc[2], file$0 = loc[1];
    else
     var column = -1, line = -1, file$0 = file;
    return caml_call3
            (Stdlib_Buffer[20],
             buffer,
             function(var$0){
              return var$0 !== "level"
                      ? var$0
                        !== "loc-column"
                        ? var$0
                          !== "loc-file"
                          ? var$0
                            !== "loc-line"
                            ? var$0
                              !== "message"
                              ? var$0
                                !== "section"
                                ? caml_call3(Stdlib_Printf[10], Stdlib[1], _m_, var$0)
                                : section[1]
                              : message
                            : caml_call1(Stdlib[33], line)
                          : file$0
                        : caml_call1(Stdlib[33], column)
                      : string_of_level(level);
             },
             template);
   }
   var
    null$0 = make$0(function(section, level, lines){return Lwt[36];}, Lwt[4]),
    default$0 = [0, null$0];
   function split$0(str){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(str)],
     _J_ = caml_ml_string_length(str) - 1 | 0;
    if(_J_ >= 0){
     var i = _J_;
     for(;;){
      if(runtime.caml_string_unsafe_get(str, i) === 10){
       var _L_ = r[1];
       r[1] =
        [0,
         caml_call3(Stdlib_String[16], str, i + 1 | 0, (j[1] - i | 0) - 1 | 0),
         _L_];
       j[1] = i;
      }
      var _M_ = i - 1 | 0;
      if(0 === i) break;
      i = _M_;
     }
    }
    var _K_ = r[1];
    return [0, caml_call3(Stdlib_String[16], str, 0, j[1]), _K_];
   }
   function log(exn, opt, location, logger, level, message){
    var section = opt ? opt[1] : main;
    if(logger)
     var logger$0 = logger[1], logger$1 = logger$0;
    else
     var logger$1 = default$0[1];
    if(logger$1[1]) return caml_call1(Lwt[5], Logger_closed);
    if(section[2] > level) return Lwt[36];
    if(! exn)
     return caml_call3
             (Lwt[51],
              location_key,
              location,
              function(param){
               var _I_ = split$0(message);
               return caml_call3(logger$1[2], section, level, _I_);
              });
    var
     exn$0 = exn[1],
     bt =
       caml_call1(Stdlib_Printexc[8], 0)
        ? caml_call1(Stdlib_Printexc[6], 0)
        : cst$0,
     _E_ = caml_call1(Stdlib_Printexc[1], exn$0),
     _F_ = caml_call2(Stdlib[28], cst, _E_),
     message$0 = caml_call2(Stdlib[28], message, _F_);
    if(0 === caml_ml_string_length(bt))
     var message$1 = message$0;
    else
     var
      _G_ = caml_call2(Stdlib[28], cst_backtrace, bt),
      message$1 = caml_call2(Stdlib[28], message$0, _G_);
    return caml_call3
            (Lwt[51],
             location_key,
             location,
             function(param){
              var _H_ = split$0(message$1);
              return caml_call3(logger$1[2], section, level, _H_);
             });
   }
   function log_f(exn, section, location, logger, level, format){
    return caml_call2
            (Stdlib_Printf[10],
             function(_D_){
              return log(exn, section, location, logger, level, _D_);
             },
             format);
   }
   function ign_log(exn, section, location, logger, level, message){
    try{
     log(exn, section, location, logger, level, message);
     var _B_ = 0;
     return _B_;
    }
    catch(_C_){return 0;}
   }
   function ign_log_f(exn, section, location, logger, level, format){
    return caml_call2
            (Stdlib_Printf[10],
             function(_A_){
              return ign_log(exn, section, location, logger, level, _A_);
             },
             format);
   }
   function debug(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 0, msg);
   }
   function debug_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_z_){return debug(exn, section, location, logger, _z_);},
             fmt);
   }
   function info(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 1, msg);
   }
   function info_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_y_){return info(exn, section, location, logger, _y_);},
             fmt);
   }
   function notice(exn, section, location, logger, msg){return log(exn, section, location, logger, 2, msg);
   }
   function notice_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_x_){
              return notice(exn, section, location, logger, _x_);
             },
             fmt);
   }
   function warning(exn, section, location, logger, msg){return log(exn, section, location, logger, 3, msg);
   }
   function warning_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_w_){
              return warning(exn, section, location, logger, _w_);
             },
             fmt);
   }
   function error(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 4, msg);
   }
   function error_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_v_){return error(exn, section, location, logger, _v_);},
             fmt);
   }
   function fatal(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 5, msg);
   }
   function fatal_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_u_){return fatal(exn, section, location, logger, _u_);},
             fmt);
   }
   function ign_debug(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 0, msg);
   }
   function ign_debug_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_t_){
              return ign_debug(exn, section, location, logger, _t_);
             },
             fmt);
   }
   function ign_info(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 1, msg);
   }
   function ign_info_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_s_){
              return ign_info(exn, section, location, logger, _s_);
             },
             fmt);
   }
   function ign_notice(exn, section, location, logger, msg){return ign_log(exn, section, location, logger, 2, msg);
   }
   function ign_notice_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_r_){
              return ign_notice(exn, section, location, logger, _r_);
             },
             fmt);
   }
   function ign_warning(exn, section, location, logger, msg){return ign_log(exn, section, location, logger, 3, msg);
   }
   function ign_warning_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_q_){
              return ign_warning(exn, section, location, logger, _q_);
             },
             fmt);
   }
   function ign_error(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 4, msg);
   }
   function ign_error_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_p_){
              return ign_error(exn, section, location, logger, _p_);
             },
             fmt);
   }
   function ign_fatal(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 5, msg);
   }
   function ign_fatal_f(exn, section, location, logger, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(_o_){
              return ign_fatal(exn, section, location, logger, _o_);
             },
             fmt);
   }
   var
    Lwt_log_core =
      [0,
       string_of_level,
       level_of_string,
       load_rules$0,
       add_rule,
       append_rule,
       reset_rules,
       log,
       log_f,
       ign_log,
       ign_log_f,
       debug,
       debug_f,
       ign_debug,
       ign_debug_f,
       info,
       info_f,
       ign_info,
       ign_info_f,
       notice,
       notice_f,
       ign_notice,
       ign_notice_f,
       warning,
       warning_f,
       ign_warning,
       ign_warning_f,
       error,
       error_f,
       ign_error,
       ign_error_f,
       fatal,
       fatal_f,
       ign_fatal,
       ign_fatal_f,
       [0, make, name, main, level, set_level, reset_level],
       render,
       location_key,
       Logger_closed,
       make$0,
       close,
       default$0,
       broadcast,
       dispatch,
       null$0];
   runtime.caml_register_global(54, Lwt_log_core, "Lwt_log_core");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
