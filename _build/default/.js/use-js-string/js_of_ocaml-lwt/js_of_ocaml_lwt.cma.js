// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Js_of_ocaml_lwt__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Js_of_ocaml_lwt = [0],
    Js_of_ocaml_lwt$0 = [0, Js_of_ocaml_lwt];
   runtime.caml_register_global(0, Js_of_ocaml_lwt$0, "Js_of_ocaml_lwt__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Import
//# unitInfo: Requires: Stdlib__Char, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare$0 = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal$0 = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$1 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$1(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       seeded_hash$0,
       hash$0,
       equal$1],
    symbol$5 = Int_replace_polymorphic_compar[1],
    symbol$6 = Int_replace_polymorphic_compar[2],
    symbol$7 = Int_replace_polymorphic_compar[3],
    symbol$8 = Int_replace_polymorphic_compar[4],
    symbol$9 = Int_replace_polymorphic_compar[5],
    symbol$10 = Int_replace_polymorphic_compar[6],
    compare$2 = Int_replace_polymorphic_compar[7],
    equal$2 = Int_replace_polymorphic_compar[8],
    max$0 = Int_replace_polymorphic_compar[9],
    min$0 = Int_replace_polymorphic_compar[10],
    Js_of_ocaml_lwt_Import =
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
   runtime.caml_register_global
    (2, Js_of_ocaml_lwt_Import, "Js_of_ocaml_lwt__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_xmlHttpRequest
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__File, Js_of_ocaml__Form, Js_of_ocaml__Js, Js_of_ocaml__Url, Js_of_ocaml__XmlHttpRequest, Js_of_ocaml_lwt__Import, Lwt, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = "&",
    cst$7 = "=",
    cst_GET$1 = "GET",
    cst_POST$3 = "POST",
    cst_lib_lwt_lwt_xmlHttpRequest = "lib/lwt/lwt_xmlHttpRequest.ml",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    c = "application/x-www-form-urlencoded",
    cst$3 = cst$5,
    cst$4 = "?",
    cst$2 = cst$6,
    cst = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$5,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Form = global_data.Js_of_ocaml__Form,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Assert_failure = global_data.Assert_failure,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Wrong_headers =
      [248,
       "Js_of_ocaml_lwt__Lwt_xmlHttpRequest.Wrong_headers",
       runtime.caml_fresh_oo_id(0)],
    _a_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 66, 29],
    _b_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 74, 29],
    _c_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 82, 29],
    _d_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 90, 29],
    _e_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 98, 29],
    cst_PATCH = "PATCH",
    cst_POST = cst_POST$3,
    cst_HEAD = "HEAD",
    cst_DELETE = "DELETE",
    cst_GET = cst_GET$1,
    cst_PUT = "PUT",
    cst_OPTIONS = "OPTIONS",
    cst_POST$0 = cst_POST$3,
    cst_POST$1 = cst_POST$3,
    cst_POST$2 = cst_POST$3,
    cst_GET$0 = cst_GET$1;
   function perform_raw
   (_l_,
    content_type,
    _k_,
    opt,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    response_type,
    url){
    var
     headers = _l_ ? _l_[1] : 0,
     get_args = _k_ ? _k_[1] : 0,
     check_headers = opt ? opt[1] : function(_F_, param){return 1;};
    if(contents){
     var c$0 = contents[1], _m_ = c$0[1];
     if(440620227 === _m_){
      var
       args = c$0[2],
       only_strings =
         caml_call2
          (Stdlib_List[33],
           function(x){
            var _E_ = x[2];
            if(typeof _E_ !== "number" && -976970511 === _E_[1]) return 1;
            return 0;
           },
           args),
       form_contents =
         only_strings
          ? [0, 891486873, [0, 0]]
          : caml_call1(Js_of_ocaml_Form[6], 0);
      caml_call2
       (Stdlib_List[18],
        function(param){
         var value = param[2], name = param[1];
         return caml_call2
                 (Js_of_ocaml_Form[3], form_contents, [0, name, value]);
        },
        args);
      var _n_ = [0, -836918635, form_contents];
     }
     else if(737307005 <= _m_)
      var b = c$0[2], _n_ = [0, 737307005, b];
     else
      var _n_ = c$0;
     var contents$0 = [0, _n_];
    }
    else
     var contents$0 = 0;
    function override_method$0(m){
     if(! override_method) return m;
     var v = override_method[1];
     return 492530731 <= v
             ? 891112544
               <= v
               ? 994393768 <= v ? cst_PATCH : cst_POST
               : 801894688 <= v ? cst_HEAD : cst_DELETE
             : 3546230 === v ? cst_GET : 3997359 <= v ? cst_PUT : cst_OPTIONS;
    }
    if(contents$0){
     var match = contents$0[1];
     if(-836918635 === match[1]){
      var form = match[2];
      if(891486873 <= form[1])
       var
        content_type$0 = content_type || [0, c],
        content_type$1 = content_type$0,
        method = override_method$0(cst_POST$0);
      else
       var
        content_type$1 = content_type,
        method = override_method$0(cst_POST$1);
     }
     else
      var
       content_type$1 = content_type,
       method = override_method$0(cst_POST$2);
    }
    else
     var
      method$0 = override_method$0(cst_GET$0),
      content_type$1 = content_type,
      method = method$0;
    if(0 === get_args)
     var url$0 = url;
    else{
     var _q_ = caml_call1(Js_of_ocaml_Url[6], get_args);
     try{
      caml_call2(Js_of_ocaml_lwt_Import[3][35], url, 63);
      var _j_ = 1, _r_ = _j_;
     }
     catch(_D_){
      var _i_ = caml_wrap_exception(_D_);
      if(_i_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_i_, 0);
      var _r_ = 0;
     }
     var
      _s_ = _r_ ? cst$3 : cst$4,
      _t_ = caml_call2(Stdlib[28], _s_, _q_),
      url$0 = caml_call2(Stdlib[28], url, _t_);
    }
    var
     match$0 = caml_call1(Lwt[22], 0),
     w = match$0[2],
     res = match$0[1],
     req = caml_call1(Js_of_ocaml_XmlHttpRequest[1], 0),
     t11 = Js_of_ocaml_Js[7],
     t10 = caml_jsstring_of_string(url$0),
     t9 = caml_jsstring_of_string(method);
    req.open(t9, t10, t11);
    if(override_mime_type){
     var
      mime_type = override_mime_type[1],
      t13 = caml_jsstring_of_string(mime_type);
     req.overrideMimeType(t13);
    }
    switch(response_type){
      case 0:
       req.responseType = "arraybuffer"; break;
      case 1:
       req.responseType = "blob"; break;
      case 2:
       req.responseType = "document"; break;
      case 3:
       req.responseType = "json"; break;
      case 4:
       req.responseType = "text"; break;
      default: req.responseType = cst$6;
    }
    if(with_credentials){
     var c$1 = with_credentials[1], t27 = ! ! c$1;
     req.withCredentials = t27;
    }
    if(content_type$1){
     var
      content_type$2 = content_type$1[1],
      t30 = caml_jsstring_of_string(content_type$2);
     req.setRequestHeader("Content-type", t30);
    }
    caml_call2
     (Stdlib_List[18],
      function(param){
       var
        v = param[2],
        n = param[1],
        t33 = caml_jsstring_of_string(v),
        t32 = caml_jsstring_of_string(n);
       return req.setRequestHeader(t32, t33);
      },
      headers);
    function headers$0(s){
     var
      t35 = runtime.caml_jsbytes_of_string(s),
      _C_ = req.getResponseHeader(t35);
     return caml_call3
             (Js_of_ocaml_Js[5][7],
              _C_,
              function(param){return 0;},
              function(v){return [0, caml_string_of_jsstring(v)];});
    }
    var st = [0, 382334108];
    function do_check_headers(param){
     if(382334108 === st[1])
      if(caml_call2(check_headers, req.status, headers$0))
       st[1] = 583419792;
      else{
       caml_call2(Lwt[53], w, [0, Wrong_headers, [0, req.status, headers$0]]);
       st[1] = 479410653;
       req.abort();
      }
     return 479410653 !== st[1] ? 1 : 0;
    }
    var
     t47 =
       runtime.caml_js_wrap_callback
        (function(param){
          switch(req.readyState){
            case 2:
             if(! Js_of_ocaml_Dom_html[124]){do_check_headers(0); return 0;}
             break;
            case 3:
             if(Js_of_ocaml_Dom_html[124]){do_check_headers(0); return 0;}
             break;
            case 4:
             var _A_ = do_check_headers(0);
             if(! _A_) return _A_;
             switch(response_type){
               case 0:
                var
                 code = req.status,
                 response =
                   [0,
                    url$0,
                    code,
                    headers$0,
                    caml_call1(Js_of_ocaml_File[3][5], req.response),
                    function(param){
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _e_], 1);
                    }];
                break;
               case 1:
                var
                 code$0 = req.status,
                 response =
                   [0,
                    url$0,
                    code$0,
                    headers$0,
                    caml_call1(Js_of_ocaml_File[3][2], req.response),
                    function(param){
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _d_], 1);
                    }];
                break;
               case 2:
                var
                 code$1 = req.status,
                 response =
                   [0,
                    url$0,
                    code$1,
                    headers$0,
                    caml_call1(Js_of_ocaml_File[3][1], req.response),
                    function(param){
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _b_], 1);
                    }];
                break;
               case 3:
                var
                 code$2 = req.status,
                 response =
                   [0,
                    url$0,
                    code$2,
                    headers$0,
                    caml_call1(Js_of_ocaml_File[3][3], req.response),
                    function(param){
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _c_], 1);
                    }];
                break;
               case 4:
                var
                 code$3 = req.status,
                 response =
                   [0,
                    url$0,
                    code$3,
                    headers$0,
                    caml_call3
                     (Js_of_ocaml_Js[5][7],
                      req.responseText,
                      function(param){return cst$6;},
                      function(x){return x;}),
                    function(param){
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _a_], 1);
                    }];
                break;
               default:
                var
                 code$4 = req.status,
                 response =
                   [0,
                    url$0,
                    code$4,
                    headers$0,
                    caml_call3
                     (Js_of_ocaml_Js[5][7],
                      req.responseText,
                      function(param){return cst$2;},
                      caml_string_of_jsstring),
                    function(param){
                     var
                      match = caml_call1(Js_of_ocaml_Js[5][10], req.responseXML);
                     if(! match) return 0;
                     var doc = match[1], _B_ = Js_of_ocaml_Js[1];
                     return caml_call1(Js_of_ocaml_Js[2], doc.documentElement)
                             === _B_
                             ? 0
                             : [0, doc];
                    }];
             }
             return caml_call2(Lwt[52], w, response);
          }
          return 0;
         });
    req.onreadystatechange = t47;
    if(progress){
     var
      progress$0 = progress[1],
      t51 =
        caml_call1
         (Js_of_ocaml_Dom[10],
          function(t50){
           caml_call2(progress$0, t50.loaded, t50.total);
           return Js_of_ocaml_Js[7];
          });
     req.onprogress = t51;
    }
    caml_call2
     (Js_of_ocaml_Js[6][6],
      req.upload,
      function(upload){
       if(! upload_progress) return 0;
       var
        upload_progress$0 = upload_progress[1],
        t56 =
          caml_call1
           (Js_of_ocaml_Dom[10],
            function(t55){
             caml_call2(upload_progress$0, t55.loaded, t55.total);
             return Js_of_ocaml_Js[7];
            });
       return upload.onprogress = t56;
      });
    if(contents$0){
     var match$1 = contents$0[1], _o_ = match$1[1];
     if(-836918635 === _o_){
      var match$2 = match$1[2];
      if(891486873 <= match$2[1]){
       var
        l = match$2[2],
        l$0 = l[1],
        _h_ =
          caml_call2
           (Stdlib_List[20],
            function(param){
             var match = param[2], name = param[1];
             if(781515420 <= match[1]){
              var
               t0 = match[2],
               _u_ =
                 caml_call2
                  (Js_of_ocaml_Url[2], 0, caml_string_of_jsstring(t0.name)),
               _v_ = caml_call2(Stdlib[28], cst, _u_),
               _w_ = caml_call2(Js_of_ocaml_Url[2], 0, name);
              return caml_call2(Stdlib[28], _w_, _v_);
             }
             var
              s = match[2],
              _x_ =
                caml_call2(Js_of_ocaml_Url[2], 0, caml_string_of_jsstring(s)),
              _y_ = caml_call2(Stdlib[28], cst$0, _x_),
              _z_ = caml_call2(Js_of_ocaml_Url[2], 0, name);
             return caml_call2(Stdlib[28], _z_, _y_);
            },
            l$0),
        _p_ =
          caml_jsstring_of_string
           (caml_call2(Js_of_ocaml_lwt_Import[3][7], cst$1, _h_)),
        t60 = caml_call1(Js_of_ocaml_Js[2], _p_);
       req.send(t60);
      }
      else{var t62 = match$2[2]; req.send(t62);}
     }
     else if(737307005 <= _o_){
      var t66 = match$1[2];
      req.send(t66);
     }
     else{
      var
       s = match$1[2],
       t64 = caml_call1(Js_of_ocaml_Js[2], caml_jsstring_of_string(s));
      req.send(t64);
     }
    }
    else{var t58 = Js_of_ocaml_Js[1]; req.send(t58);}
    caml_call2(Lwt[24], res, function(param){return req.abort();});
    return res;
   }
   function perform_raw_url
   (_g_,
    content_type,
    opt,
    check_headers,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    url){
    var headers = _g_ ? _g_[1] : 0, get_args = opt ? opt[1] : 0;
    return perform_raw
            ([0, headers],
             content_type,
             [0, get_args],
             check_headers,
             progress,
             upload_progress,
             contents,
             override_mime_type,
             override_method,
             with_credentials,
             5,
             url);
   }
   function perform
   (_f_,
    content_type,
    opt,
    check_headers,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    url){
    var headers = _f_ ? _f_[1] : 0, get_args = opt ? opt[1] : 0;
    return perform_raw
            ([0, headers],
             content_type,
             [0, get_args],
             check_headers,
             progress,
             upload_progress,
             contents,
             override_mime_type,
             override_method,
             with_credentials,
             5,
             caml_call1(Js_of_ocaml_Url[9], url));
   }
   function get(s){return perform_raw_url(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, s);}
   var
    Js_of_ocaml_lwt_Lwt_xmlHttpReq =
      [0, Wrong_headers, perform_raw, perform_raw_url, perform, get];
   runtime.caml_register_global
    (89,
     Js_of_ocaml_lwt_Lwt_xmlHttpReq,
     "Js_of_ocaml_lwt__Lwt_xmlHttpRequest");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_js
//# unitInfo: Requires: Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Lwt, Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html;
   function sleep(d){
    var
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1],
     _a_ = caml_call1(Lwt[52], w),
     id = caml_call2(Js_of_ocaml_Dom_html[119], _a_, d * 1000.);
    caml_call2
     (Lwt[24],
      t,
      function(param){return caml_call1(Js_of_ocaml_Dom_html[120], id);});
    return t;
   }
   function yield$0(param){return sleep(0.);}
   function wakeup(param){
    if(1 !== param) return 0;
    var
     t0 = runtime.caml_js_wrap_callback(Lwt[58]),
     t2 = Js_of_ocaml_Dom_html[8];
    t2.setTimeout(t0, 0.);
    return 0;
   }
   caml_call1(Lwt[60], wakeup);
   var
    cst_Exception_during_Lwt_async = "Exception during Lwt.async: ",
    dummy = 0;
   function prerr_string(s){
    var t3 = runtime.caml_jsstring_of_string(s), t4 = Js_of_ocaml_Firebug[1];
    t4.log(t3);
   }
   Lwt[12][1] =
    function(exn){
     prerr_string(cst_Exception_during_Lwt_async);
     prerr_string(caml_call1(Stdlib_Printexc[1], exn));
     return caml_call1(Stdlib_Printexc[5], Stdlib[40]);
    };
   var Js_of_ocaml_lwt_Lwt_js = [0, sleep, yield$0];
   runtime.caml_register_global
    (11, Js_of_ocaml_lwt_Lwt_js, "Js_of_ocaml_lwt__Lwt_js");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_jsonp
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml__Url, Js_of_ocaml_lwt__Import, Js_of_ocaml_lwt__Lwt_js, Lwt, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Random = global_data.Stdlib__Random,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Lwt = global_data.Lwt,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    cst_Jsonp_call_Cannot_parse_ur = "Jsonp.call: Cannot parse url",
    cst_callback = "callback";
   function call_custom_url(timeout, opt, make_uri){
    var
     prefix = opt ? opt[1] : cst,
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1],
     user_cb = caml_call1(Lwt[52], w);
    function error_cb(param){return caml_call1(Lwt[23], t);}
    var size = 10;
    for(;;){
     var b = caml_call1(Stdlib_Buffer[1], size), i = 0;
     for(;;){
      var
       _i_ = 97 + caml_call1(Stdlib_Random[5], 26) | 0,
       _j_ = caml_call1(Js_of_ocaml_lwt_Import[4][1], _i_);
      caml_call2(Stdlib_Buffer[12], b, _j_);
      var _k_ = i + 1 | 0;
      if(9 === i) break;
      i = _k_;
     }
     var
      s = caml_call1(Stdlib_Buffer[2], b),
      _h_ = Js_of_ocaml_Dom_html[8][caml_jsstring_of_string(s)];
     if(! caml_call1(Js_of_ocaml_Js[6][5], _h_)) break;
    }
    var
     name = caml_call2(Stdlib[28], prefix, s),
     uri = caml_call1(make_uri, name),
     script = caml_call1(Js_of_ocaml_Dom_html[73], Js_of_ocaml_Dom_html[2]);
    function finalize(param){
     delete Js_of_ocaml_Dom_html[8][caml_jsstring_of_string(name)];
     return caml_call2
             (Js_of_ocaml_Js[5][6],
              script.parentNode,
              function(parent){
               return caml_call2(Js_of_ocaml_Dom[4], parent, script);
              });
    }
    var executed = [0, 0];
    Js_of_ocaml_Dom_html[8][caml_jsstring_of_string(name)] =
     runtime.caml_js_wrap_callback
      (function(x){
        executed[1] = 1;
        finalize(0);
        return caml_call1(user_cb, x);
       });
    var t1 = caml_jsstring_of_string(uri);
    script.src = t1;
    script.type = "text/javascript";
    var t5 = Js_of_ocaml_Js[7];
    script.async = t5;
    function t7(x){finalize(0); return error_cb(x);}
    script.onerror = t7;
    function t11(x){
     return caml_call1
             (Lwt[11],
              function(param){
               var _m_ = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], 1.);
               return caml_call2
                       (Lwt[6],
                        _m_,
                        function(param){
                         if(executed[1]) return Lwt[36];
                         var t10 = Js_of_ocaml_Firebug[1];
                         t10.warn("Jsonp: script loaded but callback not executed");
                         finalize(0);
                         error_cb(x);
                         return Lwt[36];
                        });
              });
    }
    script.onload = t11;
    caml_call2(Lwt[24], t, finalize);
    if(timeout)
     var
      delay = timeout[1],
      _l_ = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], delay),
      wait =
        caml_call2
         (Lwt[6], _l_, function(param){caml_call1(Lwt[23], t); return t;}),
      new_t = caml_call1(Lwt[17], [0, wait, [0, t, 0]]);
    else
     var new_t = t;
    var t13 = Js_of_ocaml_Dom_html[2];
    caml_call2(Js_of_ocaml_Dom[5], t13.body, script);
    return new_t;
   }
   function add_param(name, value, l){
    var
     l$0 =
       caml_call2
        (Stdlib_List[44],
         function(param){
          var x = param[1];
          return 1 - caml_call2(Js_of_ocaml_lwt_Import[3][64], x, name);
         },
         l);
    return [0, [0, name, value], l$0];
   }
   function call(timeout, _a_, opt, url){
    var param = _a_ ? _a_[1] : cst_callback, prefix = opt ? opt[1] : cst$0;
    function make_uri(cbname){
     var match = caml_call1(Js_of_ocaml_Url[8], url);
     if(! match) return caml_call1(Stdlib[2], cst_Jsonp_call_Cannot_parse_ur);
     var url$0 = match[1];
     switch(url$0[0]){
       case 0:
        var
         http = url$0[1],
         _b_ = http[6],
         _c_ = add_param(param, cbname, http[5]),
         new_url = [0, [0, http[1], http[2], http[3], http[4], _c_, _b_]];
        break;
       case 1:
        var
         http$0 = url$0[1],
         _d_ = http$0[6],
         _e_ = add_param(param, cbname, http$0[5]),
         new_url =
           [1, [0, http$0[1], http$0[2], http$0[3], http$0[4], _e_, _d_]];
        break;
       default:
        var
         file = url$0[1],
         _f_ = file[4],
         _g_ = add_param(param, cbname, file[3]),
         new_url = [2, [0, file[1], file[2], _g_, _f_]];
     }
     return caml_call1(Js_of_ocaml_Url[9], new_url);
    }
    return call_custom_url(timeout, [0, prefix], make_uri);
   }
   var Js_of_ocaml_lwt_Lwt_jsonp = [0, call, call_custom_url];
   runtime.caml_register_global
    (27, Js_of_ocaml_lwt_Lwt_jsonp, "Js_of_ocaml_lwt__Lwt_jsonp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_js_events
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml_lwt__Import, Js_of_ocaml_lwt__Lwt_js, Lwt, Lwt_condition, Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lwt_js_event$2 = "Lwt_js_event",
    cst_complete = "complete",
    caml_js_from_bool = runtime.caml_js_from_bool;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Lwt_condition = global_data.Lwt_condition,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    symbol_bind = Lwt[6],
    cst_Lwt_js_event = cst_Lwt_js_event$2,
    cst_Lwt_js_event$0 = cst_Lwt_js_event$2,
    cst_Lwt_js_event$1 = cst_Lwt_js_event$2;
   function async(f){
    return caml_call1
            (Lwt[11],
             function(param){
              return caml_call2
                      (symbol_bind, caml_call1(Js_of_ocaml_lwt_Lwt_js[2], 0), f);
             });
   }
   function opt_map(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function make_event(event_kind, use_capture, passive, target){
    var
     el = [0, Js_of_ocaml_Js[1]],
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1];
    function cancel(param){
     return caml_call2(Js_of_ocaml_Js[5][6], el[1], Js_of_ocaml_Dom_html[18]);
    }
    caml_call2(Lwt[24], t, cancel);
    var
     _a3_ =
       caml_call1
        (Js_of_ocaml_Dom_html[10],
         function(ev){cancel(0); caml_call2(Lwt[52], w, ev); return ! ! 1;}),
     _a4_ = opt_map(caml_js_from_bool, passive),
     _a5_ = opt_map(caml_js_from_bool, use_capture),
     _a6_ =
       caml_call6
        (Js_of_ocaml_Dom[15], target, event_kind, _a5_, 0, _a4_, _a3_);
    el[1] = caml_call1(Js_of_ocaml_Js[2], _a6_);
    return t;
   }
   function catch_cancel(f, x){
    return caml_call2
            (Lwt[7],
             function(param){return caml_call1(f, x);},
             function(e){
              return e === Lwt[21]
                      ? caml_call1(Lwt[4], 0)
                      : caml_call1(Lwt[5], e);
             });
   }
   function with_error_log(f, x){
    return caml_call2
            (Lwt[7],
             function(param){return caml_call1(f, x);},
             function(e){
              var
               t0 =
                 runtime.caml_jsstring_of_string
                  (caml_call1(Stdlib_Printexc[1], e)),
               t1 = Js_of_ocaml_Firebug[1];
              t1.log(t0);
              return caml_call1(Lwt[4], 0);
             });
   }
   function seq_loop(evh, opt, use_capture, passive, target, handler){
    var
     cancel_handler = opt ? opt[1] : 0,
     cancelled = [0, 0],
     cur = [0, caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_js_event])],
     cur_handler = [0, caml_call1(Lwt[4], 0)],
     lt = caml_call1(Lwt[22], 0)[1];
    caml_call2
     (Lwt[24],
      lt,
      function(param){
       caml_call1(Lwt[23], cur[1]);
       if(cancel_handler) caml_call1(Lwt[23], cur_handler[1]);
       cancelled[1] = 1;
       return 0;
      });
    function aux(param){
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var t = caml_call3(evh, use_capture, passive, target);
     cur[1] = t;
     return caml_call2
             (symbol_bind,
              t,
              function(e){
               cur_handler[1] = with_error_log(caml_call1(handler, e), lt);
               return caml_call2(symbol_bind, cur_handler[1], aux);
              });
    }
    caml_call1(Lwt[11], function(_a2_){return catch_cancel(aux, _a2_);});
    return lt;
   }
   function async_loop(evh, use_capture, passive, target, handler){
    var
     cancelled = [0, 0],
     cur = [0, caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_js_event$0])],
     lt = caml_call1(Lwt[22], 0)[1];
    caml_call2
     (Lwt[24],
      lt,
      function(param){
       caml_call1(Lwt[23], cur[1]);
       cancelled[1] = 1;
       return 0;
      });
    function aux(param){
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var t = caml_call3(evh, use_capture, passive, target);
     cur[1] = t;
     return caml_call2
             (symbol_bind,
              t,
              function(e){
               caml_call1
                (Lwt[11],
                 function(param){
                  return with_error_log(caml_call1(handler, e), lt);
                 });
               return aux(0);
              });
    }
    caml_call1(Lwt[11], function(_a1_){return catch_cancel(aux, _a1_);});
    return lt;
   }
   function buffered_loop
   (evh, _aZ_, opt, use_capture, passive, target, handler){
    var
     cancel_handler = _aZ_ ? _aZ_[1] : 0,
     cancel_queue = opt ? opt[1] : 1,
     cancelled = [0, 0],
     queue = [0, 0],
     cur = [0, caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_js_event$1])],
     cur_handler = [0, caml_call1(Lwt[4], 0)],
     lt = caml_call1(Lwt[22], 0)[1],
     spawn = caml_call1(Lwt_condition[1], 0);
    caml_call2
     (Lwt[24],
      lt,
      function(param){
       caml_call1(Lwt[23], cur[1]);
       if(cancel_handler) caml_call1(Lwt[23], cur_handler[1]);
       if(cancel_queue) queue[1] = 0;
       cancelled[1] = 1;
       return 0;
      });
    function spawner(param){
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var t = caml_call3(evh, use_capture, passive, target);
     cur[1] = t;
     return caml_call2
             (symbol_bind,
              t,
              function(e){
               queue[1] = [0, e, queue[1]];
               caml_call2(Lwt_condition[3], spawn, 0);
               return spawner(0);
              });
    }
    function runner(param){
     cur_handler[1] = caml_call1(Lwt[4], 0);
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var match = queue[1];
     if(! match)
      return caml_call2
              (symbol_bind, caml_call2(Lwt_condition[2], 0, spawn), runner);
     var tl = match[2], e = match[1];
     queue[1] = tl;
     cur_handler[1] = with_error_log(caml_call1(handler, e), lt);
     return caml_call2(symbol_bind, cur_handler[1], runner);
    }
    caml_call1(Lwt[11], function(_a0_){return catch_cancel(spawner, _a0_);});
    caml_call1(Lwt[11], runner);
    return lt;
   }
   function func_limited_loop
   (event, limited_func, use_capture, passive, target, handler){
    var count = [0, 0];
    return async_loop
            (event,
             use_capture,
             passive,
             target,
             function(ev, lt){
              count[1]++;
              var nb = count[1];
              return caml_call2
                      (symbol_bind,
                       caml_call1(limited_func, 0),
                       function(param){
                        return caml_call2(Js_of_ocaml_lwt_Import[8], count[1], nb)
                                ? caml_call2(handler, ev, lt)
                                : caml_call1(Lwt[4], 0);
                       });
             });
   }
   function limited_loop(event, opt){
    var elapsed_time = opt ? opt[1] : 0.1;
    function _aU_(param){
     return caml_call1(Js_of_ocaml_lwt_Lwt_js[1], elapsed_time);
    }
    return function(_aV_, _aW_, _aX_, _aY_){
     return func_limited_loop(event, _aU_, _aV_, _aW_, _aX_, _aY_);};
   }
   function click(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][2], use_capture, passive, target);
   }
   function copy(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][4], use_capture, passive, target);
   }
   function cut(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][5], use_capture, passive, target);
   }
   function paste(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][6], use_capture, passive, target);
   }
   function dblclick(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][7], use_capture, passive, target);
   }
   function mousedown(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][8], use_capture, passive, target);
   }
   function mouseup(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][9], use_capture, passive, target);
   }
   function mouseover(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][10], use_capture, passive, target);
   }
   function mousemove(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][11], use_capture, passive, target);
   }
   function mouseout(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][12], use_capture, passive, target);
   }
   function keypress(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][13], use_capture, passive, target);
   }
   function keydown(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][14], use_capture, passive, target);
   }
   function keyup(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][15], use_capture, passive, target);
   }
   function change(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][31], use_capture, passive, target);
   }
   function input(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][32], use_capture, passive, target);
   }
   function timeupdate(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][33], use_capture, passive, target);
   }
   function dragstart(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][23], use_capture, passive, target);
   }
   function dragend(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][24], use_capture, passive, target);
   }
   function dragenter(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][25], use_capture, passive, target);
   }
   function dragover(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][26], use_capture, passive, target);
   }
   function dragleave(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][27], use_capture, passive, target);
   }
   function drag(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][28], use_capture, passive, target);
   }
   function drop(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][29], use_capture, passive, target);
   }
   function focus(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][36], use_capture, passive, target);
   }
   function blur(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][37], use_capture, passive, target);
   }
   function scroll(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][35], use_capture, passive, target);
   }
   function submit(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][34], use_capture, passive, target);
   }
   function select(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][46], use_capture, passive, target);
   }
   function abort(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][45], use_capture, passive, target);
   }
   function error(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][44], use_capture, passive, target);
   }
   function load(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][38], use_capture, passive, target);
   }
   function canplay(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][65], use_capture, passive, target);
   }
   function canplaythrough(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][66], use_capture, passive, target);
   }
   function durationchange(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][67], use_capture, passive, target);
   }
   function emptied(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][68], use_capture, passive, target);
   }
   function ended(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][69], use_capture, passive, target);
   }
   function loadeddata(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][71], use_capture, passive, target);
   }
   function loadedmetadata(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][72], use_capture, passive, target);
   }
   function loadstart(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][73], use_capture, passive, target);
   }
   function pause(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][76], use_capture, passive, target);
   }
   function play(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][77], use_capture, passive, target);
   }
   function playing(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][78], use_capture, passive, target);
   }
   function ratechange(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][87], use_capture, passive, target);
   }
   function seeked(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][88], use_capture, passive, target);
   }
   function seeking(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][89], use_capture, passive, target);
   }
   function stalled(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][90], use_capture, passive, target);
   }
   function suspend(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][91], use_capture, passive, target);
   }
   function volumechange(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][92], use_capture, passive, target);
   }
   function waiting(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][93], use_capture, passive, target);
   }
   function mousewheel(use_capture, passive, target){
    var
     el = [0, Js_of_ocaml_Js[1]],
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1];
    function cancel(param){
     return caml_call2(Js_of_ocaml_Js[5][6], el[1], Js_of_ocaml_Dom_html[18]);
    }
    caml_call2(Lwt[24], t, cancel);
    var
     _aR_ = opt_map(caml_js_from_bool, passive),
     _aS_ = opt_map(caml_js_from_bool, use_capture),
     _aT_ =
       caml_call5
        (Js_of_ocaml_Dom_html[19],
         target,
         _aS_,
         0,
         _aR_,
         function(ev, dx, dy){
          var t3 = Js_of_ocaml_Firebug[1];
          t3.log(ev);
          cancel(0);
          caml_call2(Lwt[52], w, [0, ev, [0, dx, dy]]);
          return ! ! 1;
         });
    el[1] = caml_call1(Js_of_ocaml_Js[2], _aT_);
    return t;
   }
   function wheel(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][18], use_capture, passive, target);
   }
   function touchstart(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][19], use_capture, passive, target);
   }
   function touchmove(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][20], use_capture, passive, target);
   }
   function touchend(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][21], use_capture, passive, target);
   }
   function touchcancel(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][22], use_capture, passive, target);
   }
   function lostpointercapture(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][74], use_capture, passive, target);
   }
   function gotpointercapture(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][70], use_capture, passive, target);
   }
   function pointerenter(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][79], use_capture, passive, target);
   }
   function pointercancel(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][80], use_capture, passive, target);
   }
   function pointerdown(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][81], use_capture, passive, target);
   }
   function pointerleave(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][82], use_capture, passive, target);
   }
   function pointermove(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][83], use_capture, passive, target);
   }
   function pointerout(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][84], use_capture, passive, target);
   }
   function pointerover(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][85], use_capture, passive, target);
   }
   function pointerup(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][86], use_capture, passive, target);
   }
   function transitionend(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][63], use_capture, passive, elt);
   }
   function transitionstart(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][62], use_capture, passive, elt);
   }
   function transitionrun(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][61], use_capture, passive, elt);
   }
   function transitioncancel(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][64], use_capture, passive, elt);
   }
   function clicks(cancel_handler, use_capture, passive, t){
    return function(_aQ_){
     return seq_loop(click, cancel_handler, use_capture, passive, t, _aQ_);};
   }
   function copies(cancel_handler, use_capture, passive, t){
    return function(_aP_){
     return seq_loop(copy, cancel_handler, use_capture, passive, t, _aP_);};
   }
   function cuts(cancel_handler, use_capture, passive, t){
    return function(_aO_){
     return seq_loop(cut, cancel_handler, use_capture, passive, t, _aO_);};
   }
   function pastes(cancel_handler, use_capture, passive, t){
    return function(_aN_){
     return seq_loop(paste, cancel_handler, use_capture, passive, t, _aN_);};
   }
   function dblclicks(cancel_handler, use_capture, passive, t){
    return function(_aM_){
     return seq_loop(dblclick, cancel_handler, use_capture, passive, t, _aM_);};
   }
   function mousedowns(cancel_handler, use_capture, passive, t){
    return function(_aL_){
     return seq_loop(mousedown, cancel_handler, use_capture, passive, t, _aL_);};
   }
   function mouseups(cancel_handler, use_capture, passive, t){
    return function(_aK_){
     return seq_loop(mouseup, cancel_handler, use_capture, passive, t, _aK_);};
   }
   function mouseovers(cancel_handler, use_capture, passive, t){
    return function(_aJ_){
     return seq_loop(mouseover, cancel_handler, use_capture, passive, t, _aJ_);};
   }
   function mousemoves(cancel_handler, use_capture, passive, t){
    return function(_aI_){
     return seq_loop(mousemove, cancel_handler, use_capture, passive, t, _aI_);};
   }
   function mouseouts(cancel_handler, use_capture, passive, t){
    return function(_aH_){
     return seq_loop(mouseout, cancel_handler, use_capture, passive, t, _aH_);};
   }
   function keypresses(cancel_handler, use_capture, passive, t){
    return function(_aG_){
     return seq_loop(keypress, cancel_handler, use_capture, passive, t, _aG_);};
   }
   function keydowns(cancel_handler, use_capture, passive, t){
    return function(_aF_){
     return seq_loop(keydown, cancel_handler, use_capture, passive, t, _aF_);};
   }
   function keyups(cancel_handler, use_capture, passive, t){
    return function(_aE_){
     return seq_loop(keyup, cancel_handler, use_capture, passive, t, _aE_);};
   }
   function changes(cancel_handler, use_capture, passive, t){
    return function(_aD_){
     return seq_loop(change, cancel_handler, use_capture, passive, t, _aD_);};
   }
   function inputs(cancel_handler, use_capture, passive, t){
    return function(_aC_){
     return seq_loop(input, cancel_handler, use_capture, passive, t, _aC_);};
   }
   function timeupdates(cancel_handler, use_capture, passive, t){
    return function(_aB_){
     return seq_loop
             (timeupdate, cancel_handler, use_capture, passive, t, _aB_);};
   }
   function dragstarts(cancel_handler, use_capture, passive, t){
    return function(_aA_){
     return seq_loop(dragstart, cancel_handler, use_capture, passive, t, _aA_);};
   }
   function dragends(cancel_handler, use_capture, passive, t){
    return function(_az_){
     return seq_loop(dragend, cancel_handler, use_capture, passive, t, _az_);};
   }
   function dragenters(cancel_handler, use_capture, passive, t){
    return function(_ay_){
     return seq_loop(dragenter, cancel_handler, use_capture, passive, t, _ay_);};
   }
   function dragovers(cancel_handler, use_capture, passive, t){
    return function(_ax_){
     return seq_loop(dragover, cancel_handler, use_capture, passive, t, _ax_);};
   }
   function dragleaves(cancel_handler, use_capture, passive, t){
    return function(_aw_){
     return seq_loop(dragleave, cancel_handler, use_capture, passive, t, _aw_);};
   }
   function drags(cancel_handler, use_capture, passive, t){
    return function(_av_){
     return seq_loop(drag, cancel_handler, use_capture, passive, t, _av_);};
   }
   function drops(cancel_handler, use_capture, passive, t){
    return function(_au_){
     return seq_loop(drop, cancel_handler, use_capture, passive, t, _au_);};
   }
   function mousewheels(cancel_handler, use_capture, passive, t){
    return function(_at_){
     return seq_loop
             (mousewheel, cancel_handler, use_capture, passive, t, _at_);};
   }
   function wheels(cancel_handler, use_capture, passive, t){
    return function(_as_){
     return seq_loop(wheel, cancel_handler, use_capture, passive, t, _as_);};
   }
   function touchstarts(cancel_handler, use_capture, passive, t){
    return function(_ar_){
     return seq_loop
             (touchstart, cancel_handler, use_capture, passive, t, _ar_);};
   }
   function touchmoves(cancel_handler, use_capture, passive, t){
    return function(_aq_){
     return seq_loop(touchmove, cancel_handler, use_capture, passive, t, _aq_);};
   }
   function touchends(cancel_handler, use_capture, passive, t){
    return function(_ap_){
     return seq_loop(touchend, cancel_handler, use_capture, passive, t, _ap_);};
   }
   function touchcancels(cancel_handler, use_capture, passive, t){
    return function(_ao_){
     return seq_loop
             (touchcancel, cancel_handler, use_capture, passive, t, _ao_);};
   }
   function focuses(cancel_handler, use_capture, passive, t){
    return function(_an_){
     return seq_loop(focus, cancel_handler, use_capture, passive, t, _an_);};
   }
   function blurs(cancel_handler, use_capture, passive, t){
    return function(_am_){
     return seq_loop(blur, cancel_handler, use_capture, passive, t, _am_);};
   }
   function scrolls(cancel_handler, use_capture, passive, t){
    return function(_al_){
     return seq_loop(scroll, cancel_handler, use_capture, passive, t, _al_);};
   }
   function submits(cancel_handler, use_capture, passive, t){
    return function(_ak_){
     return seq_loop(submit, cancel_handler, use_capture, passive, t, _ak_);};
   }
   function selects(cancel_handler, use_capture, passive, t){
    return function(_aj_){
     return seq_loop(select, cancel_handler, use_capture, passive, t, _aj_);};
   }
   function aborts(cancel_handler, use_capture, passive, t){
    return function(_ai_){
     return seq_loop(abort, cancel_handler, use_capture, passive, t, _ai_);};
   }
   function errors(cancel_handler, use_capture, passive, t){
    return function(_ah_){
     return seq_loop(error, cancel_handler, use_capture, passive, t, _ah_);};
   }
   function loads(cancel_handler, use_capture, passive, t){
    return function(_ag_){
     return seq_loop(load, cancel_handler, use_capture, passive, t, _ag_);};
   }
   function canplays(cancel_handler, use_capture, passive, t){
    return function(_af_){
     return seq_loop(canplay, cancel_handler, use_capture, passive, t, _af_);};
   }
   function canplaythroughs(cancel_handler, use_capture, passive, t){
    return function(_ae_){
     return seq_loop
             (canplaythrough, cancel_handler, use_capture, passive, t, _ae_);};
   }
   function durationchanges(cancel_handler, use_capture, passive, t){
    return function(_ad_){
     return seq_loop
             (durationchange, cancel_handler, use_capture, passive, t, _ad_);};
   }
   function emptieds(cancel_handler, use_capture, passive, t){
    return function(_ac_){
     return seq_loop(emptied, cancel_handler, use_capture, passive, t, _ac_);};
   }
   function endeds(cancel_handler, use_capture, passive, t){
    return function(_ab_){
     return seq_loop(ended, cancel_handler, use_capture, passive, t, _ab_);};
   }
   function loadeddatas(cancel_handler, use_capture, passive, t){
    return function(_aa_){
     return seq_loop
             (loadeddata, cancel_handler, use_capture, passive, t, _aa_);};
   }
   function loadedmetadatas(cancel_handler, use_capture, passive, t){
    return function(_$_){
     return seq_loop
             (loadedmetadata, cancel_handler, use_capture, passive, t, _$_);};
   }
   function loadstarts(cancel_handler, use_capture, passive, t){
    return function(___){
     return seq_loop(loadstart, cancel_handler, use_capture, passive, t, ___);};
   }
   function pauses(cancel_handler, use_capture, passive, t){
    return function(_Z_){
     return seq_loop(pause, cancel_handler, use_capture, passive, t, _Z_);};
   }
   function plays(cancel_handler, use_capture, passive, t){
    return function(_Y_){
     return seq_loop(play, cancel_handler, use_capture, passive, t, _Y_);};
   }
   function playings(cancel_handler, use_capture, passive, t){
    return function(_X_){
     return seq_loop(playing, cancel_handler, use_capture, passive, t, _X_);};
   }
   function ratechanges(cancel_handler, use_capture, passive, t){
    return function(_W_){
     return seq_loop(ratechange, cancel_handler, use_capture, passive, t, _W_);};
   }
   function seekeds(cancel_handler, use_capture, passive, t){
    return function(_V_){
     return seq_loop(seeked, cancel_handler, use_capture, passive, t, _V_);};
   }
   function seekings(cancel_handler, use_capture, passive, t){
    return function(_U_){
     return seq_loop(seeking, cancel_handler, use_capture, passive, t, _U_);};
   }
   function stalleds(cancel_handler, use_capture, passive, t){
    return function(_T_){
     return seq_loop(stalled, cancel_handler, use_capture, passive, t, _T_);};
   }
   function suspends(cancel_handler, use_capture, passive, t){
    return function(_S_){
     return seq_loop(suspend, cancel_handler, use_capture, passive, t, _S_);};
   }
   function volumechanges(cancel_handler, use_capture, passive, t){
    return function(_R_){
     return seq_loop
             (volumechange, cancel_handler, use_capture, passive, t, _R_);};
   }
   function waitings(cancel_handler, use_capture, passive, t){
    return function(_Q_){
     return seq_loop(waiting, cancel_handler, use_capture, passive, t, _Q_);};
   }
   function lostpointercaptures(cancel_handler, use_capture, passive, t){
    return function(_P_){
     return seq_loop
             (lostpointercapture,
              cancel_handler,
              use_capture,
              passive,
              t,
              _P_);};
   }
   function gotpointercaptures(cancel_handler, use_capture, passive, t){
    return function(_O_){
     return seq_loop
             (gotpointercapture, cancel_handler, use_capture, passive, t, _O_);};
   }
   function pointerenters(cancel_handler, use_capture, passive, t){
    return function(_N_){
     return seq_loop
             (pointerenter, cancel_handler, use_capture, passive, t, _N_);};
   }
   function pointercancels(cancel_handler, use_capture, passive, t){
    return function(_M_){
     return seq_loop
             (pointercancel, cancel_handler, use_capture, passive, t, _M_);};
   }
   function pointerdowns(cancel_handler, use_capture, passive, t){
    return function(_L_){
     return seq_loop
             (pointerdown, cancel_handler, use_capture, passive, t, _L_);};
   }
   function pointerleaves(cancel_handler, use_capture, passive, t){
    return function(_K_){
     return seq_loop
             (pointerleave, cancel_handler, use_capture, passive, t, _K_);};
   }
   function pointermoves(cancel_handler, use_capture, passive, t){
    return function(_J_){
     return seq_loop
             (pointermove, cancel_handler, use_capture, passive, t, _J_);};
   }
   function pointerouts(cancel_handler, use_capture, passive, t){
    return function(_I_){
     return seq_loop(pointerout, cancel_handler, use_capture, passive, t, _I_);};
   }
   function pointerovers(cancel_handler, use_capture, passive, t){
    return function(_H_){
     return seq_loop
             (pointerover, cancel_handler, use_capture, passive, t, _H_);};
   }
   function pointerups(cancel_handler, use_capture, passive, t){
    return function(_G_){
     return seq_loop(pointerup, cancel_handler, use_capture, passive, t, _G_);};
   }
   function transitionends(cancel_handler, use_capture, passive, t){
    return function(_F_){
     return seq_loop
             (transitionend, cancel_handler, use_capture, passive, t, _F_);};
   }
   function transitionstarts(cancel_handler, use_capture, passive, t){
    return function(_E_){
     return seq_loop
             (transitionstart, cancel_handler, use_capture, passive, t, _E_);};
   }
   function transitionruns(cancel_handler, use_capture, passive, t){
    return function(_D_){
     return seq_loop
             (transitionrun, cancel_handler, use_capture, passive, t, _D_);};
   }
   function transitioncancels(cancel_handler, use_capture, passive, t){
    return function(_C_){
     return seq_loop
             (transitioncancel, cancel_handler, use_capture, passive, t, _C_);};
   }
   function request_animation_frame(param){
    var
     match = caml_call1(Lwt[1], 0),
     s = match[2],
     t = match[1],
     t4 =
       runtime.caml_js_wrap_callback
        (function(param){return caml_call2(Lwt[52], s, 0);}),
     t5 = Js_of_ocaml_Dom_html[8];
    t5.requestAnimationFrame(t4);
    return t;
   }
   function onload(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][38], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   var
    t6 = Js_of_ocaml_Dom_html[8],
    doc = t6.document,
    cst_readystatechange = "readystatechange";
   function domContentLoaded(param){
    if(doc.readyState === cst_complete) return Lwt[36];
    var match = caml_call1(Lwt[22], 0), w = match[2], t = match[1];
    function wakeup(w, param){
     var _B_ = caml_call1(Lwt[76], t);
     return _B_ ? caml_call2(Lwt[52], w, 0) : _B_;
    }
    function wakeup_exn(w, e){
     var _A_ = caml_call1(Lwt[76], t);
     return _A_ ? caml_call2(Lwt[53], w, e) : _A_;
    }
    var regular = make_event(Js_of_ocaml_Dom_html[15][56], 0, 0, doc);
    caml_call3
     (Lwt[32],
      regular,
      function(_z_){return wakeup(w, _z_);},
      function(_y_){return wakeup_exn(w, _y_);});
    var
     _s_ = caml_call1(Js_of_ocaml_Dom[14][1], cst_readystatechange),
     readystatechange =
       async_loop
        (function(_v_, _w_, _x_){return make_event(_s_, _v_, _w_, _x_);},
         0,
         0,
         doc,
         function(e, param){
          if(doc.readyState === cst_complete) wakeup(w, e);
          return Lwt[36];
         }),
     init =
       make_event(Js_of_ocaml_Dom_html[15][38], 0, 0, Js_of_ocaml_Dom_html[8]);
    caml_call3
     (Lwt[32],
      init,
      function(_u_){return wakeup(w, _u_);},
      function(_t_){return wakeup_exn(w, _t_);});
    return caml_call2
            (Lwt[6],
             t,
             function(e){
              caml_call1(Lwt[23], regular);
              caml_call1(Lwt[23], readystatechange);
              caml_call1(Lwt[23], init);
              return Lwt[36];
             });
   }
   function onunload(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][39], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onbeforeunload(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][40], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onresize(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][41], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onorientationchange(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][42], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onpopstate(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][43], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onhashchange(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][30], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onorientationchange_or_onresiz(param){
    var _q_ = [0, onorientationchange(0), 0], _r_ = [0, onresize(0), _q_];
    return caml_call1(Lwt[16], _r_);
   }
   function onresizes(t){
    return seq_loop
            (function(_p_, _o_, param){return onresize(0);}, 0, 0, 0, 0, t);
   }
   function onorientationchanges(t){
    return seq_loop
            (function(_n_, _m_, param){return onorientationchange(0);},
             0,
             0,
             0,
             0,
             t);
   }
   function onpopstates(t){
    return seq_loop
            (function(_l_, _k_, param){return onpopstate(0);}, 0, 0, 0, 0, t);
   }
   function onhashchanges(t){
    return seq_loop
            (function(_j_, _i_, param){return onhashchange(0);},
             0,
             0,
             0,
             0,
             t);
   }
   function onorientationchanges_or_onresi(t){
    return seq_loop
            (function(_h_, _g_, param){
              return onorientationchange_or_onresiz(0);
             },
             0,
             0,
             0,
             0,
             t);
   }
   function limited_onresizes(elapsed_time, t){
    return limited_loop
             (function(_f_, _e_, param){return onresize(0);}, elapsed_time)
            (0, 0, 0, t);
   }
   function limited_onorientationchanges(elapsed_time, t){
    return limited_loop
             (function(_d_, _c_, param){return onorientationchange(0);},
              elapsed_time)
            (0, 0, 0, t);
   }
   function limited_onorientationchanges_o(elapsed_time, t){
    return limited_loop
             (function(_b_, _a_, param){
               return onorientationchange_or_onresiz(0);
              },
              elapsed_time)
            (0, 0, 0, t);
   }
   var
    Js_of_ocaml_lwt_Lwt_js_events =
      [0,
       make_event,
       seq_loop,
       async_loop,
       buffered_loop,
       async,
       func_limited_loop,
       limited_loop,
       click,
       copy,
       cut,
       paste,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       input,
       timeupdate,
       change,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       focus,
       blur,
       scroll,
       submit,
       select,
       mousewheel,
       wheel,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       lostpointercapture,
       gotpointercapture,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       transitionend,
       transitionstart,
       transitionrun,
       transitioncancel,
       load,
       error,
       abort,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       loadeddata,
       loadedmetadata,
       loadstart,
       pause,
       play,
       playing,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       clicks,
       copies,
       cuts,
       pastes,
       dblclicks,
       mousedowns,
       mouseups,
       mouseovers,
       mousemoves,
       mouseouts,
       keypresses,
       keydowns,
       keyups,
       inputs,
       timeupdates,
       changes,
       dragstarts,
       dragends,
       dragenters,
       dragovers,
       dragleaves,
       drags,
       drops,
       mousewheels,
       wheels,
       touchstarts,
       touchmoves,
       touchends,
       touchcancels,
       focuses,
       blurs,
       scrolls,
       submits,
       selects,
       loads,
       errors,
       aborts,
       canplays,
       canplaythroughs,
       durationchanges,
       emptieds,
       endeds,
       loadeddatas,
       loadedmetadatas,
       loadstarts,
       pauses,
       plays,
       playings,
       ratechanges,
       seekeds,
       seekings,
       stalleds,
       suspends,
       volumechanges,
       waitings,
       lostpointercaptures,
       gotpointercaptures,
       pointerenters,
       pointercancels,
       pointerdowns,
       pointerleaves,
       pointermoves,
       pointerouts,
       pointerovers,
       pointerups,
       transitionends,
       transitionstarts,
       transitionruns,
       transitioncancels,
       request_animation_frame,
       onload,
       domContentLoaded,
       onunload,
       onbeforeunload,
       onresize,
       onorientationchange,
       onpopstate,
       onhashchange,
       onorientationchange_or_onresiz,
       onresizes,
       onorientationchanges,
       onpopstates,
       onhashchanges,
       onorientationchanges_or_onresi,
       limited_onresizes,
       limited_onorientationchanges,
       limited_onorientationchanges_o];
   runtime.caml_register_global
    (22, Js_of_ocaml_lwt_Lwt_js_events, "Js_of_ocaml_lwt__Lwt_js_events");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_file
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__File, Js_of_ocaml__Js, Lwt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    _a_ = [0, "lib/lwt/lwt_file.ml", 37, 22];
   function reader(kind, file){
    var
     fileReader = Js_of_ocaml_File[6],
     reader = new fileReader,
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     res = match[1],
     t3 =
       caml_call1
        (Js_of_ocaml_Dom[10],
         function(param){
          if(2 === reader.readyState){
           var
            _b_ = caml_call1(Js_of_ocaml_File[3][4], reader.result),
            match = caml_call1(Js_of_ocaml_Js[5][10], _b_);
           if(! match)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
           var s = match[1];
           caml_call2(Lwt[52], w, s);
          }
          return Js_of_ocaml_Js[8];
         });
    reader.onloadend = t3;
    caml_call2(Lwt[24], res, function(param){return reader.abort();});
    if(typeof kind === "number")
     if(-550809787 === kind)
      reader.readAsDataURL(file);
     else if(936573133 <= kind)
      reader.readAsText(file);
     else
      reader.readAsBinaryString(file);
    else{var t11 = kind[2]; reader.readAsText(file, t11);}
    return res;
   }
   function readAsBinaryString(file){return reader(-1041425454, file);}
   function readAsText(file){return reader(936573133, file);}
   function readAsText_withEncoding(file, e){return reader([0, -973237525, e], file);
   }
   function readAsDataURL(file){return reader(-550809787, file);}
   var
    Js_of_ocaml_lwt_Lwt_file =
      [0,
       readAsBinaryString,
       readAsText,
       readAsText_withEncoding,
       readAsDataURL];
   runtime.caml_register_global
    (14, Js_of_ocaml_lwt_Lwt_file, "Js_of_ocaml_lwt__Lwt_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt
//# unitInfo: Requires: Js_of_ocaml__File, Js_of_ocaml__XmlHttpRequest, Js_of_ocaml_lwt__Lwt_file, Js_of_ocaml_lwt__Lwt_xmlHttpRequest
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Js_of_ocaml_lwt_Lwt_xmlHttpReq =
      global_data.Js_of_ocaml_lwt__Lwt_xmlHttpRequest,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_lwt_Lwt_file = global_data.Js_of_ocaml_lwt__Lwt_file,
    create = Js_of_ocaml_XmlHttpRequest[1],
    Event = Js_of_ocaml_XmlHttpRequest[2],
    Wrong_headers = Js_of_ocaml_lwt_Lwt_xmlHttpReq[1],
    perform_raw = Js_of_ocaml_lwt_Lwt_xmlHttpReq[2],
    perform_raw_url = Js_of_ocaml_lwt_Lwt_xmlHttpReq[3],
    perform = Js_of_ocaml_lwt_Lwt_xmlHttpReq[4],
    get = Js_of_ocaml_lwt_Lwt_xmlHttpReq[5],
    XmlHttpRequest =
      [0,
       create,
       Event,
       Wrong_headers,
       perform_raw,
       perform_raw_url,
       perform,
       get],
    blob_from_string = Js_of_ocaml_File[1],
    blob_from_any = Js_of_ocaml_File[2],
    CoerceTo = Js_of_ocaml_File[3],
    ReaderEvent = Js_of_ocaml_File[4],
    filename = Js_of_ocaml_File[5],
    fileReader = Js_of_ocaml_File[6],
    addEventListener = Js_of_ocaml_File[7],
    readAsBinaryString = Js_of_ocaml_lwt_Lwt_file[1],
    readAsText = Js_of_ocaml_lwt_Lwt_file[2],
    readAsText_withEncoding = Js_of_ocaml_lwt_Lwt_file[3],
    readAsDataURL = Js_of_ocaml_lwt_Lwt_file[4],
    File =
      [0,
       blob_from_string,
       blob_from_any,
       CoerceTo,
       ReaderEvent,
       filename,
       fileReader,
       addEventListener,
       readAsBinaryString,
       readAsText,
       readAsText_withEncoding,
       readAsDataURL],
    Js_of_ocaml_lwt = [0, XmlHttpRequest, File];
   runtime.caml_register_global(4, Js_of_ocaml_lwt, "Js_of_ocaml_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNfb2Zfb2NhbWxfbHd0LmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6OCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJqc19vZl9vY2FtbF9sd3QuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsIkpzX29mX29jYW1sX2x3dCJdLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUEsb0JBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSJdLCJpZ25vcmVMaXN0IjpbMF19fSx7Im9mZnNldCI6eyJsaW5lIjoyMiwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJqc19vZl9vY2FtbF9sd3QuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImdsb2JhbF9kYXRhIiwiU3RkbGliX1N0cmluZyIsIlN0ZGxpYl9DaGFyIiwiUG9seSIsInN5bWJvbCIsIngiLCJ5IiwiY29tcGFyZSIsImVxdWFsIiwibWF4IiwibWluIiwiSW50X3JlcGxhY2VfcG9seW1vcnBoaWNfY29tcGFyIiwibWFrZSIsImluaXQiLCJlbXB0eSIsIm9mX2J5dGVzIiwidG9fYnl0ZXMiLCJibGl0IiwiY29uY2F0IiwiY2F0Iiwic3RhcnRzX3dpdGgiLCJlbmRzX3dpdGgiLCJjb250YWluc19mcm9tIiwicmNvbnRhaW5zX2Zyb20iLCJjb250YWlucyIsInN1YiIsInNwbGl0X29uX2NoYXIiLCJtYXAiLCJtYXBpIiwiZm9sZF9sZWZ0IiwiZm9sZF9yaWdodCIsImZvcl9hbGwiLCJleGlzdHMiLCJ0cmltIiwiZXNjYXBlZCIsInVwcGVyY2FzZV9hc2NpaSIsImxvd2VyY2FzZV9hc2NpaSIsImNhcGl0YWxpemVfYXNjaWkiLCJ1bmNhcGl0YWxpemVfYXNjaWkiLCJpdGVyIiwiaXRlcmkiLCJpbmRleF9mcm9tIiwiaW5kZXhfZnJvbV9vcHQiLCJyaW5kZXhfZnJvbSIsInJpbmRleF9mcm9tX29wdCIsImluZGV4IiwiaW5kZXhfb3B0IiwicmluZGV4IiwicmluZGV4X29wdCIsInRvX3NlcSIsInRvX3NlcWkiLCJvZl9zZXEiLCJnZXRfdXRmXzhfdWNoYXIiLCJpc192YWxpZF91dGZfOCIsImdldF91dGZfMTZiZV91Y2hhciIsImlzX3ZhbGlkX3V0Zl8xNmJlIiwiZ2V0X3V0Zl8xNmxlX3VjaGFyIiwiaXNfdmFsaWRfdXRmXzE2bGUiLCJnZXRfdWludDgiLCJnZXRfaW50OCIsImdldF91aW50MTZfbmUiLCJnZXRfdWludDE2X2JlIiwiZ2V0X3VpbnQxNl9sZSIsImdldF9pbnQxNl9uZSIsImdldF9pbnQxNl9iZSIsImdldF9pbnQxNl9sZSIsImdldF9pbnQzMl9uZSIsImhhc2giLCJzZWVkZWRfaGFzaCIsImdldF9pbnQzMl9iZSIsImdldF9pbnQzMl9sZSIsImdldF9pbnQ2NF9uZSIsImdldF9pbnQ2NF9iZSIsImdldF9pbnQ2NF9sZSIsIlN0cmluZyIsImNociIsIkNoYXIiLCJKc19vZl9vY2FtbF9sd3RfSW1wb3J0Il0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvaG9tZS9iZWVsaWd1bC8ub3BhbS9vY2FtbC01LjIuMC9saWIvanNfb2Zfb2NhbWwtbHd0L2ltcG9ydC5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsT0FBQTtBQUFBLFlBQUFDLE9BQUFDLEdBQUFDLEdDcUMwQixxQkFBSztBQUFBLFlBQUFGLFNBQUFDLEdBQUFDLEdBRUosc0JBQU07QUFBQSxZQUFBRixTQUFBQyxHQUFBQyxHQUVOLHVCQUFNO0FBQUEsWUFBQUYsU0FBQUMsR0FBQUMsR0FFUCx1QkFBSztBQUFBLFlBQUFGLFNBQUFDLEdBQUFDLEdBRUwscUJBQUs7QUFBQSxZQUFBRixTQUFBQyxHQUFBQyxHQUVK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QUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQXhFLFdBQUE7QUFBQSxJQUFBQSxXQUFBO0FBQUEsSUFBQUEsV0FBQTtBQUFBLElBQUFBLFdBQUE7QUFBQSxJQUFBQSxXQUFBO0FBQUEsSUFBQUEsWUFBQTtBQUFBLElBQUFHLFlBQUE7QUFBQSxJQUFBQyxVQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBbUU7QUFBQUEsTUFBQSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwiKCogSnNfb2Zfb2NhbWxcbiAqIGh0dHA6Ly93d3cub2NzaWdlbi5vcmcvanNfb2Zfb2NhbWwvXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgd2l0aCBsaW5raW5nIGV4Y2VwdGlvbjtcbiAqIGVpdGhlciB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1wbGUgUGxhY2UgLSBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgMDIxMTEtMTMwNywgVVNBLlxuICopXG5cbm1vZHVsZSBQb2x5ID0gc3RydWN0XG4gIGV4dGVybmFsICggPCApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWxlc3N0aGFuXCJcblxuICBleHRlcm5hbCAoIDw9ICkgOiAnYSAtPiAnYSAtPiBib29sID0gXCIlbGVzc2VxdWFsXCJcblxuICBleHRlcm5hbCAoIDw+ICkgOiAnYSAtPiAnYSAtPiBib29sID0gXCIlbm90ZXF1YWxcIlxuXG4gIGV4dGVybmFsICggPSApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWVxdWFsXCJcblxuICBleHRlcm5hbCAoID4gKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVncmVhdGVydGhhblwiXG5cbiAgZXh0ZXJuYWwgKCA+PSApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWdyZWF0ZXJlcXVhbFwiXG5cbiAgZXh0ZXJuYWwgY29tcGFyZSA6ICdhIC0+ICdhIC0+IGludCA9IFwiJWNvbXBhcmVcIlxuXG4gIGV4dGVybmFsIGVxdWFsIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWVxdWFsXCJcbmVuZFxuXG5tb2R1bGUgSW50X3JlcGxhY2VfcG9seW1vcnBoaWNfY29tcGFyZSA9IHN0cnVjdFxuICBsZXQgKCA8ICkgKHggOiBpbnQpIHkgPSB4IDwgeVxuXG4gIGxldCAoIDw9ICkgKHggOiBpbnQpIHkgPSB4IDw9IHlcblxuICBsZXQgKCA8PiApICh4IDogaW50KSB5ID0geCA8PiB5XG5cbiAgbGV0ICggPSApICh4IDogaW50KSB5ID0geCA9IHlcblxuICBsZXQgKCA+ICkgKHggOiBpbnQpIHkgPSB4ID4geVxuXG4gIGxldCAoID49ICkgKHggOiBpbnQpIHkgPSB4ID49IHlcblxuICBsZXQgY29tcGFyZSAoeCA6IGludCkgeSA9IGNvbXBhcmUgeCB5XG5cbiAgbGV0IGVxdWFsICh4IDogaW50KSB5ID0geCA9IHlcblxuICBsZXQgbWF4ICh4IDogaW50KSB5ID0gaWYgeCA+PSB5IHRoZW4geCBlbHNlIHlcblxuICBsZXQgbWluICh4IDogaW50KSB5ID0gaWYgeCA8PSB5IHRoZW4geCBlbHNlIHlcbmVuZFxuXG5tb2R1bGUgU3RyaW5nID0gc3RydWN0XG4gIGluY2x1ZGUgU3RyaW5nXG5cbiAgbGV0IGVxdWFsICh4IDogc3RyaW5nKSAoeSA6IHN0cmluZykgPSBQb2x5LmVxdWFsIHggeVxuZW5kXG5cbm1vZHVsZSBDaGFyID0gc3RydWN0XG4gIGluY2x1ZGUgQ2hhclxuXG4gIGxldCBlcXVhbCAoeCA6IGNoYXIpICh5IDogY2hhcikgPSBQb2x5LmVxdWFsIHggeVxuZW5kXG5cbmluY2x1ZGUgSW50X3JlcGxhY2VfcG9seW1vcnBoaWNfY29tcGFyZVxuIl0sImlnbm9yZUxpc3QiOlswXX19LHsib2Zmc2V0Ijp7ImxpbmUiOjIzNywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJqc19vZl9vY2FtbF9sd3QuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImNzdCIsImNzdF9HRVQiLCJjc3RfUE9TVCIsImNzdF9saWJfbHd0X2x3dF94bWxIdHRwUmVxdWVzdCIsImNhbWxfanNzdHJpbmdfb2Zfc3RyaW5nIiwiY2FtbF9tYXliZV9hdHRhY2hfYmFja3RyYWNlIiwiY2FtbF9zdHJpbmdfb2ZfanNzdHJpbmciLCJjYW1sX3dyYXBfZXhjZXB0aW9uIiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImNhbWxfY2FsbDMiLCJhMiIsImdsb2JhbF9kYXRhIiwiYyIsIkpzX29mX29jYW1sX1VybCIsIkpzX29mX29jYW1sX0pzIiwiSnNfb2Zfb2NhbWxfRG9tIiwiSnNfb2Zfb2NhbWxfRG9tX2h0bWwiLCJMd3QiLCJKc19vZl9vY2FtbF9Gb3JtIiwiU3RkbGliX0xpc3QiLCJTdGRsaWIiLCJKc19vZl9vY2FtbF9YbWxIdHRwUmVxdWVzdCIsIkpzX29mX29jYW1sX2x3dF9JbXBvcnQiLCJBc3NlcnRfZmFpbHVyZSIsIkpzX29mX29jYW1sX0ZpbGUiLCJXcm9uZ19oZWFkZXJzIiwiY3N0X1BBVENIIiwiY3N0X0hFQUQiLCJjc3RfREVMRVRFIiwiY3N0X1BVVCIsImNzdF9PUFRJT05TIiwicGVyZm9ybV9yYXciLCJjb250ZW50X3R5cGUiLCJvcHQiLCJwcm9ncmVzcyIsInVwbG9hZF9wcm9ncmVzcyIsImNvbnRlbnRzIiwib3ZlcnJpZGVfbWltZV90eXBlIiwib3ZlcnJpZGVfbWV0aG9kIiwid2l0aF9jcmVkZW50aWFscyIsInJlc3BvbnNlX3R5cGUiLCJ1cmwiLCJoZWFkZXJzIiwiZ2V0X2FyZ3MiLCJjaGVja19oZWFkZXJzIiwicGFyYW0iLCJhcmdzIiwib25seV9zdHJpbmdzIiwieCIsImZvcm1fY29udGVudHMiLCJ2YWx1ZSIsIm5hbWUiLCJiIiwibSIsInYiLCJtYXRjaCIsImZvcm0iLCJtZXRob2QiLCJ3IiwicmVzIiwicmVxIiwidDExIiwidDEwIiwidDkiLCJtaW1lX3R5cGUiLCJ0MTMiLCJ0MjciLCJ0MzAiLCJuIiwidDMzIiwidDMyIiwicyIsInQzNSIsInN0IiwiZG9fY2hlY2tfaGVhZGVycyIsInQ0NyIsImNvZGUiLCJyZXNwb25zZSIsImRvYyIsInQ1MSIsInQ1MCIsInVwbG9hZCIsInQ1NiIsInQ1NSIsImwiLCJ0MCIsInQ2MCIsInQ2MiIsInQ2NiIsInQ2NCIsInQ1OCIsInBlcmZvcm1fcmF3X3VybCIsInBlcmZvcm0iLCJnZXQiLCJKc19vZl9vY2FtbF9sd3RfTHd0X3htbEh0dHBSZXEiXSwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9ob21lL2JlZWxpZ3VsLy5vcGFtL29jYW1sLTUuMi4wL2xpYi9qc19vZl9vY2FtbC1sd3QvbHd0X3htbEh0dHBSZXF1ZXN0Lm1sIl0s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O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFBdkIsb0NBQXVCO0FBQUE7QUFBQSxZQUFBa0QsSUFBQXRCLEdBRWYsdURBQWlCO0FBQUE7QUFBQSxJQUFBdUI7QUFBQUEsTUQvVDdCIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCIoKiBKc19vZl9vY2FtbCBsaWJyYXJ5XG4gKiBodHRwOi8vd3d3Lm9jc2lnZW4ub3JnL2pzX29mX29jYW1sL1xuICogQ29weXJpZ2h0IChDKSAyMDEwIErDqXLDtG1lIFZvdWlsbG9uXG4gKiBMYWJvcmF0b2lyZSBQUFMgLSBDTlJTIFVuaXZlcnNpdMOpIFBhcmlzIERpZGVyb3RcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCB3aXRoIGxpbmtpbmcgZXhjZXB0aW9uO1xuICogZWl0aGVyIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFjZSAtIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3LCBVU0EuXG4gKilcblxub3BlbiBKc19vZl9vY2FtbFxub3BlbiBKc1xub3BlbiBYbWxIdHRwUmVxdWVzdFxub3BlbiEgSW1wb3J0XG5cbmxldCBlbmNvZGVfdXJsIGwgPVxuICBTdHJpbmcuY29uY2F0XG4gICAgXCImXCJcbiAgICAoTGlzdC5tYXBcbiAgICAgICAoZnVuY3Rpb25cbiAgICAgICAgIHwgbmFtZSwgYFN0cmluZyBzIC0+IFVybC51cmxlbmNvZGUgbmFtZSBeIFwiPVwiIF4gVXJsLnVybGVuY29kZSAodG9fc3RyaW5nIHMpXG4gICAgICAgICB8IG5hbWUsIGBGaWxlIHMgLT4gVXJsLnVybGVuY29kZSBuYW1lIF4gXCI9XCIgXiBVcmwudXJsZW5jb2RlICh0b19zdHJpbmcgcyMjLm5hbWUpKVxuICAgICAgIGwpXG5cbigqIEhpZ2hlciBsZXZlbCBpbnRlcmZhY2U6ICopXG5cbnR5cGUgJ3Jlc3BvbnNlIGdlbmVyaWNfaHR0cF9mcmFtZSA9XG4gIHsgdXJsIDogc3RyaW5nXG4gIDsgY29kZSA6IGludFxuICA7IGhlYWRlcnMgOiBzdHJpbmcgLT4gc3RyaW5nIG9wdGlvblxuICA7IGNvbnRlbnQgOiAncmVzcG9uc2VcbiAgOyBjb250ZW50X3htbCA6IHVuaXQgLT4gRG9tLmVsZW1lbnQgRG9tLmRvY3VtZW50IHQgb3B0aW9uXG4gIH1cbigqKiB0eXBlIG9mIHRoZSBodHRwIGhlYWRlcnMgKilcblxudHlwZSBodHRwX2ZyYW1lID0gc3RyaW5nIGdlbmVyaWNfaHR0cF9mcmFtZVxuXG5leGNlcHRpb24gV3JvbmdfaGVhZGVycyBvZiAoaW50ICogKHN0cmluZyAtPiBzdHJpbmcgb3B0aW9uKSlcblxubGV0IGRlZmF1bHRfcmVzcG9uc2UgdXJsIGNvZGUgaGVhZGVycyByZXEgPVxuICB7IHVybFxuICA7IGNvZGVcbiAgOyBjb250ZW50ID0gSnMuT3B0LmNhc2UgcmVxIyMucmVzcG9uc2VUZXh0IChmdW4gKCkgLT4gXCJcIikgKGZ1biB4IC0+IEpzLnRvX3N0cmluZyB4KVxuICA7IGNvbnRlbnRfeG1sID1cbiAgICAgIChmdW4gKCkgLT5cbiAgICAgICAgbWF0Y2ggSnMuT3B0LnRvX29wdGlvbiByZXEjIy5yZXNwb25zZVhNTCB3aXRoXG4gICAgICAgIHwgTm9uZSAtPiBOb25lXG4gICAgICAgIHwgU29tZSBkb2MgLT4gaWYgSnMuc29tZSBkb2MjIy5kb2N1bWVudEVsZW1lbnQgPT0gSnMubnVsbCB0aGVuIE5vbmUgZWxzZSBTb21lIGRvYylcbiAgOyBoZWFkZXJzXG4gIH1cblxubGV0IHRleHRfcmVzcG9uc2UgdXJsIGNvZGUgaGVhZGVycyByZXEgPVxuICB7IHVybFxuICA7IGNvZGVcbiAgOyBjb250ZW50ID0gSnMuT3B0LmNhc2UgcmVxIyMucmVzcG9uc2VUZXh0IChmdW4gKCkgLT4gSnMuc3RyaW5nIFwiXCIpIChmdW4geCAtPiB4KVxuICA7IGNvbnRlbnRfeG1sID0gKGZ1biAoKSAtPiBhc3NlcnQgZmFsc2UpXG4gIDsgaGVhZGVyc1xuICB9XG5cbmxldCBkb2N1bWVudF9yZXNwb25zZSB1cmwgY29kZSBoZWFkZXJzIHJlcSA9XG4gIHsgdXJsXG4gIDsgY29kZVxuICA7IGNvbnRlbnQgPSBGaWxlLkNvZXJjZVRvLmRvY3VtZW50IHJlcSMjLnJlc3BvbnNlXG4gIDsgY29udGVudF94bWwgPSAoZnVuICgpIC0+IGFzc2VydCBmYWxzZSlcbiAgOyBoZWFkZXJzXG4gIH1cblxubGV0IGpzb25fcmVzcG9uc2UgdXJsIGNvZGUgaGVhZGVycyByZXEgPVxuICB7IHVybFxuICA7IGNvZGVcbiAgOyBjb250ZW50ID0gRmlsZS5Db2VyY2VUby5qc29uIHJlcSMjLnJlc3BvbnNlXG4gIDsgY29udGVudF94bWwgPSAoZnVuICgpIC0+IGFzc2VydCBmYWxzZSlcbiAgOyBoZWFkZXJzXG4gIH1cblxubGV0IGJsb2JfcmVzcG9uc2UgdXJsIGNvZGUgaGVhZGVycyByZXEgPVxuICB7IHVybFxuICA7IGNvZGVcbiAgOyBjb250ZW50ID0gRmlsZS5Db2VyY2VUby5ibG9iIHJlcSMjLnJlc3BvbnNlXG4gIDsgY29udGVudF94bWwgPSAoZnVuICgpIC0+IGFzc2VydCBmYWxzZSlcbiAgOyBoZWFkZXJzXG4gIH1cblxubGV0IGFycmF5YnVmZmVyX3Jlc3BvbnNlIHVybCBjb2RlIGhlYWRlcnMgcmVxID1cbiAgeyB1cmxcbiAgOyBjb2RlXG4gIDsgY29udGVudCA9IEZpbGUuQ29lcmNlVG8uYXJyYXlCdWZmZXIgcmVxIyMucmVzcG9uc2VcbiAgOyBjb250ZW50X3htbCA9IChmdW4gKCkgLT4gYXNzZXJ0IGZhbHNlKVxuICA7IGhlYWRlcnNcbiAgfVxuXG5sZXQgaGFzX2dldF9hcmdzIHVybCA9XG4gIHRyeVxuICAgIGlnbm9yZSAoU3RyaW5nLmluZGV4IHVybCAnPycpO1xuICAgIHRydWVcbiAgd2l0aCBOb3RfZm91bmQgLT4gZmFsc2VcblxubGV0IHBlcmZvcm1fcmF3XG4gICAgPyhoZWFkZXJzID0gW10pXG4gICAgP2NvbnRlbnRfdHlwZVxuICAgID8oZ2V0X2FyZ3MgPSBbXSlcbiAgICA/KGNoZWNrX2hlYWRlcnMgPSBmdW4gXyBfIC0+IHRydWUpXG4gICAgP3Byb2dyZXNzXG4gICAgP3VwbG9hZF9wcm9ncmVzc1xuICAgID9jb250ZW50c1xuICAgID9vdmVycmlkZV9taW1lX3R5cGVcbiAgICA/b3ZlcnJpZGVfbWV0aG9kXG4gICAgP3dpdGhfY3JlZGVudGlhbHNcbiAgICAodHlwZSByZXNwdHlwZSlcbiAgICB+KHJlc3BvbnNlX3R5cGUgOiByZXNwdHlwZSByZXNwb25zZSlcbiAgICB1cmwgPVxuICBsZXQgY29udGVudHNfbm9ybWFsaXphdGlvbiA9IGZ1bmN0aW9uXG4gICAgfCBgUE9TVF9mb3JtIGFyZ3MgLT5cbiAgICAgICAgbGV0IG9ubHlfc3RyaW5ncyA9XG4gICAgICAgICAgTGlzdC5mb3JfYWxsXG4gICAgICAgICAgICAoZnVuIHggLT5cbiAgICAgICAgICAgICAgbWF0Y2ggeCB3aXRoXG4gICAgICAgICAgICAgIHwgXywgYFN0cmluZyBfIC0+IHRydWVcbiAgICAgICAgICAgICAgfCBfIC0+IGZhbHNlKVxuICAgICAgICAgICAgYXJnc1xuICAgICAgICBpblxuICAgICAgICBsZXQgZm9ybV9jb250ZW50cyA9XG4gICAgICAgICAgaWYgb25seV9zdHJpbmdzIHRoZW4gYEZpZWxkcyAocmVmIFtdKSBlbHNlIEZvcm0uZW1wdHlfZm9ybV9jb250ZW50cyAoKVxuICAgICAgICBpblxuICAgICAgICBMaXN0Lml0ZXIgKGZ1biAobmFtZSwgdmFsdWUpIC0+IEZvcm0uYXBwZW5kIGZvcm1fY29udGVudHMgKG5hbWUsIHZhbHVlKSkgYXJncztcbiAgICAgICAgYEZvcm1fY29udGVudHMgZm9ybV9jb250ZW50c1xuICAgIHwgKGBTdHJpbmcgXyB8IGBGb3JtX2NvbnRlbnRzIF8pIGFzIHggLT4geFxuICAgIHwgYEJsb2IgYiAtPiBgQmxvYiAoYiA6ICNGaWxlLmJsb2IgSnMudCA6PiBGaWxlLmJsb2IgSnMudClcbiAgaW5cbiAgbGV0IGNvbnRlbnRzID1cbiAgICBtYXRjaCBjb250ZW50cyB3aXRoXG4gICAgfCBOb25lIC0+IE5vbmVcbiAgICB8IFNvbWUgYyAtPiBTb21lIChjb250ZW50c19ub3JtYWxpemF0aW9uIGMpXG4gIGluXG4gIGxldCBtZXRob2RfdG9fc3RyaW5nIG0gPVxuICAgIG1hdGNoIG0gd2l0aFxuICAgIHwgYEdFVCAtPiBcIkdFVFwiXG4gICAgfCBgUE9TVCAtPiBcIlBPU1RcIlxuICAgIHwgYEhFQUQgLT4gXCJIRUFEXCJcbiAgICB8IGBQVVQgLT4gXCJQVVRcIlxuICAgIHwgYERFTEVURSAtPiBcIkRFTEVURVwiXG4gICAgfCBgT1BUSU9OUyAtPiBcIk9QVElPTlNcIlxuICAgIHwgYFBBVENIIC0+IFwiUEFUQ0hcIlxuICBpblxuICBsZXQgbWV0aG9kXywgY29udGVudF90eXBlID1cbiAgICBsZXQgb3ZlcnJpZGVfbWV0aG9kIG0gPVxuICAgICAgbWF0Y2ggb3ZlcnJpZGVfbWV0aG9kIHdpdGhcbiAgICAgIHwgTm9uZSAtPiBtXG4gICAgICB8IFNvbWUgdiAtPiBtZXRob2RfdG9fc3RyaW5nIHZcbiAgICBpblxuICAgIGxldCBvdmVycmlkZV9jb250ZW50X3R5cGUgYyA9XG4gICAgICBtYXRjaCBjb250ZW50X3R5cGUgd2l0aFxuICAgICAgfCBOb25lIC0+IFNvbWUgY1xuICAgICAgfCBTb21lIF8gLT4gY29udGVudF90eXBlXG4gICAgaW5cbiAgICBtYXRjaCBjb250ZW50cyB3aXRoXG4gICAgfCBOb25lIC0+IG92ZXJyaWRlX21ldGhvZCBcIkdFVFwiLCBjb250ZW50X3R5cGVcbiAgICB8IFNvbWUgKGBGb3JtX2NvbnRlbnRzIGZvcm0pIC0+IChcbiAgICAgICAgbWF0Y2ggZm9ybSB3aXRoXG4gICAgICAgIHwgYEZpZWxkcyBfc3RyaW5ncyAtPlxuICAgICAgICAgICAgKCBvdmVycmlkZV9tZXRob2QgXCJQT1NUXCJcbiAgICAgICAgICAgICwgb3ZlcnJpZGVfY29udGVudF90eXBlIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKVxuICAgICAgICB8IGBGb3JtRGF0YSBfIC0+IG92ZXJyaWRlX21ldGhvZCBcIlBPU1RcIiwgY29udGVudF90eXBlKVxuICAgIHwgU29tZSAoYFN0cmluZyBfIHwgYEJsb2IgXykgLT4gb3ZlcnJpZGVfbWV0aG9kIFwiUE9TVFwiLCBjb250ZW50X3R5cGVcbiAgaW5cbiAgbGV0IHVybCA9XG4gICAgaWYgUG9seS4oZ2V0X2FyZ3MgPSBbXSlcbiAgICB0aGVuIHVybFxuICAgIGVsc2UgdXJsIF4gKGlmIGhhc19nZXRfYXJncyB1cmwgdGhlbiBcIiZcIiBlbHNlIFwiP1wiKSBeIFVybC5lbmNvZGVfYXJndW1lbnRzIGdldF9hcmdzXG4gIGluXG4gIGxldCAocmVzIDogcmVzcHR5cGUgZ2VuZXJpY19odHRwX2ZyYW1lIEx3dC50KSwgdyA9IEx3dC50YXNrICgpIGluXG4gIGxldCByZXEgPSBjcmVhdGUgKCkgaW5cbiAgcmVxIyNfb3BlbiAoSnMuc3RyaW5nIG1ldGhvZF8pIChKcy5zdHJpbmcgdXJsKSBKcy5fdHJ1ZTtcbiAgKG1hdGNoIG92ZXJyaWRlX21pbWVfdHlwZSB3aXRoXG4gIHwgTm9uZSAtPiAoKVxuICB8IFNvbWUgbWltZV90eXBlIC0+IHJlcSMjb3ZlcnJpZGVNaW1lVHlwZSAoSnMuc3RyaW5nIG1pbWVfdHlwZSkpO1xuICAobWF0Y2ggcmVzcG9uc2VfdHlwZSB3aXRoXG4gIHwgQXJyYXlCdWZmZXIgLT4gcmVxIyMucmVzcG9uc2VUeXBlIDo9IEpzLnN0cmluZyBcImFycmF5YnVmZmVyXCJcbiAgfCBCbG9iIC0+IHJlcSMjLnJlc3BvbnNlVHlwZSA6PSBKcy5zdHJpbmcgXCJibG9iXCJcbiAgfCBEb2N1bWVudCAtPiByZXEjIy5yZXNwb25zZVR5cGUgOj0gSnMuc3RyaW5nIFwiZG9jdW1lbnRcIlxuICB8IEpTT04gLT4gcmVxIyMucmVzcG9uc2VUeXBlIDo9IEpzLnN0cmluZyBcImpzb25cIlxuICB8IFRleHQgLT4gcmVxIyMucmVzcG9uc2VUeXBlIDo9IEpzLnN0cmluZyBcInRleHRcIlxuICB8IERlZmF1bHQgLT4gcmVxIyMucmVzcG9uc2VUeXBlIDo9IEpzLnN0cmluZyBcIlwiKTtcbiAgKG1hdGNoIHdpdGhfY3JlZGVudGlhbHMgd2l0aFxuICB8IFNvbWUgYyAtPiByZXEjIy53aXRoQ3JlZGVudGlhbHMgOj0gSnMuYm9vbCBjXG4gIHwgTm9uZSAtPiAoKSk7XG4gIChtYXRjaCBjb250ZW50X3R5cGUgd2l0aFxuICB8IFNvbWUgY29udGVudF90eXBlIC0+XG4gICAgICByZXEjI3NldFJlcXVlc3RIZWFkZXIgKEpzLnN0cmluZyBcIkNvbnRlbnQtdHlwZVwiKSAoSnMuc3RyaW5nIGNvbnRlbnRfdHlwZSlcbiAgfCBfIC0+ICgpKTtcbiAgTGlzdC5pdGVyIChmdW4gKG4sIHYpIC0+IHJlcSMjc2V0UmVxdWVzdEhlYWRlciAoSnMuc3RyaW5nIG4pIChKcy5zdHJpbmcgdikpIGhlYWRlcnM7XG4gIGxldCBoZWFkZXJzIHMgPVxuICAgIE9wdC5jYXNlXG4gICAgICAocmVxIyNnZXRSZXNwb25zZUhlYWRlciAoSnMuYnl0ZXN0cmluZyBzKSlcbiAgICAgIChmdW4gKCkgLT4gTm9uZSlcbiAgICAgIChmdW4gdiAtPiBTb21lIChKcy50b19zdHJpbmcgdikpXG4gIGluXG4gIGxldCBkb19jaGVja19oZWFkZXJzID1cbiAgICBsZXQgc3QgPSByZWYgYE5vdF95ZXQgaW5cbiAgICBmdW4gKCkgLT5cbiAgICAgIGlmIFBvbHkuKCFzdCA9IGBOb3RfeWV0KVxuICAgICAgdGhlblxuICAgICAgICBpZiBjaGVja19oZWFkZXJzIHJlcSMjLnN0YXR1cyBoZWFkZXJzXG4gICAgICAgIHRoZW4gc3QgOj0gYFBhc3NlZFxuICAgICAgICBlbHNlIChcbiAgICAgICAgICBMd3Qud2FrZXVwX2V4biB3IChXcm9uZ19oZWFkZXJzIChyZXEjIy5zdGF0dXMsIGhlYWRlcnMpKTtcbiAgICAgICAgICBzdCA6PSBgRmFpbGVkO1xuICAgICAgICAgIHJlcSMjYWJvcnQpO1xuICAgICAgUG9seS4oIXN0IDw+IGBGYWlsZWQpXG4gIGluXG4gIHJlcSMjLm9ucmVhZHlzdGF0ZWNoYW5nZSA6PVxuICAgIEpzLndyYXBfY2FsbGJhY2sgKGZ1biBfIC0+XG4gICAgICAgIG1hdGNoIHJlcSMjLnJlYWR5U3RhdGUgd2l0aFxuICAgICAgICAoKiBJRSBkb2Vzbid0IGhhdmUgdGhlIHNhbWUgc2VtYW50aWNzIGZvciBIRUFERVJTX1JFQ0VJVkVELlxuICAgICAgICAgICAgIHNvIHdlIHdhaXQgdGlsIExPQURJTkcgdG8gY2hlY2sgaGVhZGVycy4gU2VlOlxuICAgICAgICAgICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNDM2MSh2PXZzLjg1KS5hc3B4ICopXG4gICAgICAgIHwgSEVBREVSU19SRUNFSVZFRCB3aGVuIG5vdCBEb21faHRtbC5vbklFIC0+IGlnbm9yZSAoZG9fY2hlY2tfaGVhZGVycyAoKSlcbiAgICAgICAgfCBMT0FESU5HIHdoZW4gRG9tX2h0bWwub25JRSAtPiBpZ25vcmUgKGRvX2NoZWNrX2hlYWRlcnMgKCkpXG4gICAgICAgIHwgRE9ORSAtPlxuICAgICAgICAgICAgKCogSWYgd2UgZGlkbid0IGNhdGNoIGEgcHJldmlvdXMgZXZlbnQsIHdlIGNoZWNrIHRoZSBoZWFkZXIuICopXG4gICAgICAgICAgICBpZiBkb19jaGVja19oZWFkZXJzICgpXG4gICAgICAgICAgICB0aGVuXG4gICAgICAgICAgICAgIGxldCByZXNwb25zZSA6IHJlc3B0eXBlIGdlbmVyaWNfaHR0cF9mcmFtZSA9XG4gICAgICAgICAgICAgICAgbWF0Y2ggcmVzcG9uc2VfdHlwZSB3aXRoXG4gICAgICAgICAgICAgICAgfCBBcnJheUJ1ZmZlciAtPiBhcnJheWJ1ZmZlcl9yZXNwb25zZSB1cmwgcmVxIyMuc3RhdHVzIGhlYWRlcnMgcmVxXG4gICAgICAgICAgICAgICAgfCBCbG9iIC0+IGJsb2JfcmVzcG9uc2UgdXJsIHJlcSMjLnN0YXR1cyBoZWFkZXJzIHJlcVxuICAgICAgICAgICAgICAgIHwgRG9jdW1lbnQgLT4gZG9jdW1lbnRfcmVzcG9uc2UgdXJsIHJlcSMjLnN0YXR1cyBoZWFkZXJzIHJlcVxuICAgICAgICAgICAgICAgIHwgSlNPTiAtPiBqc29uX3Jlc3BvbnNlIHVybCByZXEjIy5zdGF0dXMgaGVhZGVycyByZXFcbiAgICAgICAgICAgICAgICB8IFRleHQgLT4gdGV4dF9yZXNwb25zZSB1cmwgcmVxIyMuc3RhdHVzIGhlYWRlcnMgcmVxXG4gICAgICAgICAgICAgICAgfCBEZWZhdWx0IC0+IGRlZmF1bHRfcmVzcG9uc2UgdXJsIHJlcSMjLnN0YXR1cyBoZWFkZXJzIHJlcVxuICAgICAgICAgICAgICBpblxuICAgICAgICAgICAgICBMd3Qud2FrZXVwIHcgcmVzcG9uc2VcbiAgICAgICAgfCBfIC0+ICgpKTtcbiAgKG1hdGNoIHByb2dyZXNzIHdpdGhcbiAgfCBTb21lIHByb2dyZXNzIC0+XG4gICAgICByZXEjIy5vbnByb2dyZXNzIDo9XG4gICAgICAgIERvbS5oYW5kbGVyIChmdW4gZSAtPlxuICAgICAgICAgICAgcHJvZ3Jlc3MgZSMjLmxvYWRlZCBlIyMudG90YWw7XG4gICAgICAgICAgICBKcy5fdHJ1ZSlcbiAgfCBOb25lIC0+ICgpKTtcbiAgT3B0ZGVmLml0ZXIgcmVxIyMudXBsb2FkIChmdW4gdXBsb2FkIC0+XG4gICAgICBtYXRjaCB1cGxvYWRfcHJvZ3Jlc3Mgd2l0aFxuICAgICAgfCBTb21lIHVwbG9hZF9wcm9ncmVzcyAtPlxuICAgICAgICAgIHVwbG9hZCMjLm9ucHJvZ3Jlc3MgOj1cbiAgICAgICAgICAgIERvbS5oYW5kbGVyIChmdW4gZSAtPlxuICAgICAgICAgICAgICAgIHVwbG9hZF9wcm9ncmVzcyBlIyMubG9hZGVkIGUjIy50b3RhbDtcbiAgICAgICAgICAgICAgICBKcy5fdHJ1ZSlcbiAgICAgIHwgTm9uZSAtPiAoKSk7XG4gIChtYXRjaCBjb250ZW50cyB3aXRoXG4gIHwgTm9uZSAtPiByZXEjI3NlbmQgSnMubnVsbFxuICB8IFNvbWUgKGBGb3JtX2NvbnRlbnRzIChgRmllbGRzIGwpKSAtPiByZXEjI3NlbmQgKEpzLnNvbWUgKHN0cmluZyAoZW5jb2RlX3VybCAhbCkpKVxuICB8IFNvbWUgKGBGb3JtX2NvbnRlbnRzIChgRm9ybURhdGEgZikpIC0+IHJlcSMjc2VuZF9mb3JtRGF0YSBmXG4gIHwgU29tZSAoYFN0cmluZyBzKSAtPiByZXEjI3NlbmQgKEpzLnNvbWUgKEpzLnN0cmluZyBzKSlcbiAgfCBTb21lIChgQmxvYiBiKSAtPiByZXEjI3NlbmRfYmxvYiBiKTtcbiAgTHd0Lm9uX2NhbmNlbCByZXMgKGZ1biAoKSAtPiByZXEjI2Fib3J0KTtcbiAgcmVzXG5cbmxldCBwZXJmb3JtX3Jhd191cmxcbiAgICA/KGhlYWRlcnMgPSBbXSlcbiAgICA/Y29udGVudF90eXBlXG4gICAgPyhnZXRfYXJncyA9IFtdKVxuICAgID9jaGVja19oZWFkZXJzXG4gICAgP3Byb2dyZXNzXG4gICAgP3VwbG9hZF9wcm9ncmVzc1xuICAgID9jb250ZW50c1xuICAgID9vdmVycmlkZV9taW1lX3R5cGVcbiAgICA/b3ZlcnJpZGVfbWV0aG9kXG4gICAgP3dpdGhfY3JlZGVudGlhbHNcbiAgICB1cmwgPVxuICBwZXJmb3JtX3Jhd1xuICAgIH5oZWFkZXJzXG4gICAgP2NvbnRlbnRfdHlwZVxuICAgIH5nZXRfYXJnc1xuICAgID9jb250ZW50c1xuICAgID9jaGVja19oZWFkZXJzXG4gICAgP3Byb2dyZXNzXG4gICAgP3VwbG9hZF9wcm9ncmVzc1xuICAgID9vdmVycmlkZV9taW1lX3R5cGVcbiAgICA/b3ZlcnJpZGVfbWV0aG9kXG4gICAgP3dpdGhfY3JlZGVudGlhbHNcbiAgICB+cmVzcG9uc2VfdHlwZTpEZWZhdWx0XG4gICAgdXJsXG5cbmxldCBwZXJmb3JtXG4gICAgPyhoZWFkZXJzID0gW10pXG4gICAgP2NvbnRlbnRfdHlwZVxuICAgID8oZ2V0X2FyZ3MgPSBbXSlcbiAgICA/Y2hlY2tfaGVhZGVyc1xuICAgID9wcm9ncmVzc1xuICAgID91cGxvYWRfcHJvZ3Jlc3NcbiAgICA/Y29udGVudHNcbiAgICA/b3ZlcnJpZGVfbWltZV90eXBlXG4gICAgP292ZXJyaWRlX21ldGhvZFxuICAgID93aXRoX2NyZWRlbnRpYWxzXG4gICAgdXJsID1cbiAgcGVyZm9ybV9yYXdcbiAgICB+aGVhZGVyc1xuICAgID9jb250ZW50X3R5cGVcbiAgICB+Z2V0X2FyZ3NcbiAgICA/Y29udGVudHNcbiAgICA/Y2hlY2tfaGVhZGVyc1xuICAgID9wcm9ncmVzc1xuICAgID91cGxvYWRfcHJvZ3Jlc3NcbiAgICA/b3ZlcnJpZGVfbWltZV90eXBlXG4gICAgP292ZXJyaWRlX21ldGhvZFxuICAgID93aXRoX2NyZWRlbnRpYWxzXG4gICAgfnJlc3BvbnNlX3R5cGU6RGVmYXVsdFxuICAgIChVcmwuc3RyaW5nX29mX3VybCB1cmwpXG5cbmxldCBnZXQgcyA9IHBlcmZvcm1fcmF3X3VybCBzXG4iXSwiaWdub3JlTGlzdCI6WzBdfX0seyJvZmZzZXQiOnsibGluZSI6NzUyLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6ImpzX29mX29jYW1sX2x3dC5jbWEuanMiLCJuYW1lcyI6WyJydW50aW1lIiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImdsb2JhbF9kYXRhIiwiU3RkbGliX1ByaW50ZXhjIiwiU3RkbGliIiwiSnNfb2Zfb2NhbWxfRmlyZWJ1ZyIsIkx3dCIsIkpzX29mX29jYW1sX0RvbV9odG1sIiwic2xlZXAiLCJkIiwibWF0Y2giLCJ3IiwidCIsImlkIiwicGFyYW0iLCJ5aWVsZCIsIndha2V1cCIsInQwIiwidDIiLCJjc3RfRXhjZXB0aW9uX2R1cmluZ19Md3RfYXN5bmMiLCJkdW1teSIsInByZXJyX3N0cmluZyIsInMiLCJ0MyIsInQ0IiwiZXhuIiwiSnNfb2Zfb2NhbWxfbHd0X0x3dF9qcyJdLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIiwiL2hvbWUvYmVlbGlndWwvLm9wYW0vb2NhbWwtNS4yLjAvbGliL2pzX29mX29jYW1sLWx3dC9sd3RfanMubWwiXSwibWFwcGluZ3MiOiJPQUFBQSxVQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxrQkFBQTtBQUFBLElBQUFDLFNBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLElBQUFDLE1BQUE7QUFBQSxJQUFBQyx1QkFBQTtBQUFBLFlBQUFDLE1BQUFDO0FBQUFBO0FBQUFBLEtBQUFDLFFDd0JhO0FBQUEsS0FBQUMsSUFBVztBQUFBLEtBQUFDLElBQUE7QUFBQSxXQUNPO0FBQUEsS0FBQUMsS0FBcEI7QUFBQSxJQUNUO0FBQUE7QUFBQTtBQUFBLGVBQUFDLE9BQTJCLGdEQUF3QjtBQUFBLElBQUM7QUFBQSxHQUNuRDtBQUFBLFlBQUFDLFFBQUFELE9BRVksZ0JBQVE7QUFBQSxZQUFBRSxPQUFBRjtBQUFBQSxJQUVWLGdCQUlKO0FBQUE7QUFBQSxLQUFBRyxLQUQ0QjtBQUFBLEtBQUFDLEtBQW9DO0FBQUEsSUFBakU7QUFBQSxJQUFnRjtBQUFBLEdBQzdFO0FBQUEsR0FFRjtBQUFBO0FBQUEsSUFBQUMsaUNBQWtDO0FBQUEsSUFBQUMsUUFBQTtBQUFBLFlBQUFDLGFBQUFDO0FBQUFBLFFBQUFDLEtBRUQsb0NBQUFDLEtBQWE7QUFBQTtBQUFBO0FBQUEsR0FGWjtBQUFBLGFBQUFDO0FBQUFBLEtBT3JDO0FBQUEsS0FDQSxhQUFhO0FBQUEsS0FBd0IsaURBQ047QUFBQTtBQUFBLE9BQUFDLHlCQVRNO0FBQUE7QUFBQTtBQUFBO0FBQUEsRURyQzNDIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCIoKiBKc19vZl9vY2FtbCBsaWJyYXJ5XG4gKiBodHRwOi8vd3d3Lm9jc2lnZW4ub3JnL2pzX29mX29jYW1sL1xuICogQ29weXJpZ2h0IChDKSAyMDEwIErDqXLDtG1lIFZvdWlsbG9uXG4gKiBMYWJvcmF0b2lyZSBQUFMgLSBDTlJTIFVuaXZlcnNpdMOpIFBhcmlzIERpZGVyb3RcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCB3aXRoIGxpbmtpbmcgZXhjZXB0aW9uO1xuICogZWl0aGVyIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFjZSAtIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3LCBVU0EuXG4gKilcblxub3BlbiBKc19vZl9vY2FtbFxub3BlbiEgSW1wb3J0XG5cbmxldCBzbGVlcCBkID1cbiAgbGV0IHQsIHcgPSBMd3QudGFzayAoKSBpblxuICBsZXQgaWQgPSBEb21faHRtbC5zZXRUaW1lb3V0IChMd3Qud2FrZXVwIHcpIChkICouIDEwMDAuKSBpblxuICBMd3Qub25fY2FuY2VsIHQgKGZ1biAoKSAtPiBEb21faHRtbC5jbGVhclRpbWVvdXQgaWQpO1xuICB0XG5cbmxldCB5aWVsZCAoKSA9IHNsZWVwIDAuXG5cbmxldCB3YWtldXAgPSBmdW5jdGlvblxuICB8IDEgLT5cbiAgICAgIGlnbm9yZVxuICAgICAgICAoRG9tX2h0bWwud2luZG93IyNzZXRUaW1lb3V0IChKcy53cmFwX2NhbGxiYWNrIEx3dC53YWtldXBfcGF1c2VkKSAoSnMuZmxvYXQgMC4pKVxuICB8IF8gLT4gKClcblxubGV0ICgpID0gTHd0LnJlZ2lzdGVyX3BhdXNlX25vdGlmaWVyIHdha2V1cFxuXG5sZXQgcHJlcnJfc3RyaW5nIHMgPSBGaXJlYnVnLmNvbnNvbGUjI2xvZyAoSnMuc3RyaW5nIHMpXG5cbmxldCBfID1cbiAgTHd0LmFzeW5jX2V4Y2VwdGlvbl9ob29rIDo9XG4gICAgZnVuIGV4biAtPlxuICAgICAgcHJlcnJfc3RyaW5nIFwiRXhjZXB0aW9uIGR1cmluZyBMd3QuYXN5bmM6IFwiO1xuICAgICAgcHJlcnJfc3RyaW5nIChQcmludGV4Yy50b19zdHJpbmcgZXhuKTtcbiAgICAgIFByaW50ZXhjLnByaW50X2JhY2t0cmFjZSBzdGRlcnJcbiJdLCJpZ25vcmVMaXN0IjpbMF19fSx7Im9mZnNldCI6eyJsaW5lIjo4MTksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNfb2Zfb2NhbWxfbHd0LmNtYS5qcyIsIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3QiLCJjYW1sX2pzc3RyaW5nX29mX3N0cmluZyIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJnbG9iYWxfZGF0YSIsIlN0ZGxpYl9CdWZmZXIiLCJTdGRsaWJfUmFuZG9tIiwiSnNfb2Zfb2NhbWxfbHd0X0ltcG9ydCIsIkpzX29mX29jYW1sX0RvbV9odG1sIiwiSnNfb2Zfb2NhbWxfSnMiLCJKc19vZl9vY2FtbF9VcmwiLCJTdGRsaWIiLCJTdGRsaWJfTGlzdCIsIkx3dCIsIkpzX29mX29jYW1sX2x3dF9Md3RfanMiLCJKc19vZl9vY2FtbF9Eb20iLCJKc19vZl9vY2FtbF9GaXJlYnVnIiwiY3N0X0pzb25wX2NhbGxfQ2Fubm90X3BhcnNlX3VyIiwiY3N0X2NhbGxiYWNrIiwiY2FsbF9jdXN0b21fdXJsIiwidGltZW91dCIsIm9wdCIsIm1ha2VfdXJpIiwicHJlZml4IiwibWF0Y2giLCJ3IiwidCIsInVzZXJfY2IiLCJlcnJvcl9jYiIsInBhcmFtIiwic2l6ZSIsImIiLCJpIiwicyIsIm5hbWUiLCJ1cmkiLCJzY3JpcHQiLCJmaW5hbGl6ZSIsInBhcmVudCIsImV4ZWN1dGVkIiwieCIsInQxIiwidDUiLCJ0NyIsInQxMSIsInQxMCIsImRlbGF5Iiwid2FpdCIsIm5ld190IiwidDEzIiwiYWRkX3BhcmFtIiwidmFsdWUiLCJsIiwiY2FsbCIsInVybCIsImNibmFtZSIsImh0dHAiLCJuZXdfdXJsIiwiZmlsZSIsIkpzX29mX29jYW1sX2x3dF9Md3RfanNvbnAiXSwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9ob21lL2JlZWxpZ3VsLy5vcGFtL29jYW1sLTUuMi4wL2xpYi9qc19vZl9vY2FtbC1sd3QvbHd0X2pzb25wLm1sIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQywwQkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQVAsUUFBQTtBQUFBLElBQUFBLE1BQUE7QUFBQSxJQUFBUSxnQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMseUJBQUE7QUFBQSxJQUFBQyx1QkFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUEsSUFBQUMsa0JBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLE1BQUE7QUFBQSxJQUFBQyx5QkFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxJQUFBQyxpQ0FBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxZQUFBQyxnQkFBQUMsU0FBQUMsS0FBQUM7QUFBQUE7QUFBQUEsS0FBQUMsU0MwRW9CO0FBQUEsS0FBQUMsUUFDUDtBQUFBLEtBQUFDLElBQVc7QUFBQSxLQUFBQyxJQUFBO0FBQUEsS0FBQUMsVUFDNkM7QUFBQSxhQUFBQyxTQUFBQyxPQUFkLDZCQUFZO0FBQUEsUUFBQUMsT0FON0M7QUFBQTtBQUFBLFNBQUFDLElBL0NaLG9DQUFBQyxJQUNSO0FBQUE7QUFBQTtBQUFBLGFBQ29DO0FBQUEsYUFBaEI7QUFBQSxNQUFsQjtBQUFBLGdCQUFpRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFBQUMsSUFFM0M7QUFBQSxZQUN5QztBQUFBLEtBQTlDO0FBQUE7QUFBQTtBQUFBLEtBQUFDLE9BMENRO0FBQUEsS0FBQUMsTUFDRDtBQUFBLEtBQUFDLFNBckNhO0FBQUEsYUFBQUMsU0FBQVI7QUFBQUEsS0FFWTtBQUFBLEtBQ0Y7QUFBQTtBQUFBO0FBQUEsdUJBQUFTO0FBQUFBLGVBQWdCLHFEQUE2QjtBQUFBLGdCQUFDO0FBQUE7QUFBQSxRQUFBQyxXQUUvRTtBQUFBLElBR0U7QUFBQSxLQUNBO0FBQUEsZ0JBQUFDO0FBQUFBLFFBQ0s7QUFBQSxRQUNBO0FBQUEsUUFBVyw2QkFDRjtBQUFBO0FBQUEsUUFBQUMsS0FDQTtBQUFBLElBQWhCO0FBQUEsSUFDQTtBQUFBLFFBQUFDLEtBQTZDO0FBQUEsSUFDN0M7QUFBQSxhQUFBQyxHQUFBSCxHQUdBLGFBQVcsa0JBQ0Q7QUFBQSxJQUhWO0FBQUEsYUFBQUksSUFBQUo7QUFBQUEsS0FNQTtBQUFBO0FBQUEsdUJBQUFYO0FBQUFBLG1CQUFBLE1BQ2E7QUFBQSxlQUFpQjtBQUFBO0FBQUE7QUFBQSxpQ0FBQUE7QUFBQUEseUJBQ3RCLGdCQUNLO0FBQUEsNkJBQUFnQixNQUcyRDtBQUFBLHlCQUQ5RDtBQUFBLHlCQUVBO0FBQUEseUJBQ0E7QUFBQSx5QkFBVTtBQUFBLHdCQUNNLEVBQUM7QUFBQSxnQkFBQztBQUFBO0FBQUEsSUFYNUI7QUFBQSxJQXVCQTtBQUFBLElBQXdCO0FBQUE7QUFBQSxNQUFBQyxRQUFBO0FBQUEsWUFNUDtBQUFBLE1BQUFDO0FBQUFBLFFBQVQ7QUFBQSxnQ0FBQWxCLE9BQ0ksd0JBQVksU0FDWDtBQUFBLE1BQUFtQixRQUVQO0FBQUE7QUFBQSxTQUFBQSxRQVBNO0FBQUEsUUFBQUMsTUFkRTtBQUFBLElBQU87QUFBQSxJQXVCZDtBQUFBLEdBQ0Y7QUFBQSxZQUFBQyxVQUFBaEIsTUFBQWlCLE9BQUFDO0FBQUFBO0FBQUFBLEtBQUFBO0FBQUFBLE9BR0c7QUFBQTtBQUFBLGtCQUFBdkI7QUFBQUEsY0FBQVcsSUFBWTtBQUFBLFVBQW1CLDZEQUFxQjtBQUFBLFNBQUM7QUFBQTtBQUFBLElBQzdEO0FBQUEsR0FBa0I7QUFBQSxZQUFBYSxLQUFBakMsU0FBQSxLQUFBQyxLQUFBaUM7QUFBQUEsUUFBQXpCLFFBRVgsNkJBQUFOLFNBQUE7QUFBQSxhQUFBRCxTQUFBaUM7QUFBQUEsU0FBQS9CLFFBRUM7QUFBQSxLQUFxQixZQUNqQiw0REFvQm1CO0FBQUEsU0FBQThCLFFBckJGO0FBQUEsS0FHdkI7QUFBQTtBQUFBO0FBQUEsU0FBQUUsT0FBQTtBQUFBLGVBSzZCO0FBQUE7QUFBQSxTQUFBQyxVQUE0QztBQUFBO0FBQUE7QUFBQTtBQUFBLFNBQUFELFNBTHpFO0FBQUEsZUFVNkI7QUFBQTtBQUFBLFNBQUFDO0FBQUFBLFdBQTRDO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBQUMsT0FWekU7QUFBQSxlQWU2QjtBQUFBO0FBQUEsU0FBQUQsVUFBNEM7QUFBQTtBQUFBLEtBR3pFLDhDQUF5QjtBQUFBO0FBQUEsSUFFL0Isc0RBQXlDO0FBQUE7QUFBQSxPQUFBRSw0QkR6SDNDIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCIoKiBKc19vZl9vY2FtbCBsaWJyYXJ5XG4gKiBodHRwOi8vd3d3Lm9jc2lnZW4ub3JnL2pzX29mX29jYW1sL1xuICogQ29weXJpZ2h0IChDKSAyMDE0IEh1Z28gSGV1emFyZFxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIHdpdGggbGlua2luZyBleGNlcHRpb247XG4gKiBlaXRoZXIgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTkgVGVtcGxlIFBsYWNlIC0gU3VpdGUgMzMwLCBCb3N0b24sIE1BIDAyMTExLTEzMDcsIFVTQS5cbiAqKVxuXG5vcGVuIEpzX29mX29jYW1sXG5vcGVuISBJbXBvcnRcblxubGV0IHJlYyByYW5kb21faWRlbnRpZmllciBzaXplID1cbiAgbGV0IGIgPSBCdWZmZXIuY3JlYXRlIHNpemUgaW5cbiAgZm9yIF9pID0gMCB0byBzaXplIC0gMSBkb1xuICAgIEJ1ZmZlci5hZGRfY2hhciBiIChDaGFyLmNociAoOTcgKyBSYW5kb20uaW50IDI2KSlcbiAgZG9uZTtcbiAgbGV0IHMgPSBCdWZmZXIuY29udGVudHMgYiBpblxuICBpZiBKcy5PcHRkZWYudGVzdCAoSnMuVW5zYWZlLmdldCBEb21faHRtbC53aW5kb3cgKEpzLnN0cmluZyBzKSlcbiAgdGhlbiAoKiBuYW1lIGFscmVhZHkgaW4gdXNlLCBjaG9vc2UgYW5vdGhlciBvbmUqKVxuICAgIHJhbmRvbV9pZGVudGlmaWVyIHNpemVcbiAgZWxzZSBzXG5cbmxldCByYXdfY2FsbCBuYW1lIHVyaSBlcnJvcl9jYiB1c2VyX2NiID1cbiAgbGV0IHNjcmlwdCA9IERvbV9odG1sLihjcmVhdGVTY3JpcHQgZG9jdW1lbnQpIGluXG4gIGxldCBmaW5hbGl6ZSAoKSA9XG4gICAgSnMuVW5zYWZlLmRlbGV0ZSBEb21faHRtbC53aW5kb3cgKEpzLnN0cmluZyBuYW1lKTtcbiAgICBKcy5PcHQuaXRlciBzY3JpcHQjIy5wYXJlbnROb2RlIChmdW4gcGFyZW50IC0+IERvbS5yZW1vdmVDaGlsZCBwYXJlbnQgc2NyaXB0KVxuICBpblxuICBsZXQgZXhlY3V0ZWQgPSByZWYgZmFsc2UgaW5cbiAgSnMuVW5zYWZlLnNldFxuICAgIERvbV9odG1sLndpbmRvd1xuICAgIChKcy5zdHJpbmcgbmFtZSlcbiAgICAoSnMud3JhcF9jYWxsYmFjayAoZnVuIHggLT5cbiAgICAgICAgIGV4ZWN1dGVkIDo9IHRydWU7XG4gICAgICAgICBmaW5hbGl6ZSAoKTtcbiAgICAgICAgIHVzZXJfY2IgeCkpO1xuICBzY3JpcHQjIy5zcmMgOj0gSnMuc3RyaW5nIHVyaTtcbiAgc2NyaXB0IyMuX3R5cGUgOj0gSnMuc3RyaW5nIFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gIHNjcmlwdCMjLmFzeW5jIDo9IEpzLl90cnVlO1xuICAoKEpzLlVuc2FmZS5jb2VyY2Ugc2NyaXB0KSMjLm9uZXJyb3JcbiAgOj0gZnVuIHggLT5cbiAgZmluYWxpemUgKCk7XG4gIGVycm9yX2NiIHgpO1xuICAoKEpzLlVuc2FmZS5jb2VyY2Ugc2NyaXB0KSMjLm9ubG9hZFxuICA6PSBmdW4geCAtPlxuICBMd3QuYXN5bmMgKGZ1biAoKSAtPlxuICAgICAgTHd0LmJpbmQgKEx3dF9qcy5zbGVlcCAxLikgKGZ1biAoKSAtPlxuICAgICAgICAgIGlmICFleGVjdXRlZFxuICAgICAgICAgIHRoZW4gTHd0LnJldHVybl91bml0XG4gICAgICAgICAgZWxzZSAoXG4gICAgICAgICAgICBGaXJlYnVnLmNvbnNvbGUjI3dhcm5cbiAgICAgICAgICAgICAgKEpzLnN0cmluZyBcIkpzb25wOiBzY3JpcHQgbG9hZGVkIGJ1dCBjYWxsYmFjayBub3QgZXhlY3V0ZWRcIik7XG4gICAgICAgICAgICBmaW5hbGl6ZSAoKTtcbiAgICAgICAgICAgIGVycm9yX2NiIHg7XG4gICAgICAgICAgICBMd3QucmV0dXJuX3VuaXQpKSkpO1xuICBsZXQgaW5pdCAoKSA9IGlnbm9yZSAoRG9tLmFwcGVuZENoaWxkIERvbV9odG1sLmRvY3VtZW50IyMuYm9keSBzY3JpcHQpIGluXG4gIGluaXQsIGZpbmFsaXplXG5cbmxldCBjYWxsXyBwcmVmaXggbWFrZV91cmkgZXJyb3JfY2IgdXNlcl9jYiA9XG4gIGxldCBuYW1lID0gcHJlZml4IF4gcmFuZG9tX2lkZW50aWZpZXIgMTAgaW5cbiAgbGV0IHVyaSA9IG1ha2VfdXJpIG5hbWUgaW5cbiAgcmF3X2NhbGwgbmFtZSB1cmkgZXJyb3JfY2IgdXNlcl9jYlxuXG5sZXQgY2FsbF9jdXN0b21fdXJsID90aW1lb3V0ID8ocHJlZml4ID0gXCJcIikgbWFrZV91cmkgPVxuICBsZXQgdCwgdyA9IEx3dC50YXNrICgpIGluXG4gIGxldCBpbml0LCBmaW5hbGl6ZSA9IGNhbGxfIHByZWZpeCBtYWtlX3VyaSAoZnVuIF8gLT4gTHd0LmNhbmNlbCB0KSAoTHd0Lndha2V1cCB3KSBpblxuICBMd3Qub25fY2FuY2VsIHQgZmluYWxpemU7XG4gIGxldCBuZXdfdCA9XG4gICAgbWF0Y2ggdGltZW91dCB3aXRoXG4gICAgfCBOb25lIC0+IHRcbiAgICB8IFNvbWUgZGVsYXkgLT5cbiAgICAgICAgbGV0IHdhaXQgPVxuICAgICAgICAgIEx3dC5iaW5kIChMd3RfanMuc2xlZXAgZGVsYXkpIChmdW4gKCkgLT5cbiAgICAgICAgICAgICAgTHd0LmNhbmNlbCB0O1xuICAgICAgICAgICAgICB0KVxuICAgICAgICBpblxuICAgICAgICBMd3QuY2hvb3NlIFsgd2FpdDsgdCBdXG4gIGluXG4gIGluaXQgKCk7XG4gIG5ld190XG5cbmxldCBhZGRfcGFyYW0gbmFtZSB2YWx1ZSBsID1cbiAgbGV0IGwgPSBMaXN0LmZpbHRlciAoZnVuICh4LCBfKSAtPiBub3QgKFN0cmluZy5lcXVhbCB4IG5hbWUpKSBsIGluXG4gIChuYW1lLCB2YWx1ZSkgOjogbFxuXG5sZXQgY2FsbCA/dGltZW91dCA/KHBhcmFtID0gXCJjYWxsYmFja1wiKSA/KHByZWZpeCA9IFwiXCIpIHVybCA9XG4gIGxldCBtYWtlX3VyaSBjYm5hbWUgPVxuICAgIG1hdGNoIFVybC51cmxfb2Zfc3RyaW5nIHVybCB3aXRoXG4gICAgfCBOb25lIC0+IGZhaWx3aXRoIFwiSnNvbnAuY2FsbDogQ2Fubm90IHBhcnNlIHVybFwiXG4gICAgfCBTb21lIHVybCAtPlxuICAgICAgICBsZXQgbmV3X3VybCA9XG4gICAgICAgICAgbWF0Y2ggdXJsIHdpdGhcbiAgICAgICAgICB8IFVybC5IdHRwIGh0dHAgLT5cbiAgICAgICAgICAgICAgVXJsLkh0dHBcbiAgICAgICAgICAgICAgICB7IGh0dHAgd2l0aFxuICAgICAgICAgICAgICAgICAgVXJsLmh1X2FyZ3VtZW50cyA9IGFkZF9wYXJhbSBwYXJhbSBjYm5hbWUgaHR0cC5VcmwuaHVfYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgIHwgVXJsLkh0dHBzIGh0dHAgLT5cbiAgICAgICAgICAgICAgVXJsLkh0dHBzXG4gICAgICAgICAgICAgICAgeyBodHRwIHdpdGhcbiAgICAgICAgICAgICAgICAgIFVybC5odV9hcmd1bWVudHMgPSBhZGRfcGFyYW0gcGFyYW0gY2JuYW1lIGh0dHAuVXJsLmh1X2FyZ3VtZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICB8IFVybC5GaWxlIGZpbGUgLT5cbiAgICAgICAgICAgICAgVXJsLkZpbGVcbiAgICAgICAgICAgICAgICB7IGZpbGUgd2l0aFxuICAgICAgICAgICAgICAgICAgVXJsLmZ1X2FyZ3VtZW50cyA9IGFkZF9wYXJhbSBwYXJhbSBjYm5hbWUgZmlsZS5VcmwuZnVfYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBpblxuICAgICAgICBVcmwuc3RyaW5nX29mX3VybCBuZXdfdXJsXG4gIGluXG4gIGNhbGxfY3VzdG9tX3VybCA/dGltZW91dCB+cHJlZml4IG1ha2VfdXJpXG4iXSwiaWdub3JlTGlzdCI6WzBdfX0seyJvZmZzZXQiOnsibGluZSI6OTk1LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6ImpzX29mX29jYW1sX2x3dC5jbWEuanMiLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0X0x3dF9qc19ldmVudCIsImNzdF9jb21wbGV0ZSIsImNhbWxfanNfZnJvbV9ib29sIiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImNhbWxfY2FsbDMiLCJhMiIsImNhbWxfY2FsbDUiLCJhMyIsImE0IiwiY2FtbF9jYWxsNiIsImE1IiwiZ2xvYmFsX2RhdGEiLCJMd3QiLCJKc19vZl9vY2FtbF9Eb21faHRtbCIsIkpzX29mX29jYW1sX0RvbSIsIkpzX29mX29jYW1sX0ZpcmVidWciLCJKc19vZl9vY2FtbF9KcyIsIkpzX29mX29jYW1sX2x3dF9Md3RfanMiLCJKc19vZl9vY2FtbF9sd3RfSW1wb3J0IiwiTHd0X2NvbmRpdGlvbiIsIlN0ZGxpYiIsIlN0ZGxpYl9QcmludGV4YyIsInN5bWJvbF9iaW5kIiwiYXN5bmMiLCJwYXJhbSIsIm9wdF9tYXAiLCJ4IiwibWFrZV9ldmVudCIsImV2ZW50X2tpbmQiLCJ1c2VfY2FwdHVyZSIsInBhc3NpdmUiLCJ0YXJnZXQiLCJlbCIsIm1hdGNoIiwidyIsInQiLCJjYW5jZWwiLCJldiIsImNhdGNoX2NhbmNlbCIsImUiLCJ3aXRoX2Vycm9yX2xvZyIsInQwIiwidDEiLCJzZXFfbG9vcCIsImV2aCIsIm9wdCIsImhhbmRsZXIiLCJjYW5jZWxfaGFuZGxlciIsImNhbmNlbGxlZCIsImN1ciIsImN1cl9oYW5kbGVyIiwibHQiLCJhdXgiLCJhc3luY19sb29wIiwiYnVmZmVyZWRfbG9vcCIsImNhbmNlbF9xdWV1ZSIsInF1ZXVlIiwic3Bhd24iLCJzcGF3bmVyIiwicnVubmVyIiwidGwiLCJmdW5jX2xpbWl0ZWRfbG9vcCIsImV2ZW50IiwibGltaXRlZF9mdW5jIiwiY291bnQiLCJuYiIsImxpbWl0ZWRfbG9vcCIsImVsYXBzZWRfdGltZSIsImNsaWNrIiwiY29weSIsImN1dCIsInBhc3RlIiwiZGJsY2xpY2siLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwibW91c2VvdmVyIiwibW91c2Vtb3ZlIiwibW91c2VvdXQiLCJrZXlwcmVzcyIsImtleWRvd24iLCJrZXl1cCIsImNoYW5nZSIsImlucHV0IiwidGltZXVwZGF0ZSIsImRyYWdzdGFydCIsImRyYWdlbmQiLCJkcmFnZW50ZXIiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsImRyYWciLCJkcm9wIiwiZm9jdXMiLCJibHVyIiwic2Nyb2xsIiwic3VibWl0Iiwic2VsZWN0IiwiYWJvcnQiLCJlcnJvciIsImxvYWQiLCJjYW5wbGF5IiwiY2FucGxheXRocm91Z2giLCJkdXJhdGlvbmNoYW5nZSIsImVtcHRpZWQiLCJlbmRlZCIsImxvYWRlZGRhdGEiLCJsb2FkZWRtZXRhZGF0YSIsImxvYWRzdGFydCIsInBhdXNlIiwicGxheSIsInBsYXlpbmciLCJyYXRlY2hhbmdlIiwic2Vla2VkIiwic2Vla2luZyIsInN0YWxsZWQiLCJzdXNwZW5kIiwidm9sdW1lY2hhbmdlIiwid2FpdGluZyIsIm1vdXNld2hlZWwiLCJkeCIsImR5IiwidDMiLCJ3aGVlbCIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInRvdWNoY2FuY2VsIiwibG9zdHBvaW50ZXJjYXB0dXJlIiwiZ290cG9pbnRlcmNhcHR1cmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVyY2FuY2VsIiwicG9pbnRlcmRvd24iLCJwb2ludGVybGVhdmUiLCJwb2ludGVybW92ZSIsInBvaW50ZXJvdXQiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJ1cCIsInRyYW5zaXRpb25lbmQiLCJlbHQiLCJ0cmFuc2l0aW9uc3RhcnQiLCJ0cmFuc2l0aW9ucnVuIiwidHJhbnNpdGlvbmNhbmNlbCIsImNsaWNrcyIsImNvcGllcyIsImN1dHMiLCJwYXN0ZXMiLCJkYmxjbGlja3MiLCJtb3VzZWRvd25zIiwibW91c2V1cHMiLCJtb3VzZW92ZXJzIiwibW91c2Vtb3ZlcyIsIm1vdXNlb3V0cyIsImtleXByZXNzZXMiLCJrZXlkb3ducyIsImtleXVwcyIsImNoYW5nZXMiLCJpbnB1dHMiLCJ0aW1ldXBkYXRlcyIsImRyYWdzdGFydHMiLCJkcmFnZW5kcyIsImRyYWdlbnRlcnMiLCJkcmFnb3ZlcnMiLCJkcmFnbGVhdmVzIiwiZHJhZ3MiLCJkcm9wcyIsIm1vdXNld2hlZWxzIiwid2hlZWxzIiwidG91Y2hzdGFydHMiLCJ0b3VjaG1vdmVzIiwidG91Y2hlbmRzIiwidG91Y2hjYW5jZWxzIiwiZm9jdXNlcyIsImJsdXJzIiwic2Nyb2xscyIsInN1Ym1pdHMiLCJzZWxlY3RzIiwiYWJvcnRzIiwiZXJyb3JzIiwibG9hZHMiLCJjYW5wbGF5cyIsImNhbnBsYXl0aHJvdWdocyIsImR1cmF0aW9uY2hhbmdlcyIsImVtcHRpZWRzIiwiZW5kZWRzIiwibG9hZGVkZGF0YXMiLCJsb2FkZWRtZXRhZGF0YXMiLCJsb2Fkc3RhcnRzIiwicGF1c2VzIiwicGxheXMiLCJwbGF5aW5ncyIsInJhdGVjaGFuZ2VzIiwic2Vla2VkcyIsInNlZWtpbmdzIiwic3RhbGxlZHMiLCJzdXNwZW5kcyIsInZvbHVtZWNoYW5nZXMiLCJ3YWl0aW5ncyIsImxvc3Rwb2ludGVyY2FwdHVyZXMiLCJnb3Rwb2ludGVyY2FwdHVyZXMiLCJwb2ludGVyZW50ZXJzIiwicG9pbnRlcmNhbmNlbHMiLCJwb2ludGVyZG93bnMiLCJwb2ludGVybGVhdmVzIiwicG9pbnRlcm1vdmVzIiwicG9pbnRlcm91dHMiLCJwb2ludGVyb3ZlcnMiLCJwb2ludGVydXBzIiwidHJhbnNpdGlvbmVuZHMiLCJ0cmFuc2l0aW9uc3RhcnRzIiwidHJhbnNpdGlvbnJ1bnMiLCJ0cmFuc2l0aW9uY2FuY2VscyIsInJlcXVlc3RfYW5pbWF0aW9uX2ZyYW1lIiwicyIsInQ0IiwidDUiLCJvbmxvYWQiLCJ0NiIsImRvYyIsImNzdF9yZWFkeXN0YXRlY2hhbmdlIiwiZG9tQ29udGVudExvYWRlZCIsIndha2V1cCIsIndha2V1cF9leG4iLCJyZWd1bGFyIiwicmVhZHlzdGF0ZWNoYW5nZSIsImluaXQiLCJvbnVubG9hZCIsIm9uYmVmb3JldW5sb2FkIiwib25yZXNpemUiLCJvbm9yaWVudGF0aW9uY2hhbmdlIiwib25wb3BzdGF0ZSIsIm9uaGFzaGNoYW5nZSIsIm9ub3JpZW50YXRpb25jaGFuZ2Vfb3Jfb25yZXNpeiIsIm9ucmVzaXplcyIsIm9ub3JpZW50YXRpb25jaGFuZ2VzIiwib25wb3BzdGF0ZXMiLCJvbmhhc2hjaGFuZ2VzIiwib25vcmllbnRhdGlvbmNoYW5nZXNfb3Jfb25yZXNpIiwibGltaXRlZF9vbnJlc2l6ZXMiLCJsaW1pdGVkX29ub3JpZW50YXRpb25jaGFuZ2VzIiwibGltaXRlZF9vbm9yaWVudGF0aW9uY2hhbmdlc19vIiwiSnNfb2Zfb2NhbWxfbHd0X0x3dF9qc19ldmVudHMiXSwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9ob21lL2JlZWxpZ3VsLy5vcGFtL29jYW1sLTUuMi4wL2xpYi9qc19vZl9vY2FtbC1sd3QvbHd0X2pzX2V2ZW50cy5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxxQkFBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxJQUFBQyxvQkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElB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O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUQ3bUJGIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCIoKiBKc19vZl9vY2FtbCBsaWJyYXJ5XG4gKiBodHRwOi8vd3d3Lm9jc2lnZW4ub3JnL2pzX29mX29jYW1sL1xuICogQ29weXJpZ2h0IChDKSAyMDEwIFZpbmNlbnQgQmFsYXRcbiAqIExhYm9yYXRvaXJlIFBQUyAtIENOUlMgVW5pdmVyc2l0w6kgUGFyaXMgRGlkZXJvdFxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIHdpdGggbGlua2luZyBleGNlcHRpb247XG4gKiBlaXRoZXIgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTkgVGVtcGxlIFBsYWNlIC0gU3VpdGUgMzMwLCBCb3N0b24sIE1BIDAyMTExLTEzMDcsIFVTQS5cbiAqKVxuXG5vcGVuIEpzX29mX29jYW1sXG5vcGVuISBJbXBvcnRcblxubGV0ICggPj49ICkgPSBMd3QuYmluZFxuXG5sZXQgYXN5bmMgZiA9IEx3dC5hc3luYyAoZnVuICgpIC0+IEx3dF9qcy55aWVsZCAoKSA+Pj0gZilcblxubGV0IG9wdF9tYXAgZiA9IGZ1bmN0aW9uXG4gIHwgTm9uZSAtPiBOb25lXG4gIHwgU29tZSB4IC0+IFNvbWUgKGYgeClcblxubGV0IG1ha2VfZXZlbnQgZXZlbnRfa2luZCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbGV0IGVsID0gcmVmIEpzLm51bGwgaW5cbiAgbGV0IHQsIHcgPSBMd3QudGFzayAoKSBpblxuICBsZXQgY2FuY2VsICgpID0gSnMuT3B0Lml0ZXIgIWVsIERvbV9odG1sLnJlbW92ZUV2ZW50TGlzdGVuZXIgaW5cbiAgTHd0Lm9uX2NhbmNlbCB0IGNhbmNlbDtcbiAgZWwgOj1cbiAgICBKcy5zb21lXG4gICAgICAoRG9tLmFkZEV2ZW50TGlzdGVuZXJXaXRoT3B0aW9uc1xuICAgICAgICAgP2NhcHR1cmU6KG9wdF9tYXAgSnMuYm9vbCB1c2VfY2FwdHVyZSlcbiAgICAgICAgID9wYXNzaXZlOihvcHRfbWFwIEpzLmJvb2wgcGFzc2l2ZSlcbiAgICAgICAgIHRhcmdldFxuICAgICAgICAgZXZlbnRfa2luZFxuICAgICAgICAgKERvbV9odG1sLmhhbmRsZXIgKGZ1biAoZXYgOiAjRG9tX2h0bWwuZXZlbnQgSnMudCkgLT5cbiAgICAgICAgICAgICAgY2FuY2VsICgpO1xuICAgICAgICAgICAgICBMd3Qud2FrZXVwIHcgZXY7XG4gICAgICAgICAgICAgIEpzLmJvb2wgdHJ1ZSkpXG4gICAgICAgICAoKiB0cnVlIGJlY2F1c2Ugd2UgZG8gbm90IHdhbnQgdG8gcHJldmVudCBkZWZhdWx0IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdXNlciBjYW4gdXNlIHRoZSBwcmV2ZW50RGVmYXVsdCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdmUuICopKTtcbiAgdFxuXG5sZXQgY2F0Y2hfY2FuY2VsIGYgeCA9XG4gIEx3dC5jYXRjaFxuICAgIChmdW4gKCkgLT4gZiB4KVxuICAgIChmdW5jdGlvblxuICAgICAgfCBMd3QuQ2FuY2VsZWQgLT4gTHd0LnJldHVybiAoKVxuICAgICAgfCBlIC0+IEx3dC5mYWlsIGUpXG5cbmxldCB3aXRoX2Vycm9yX2xvZyBmIHggPVxuICBMd3QuY2F0Y2hcbiAgICAoZnVuICgpIC0+IGYgeClcbiAgICAoZnVuIGUgLT5cbiAgICAgIEZpcmVidWcuY29uc29sZSMjbG9nIChKcy5zdHJpbmcgKFByaW50ZXhjLnRvX3N0cmluZyBlKSk7XG4gICAgICBMd3QucmV0dXJuICgpKVxuXG5sZXQgc2VxX2xvb3AgZXZoID8oY2FuY2VsX2hhbmRsZXIgPSBmYWxzZSkgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCBoYW5kbGVyID1cbiAgbGV0IGNhbmNlbGxlZCA9IHJlZiBmYWxzZSBpblxuICBsZXQgY3VyID0gcmVmIChMd3QuZmFpbCAoRmFpbHVyZSBcIkx3dF9qc19ldmVudFwiKSkgaW5cbiAgKCogVXNpbmcgTHd0LmZhaWwgYXMgZGVmYXVsdCwgdG8gYmUgcG9seW1vcnBoaWMgKilcbiAgbGV0IGN1cl9oYW5kbGVyID0gcmVmIChMd3QucmV0dXJuICgpKSBpblxuICBsZXQgbHQsIF9sdyA9IEx3dC50YXNrICgpIGluXG4gIEx3dC5vbl9jYW5jZWwgbHQgKGZ1biAoKSAtPlxuICAgICAgTHd0LmNhbmNlbCAhY3VyO1xuICAgICAgaWYgY2FuY2VsX2hhbmRsZXIgdGhlbiBMd3QuY2FuY2VsICFjdXJfaGFuZGxlcjtcbiAgICAgIGNhbmNlbGxlZCA6PSB0cnVlKTtcbiAgbGV0IHJlYyBhdXggKCkgPVxuICAgIGlmIG5vdCAhY2FuY2VsbGVkXG4gICAgICAgKCogSW4gdGhlIGNhc2UgaXQgaGFzIGJlZW4gY2FuY2VsbGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgZHVyaW5nIHRoZSBwcmV2aW91cyBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHdlIGRvIG5vdCByZWluc3RhbGwgdGhlIGV2ZW50IGhhbmRsZXIgKilcbiAgICB0aGVuIChcbiAgICAgIGxldCB0ID0gZXZoID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgaW5cbiAgICAgIGN1ciA6PSB0O1xuICAgICAgdFxuICAgICAgPj49IGZ1biBlIC0+XG4gICAgICBjdXJfaGFuZGxlciA6PSB3aXRoX2Vycm9yX2xvZyAoaGFuZGxlciBlKSBsdDtcbiAgICAgICFjdXJfaGFuZGxlciA+Pj0gYXV4KVxuICAgIGVsc2UgTHd0LnJldHVybiAoKVxuICBpblxuICBMd3QuYXN5bmMgKGNhdGNoX2NhbmNlbCBhdXgpO1xuICBsdFxuXG5sZXQgYXN5bmNfbG9vcCBldmggP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCBoYW5kbGVyID1cbiAgbGV0IGNhbmNlbGxlZCA9IHJlZiBmYWxzZSBpblxuICBsZXQgY3VyID0gcmVmIChMd3QuZmFpbCAoRmFpbHVyZSBcIkx3dF9qc19ldmVudFwiKSkgaW5cbiAgbGV0IGx0LCBfbHcgPSBMd3QudGFzayAoKSBpblxuICBMd3Qub25fY2FuY2VsIGx0IChmdW4gKCkgLT5cbiAgICAgIEx3dC5jYW5jZWwgIWN1cjtcbiAgICAgIGNhbmNlbGxlZCA6PSB0cnVlKTtcbiAgbGV0IHJlYyBhdXggKCkgPVxuICAgIGlmIG5vdCAhY2FuY2VsbGVkXG4gICAgdGhlbiAoXG4gICAgICBsZXQgdCA9IGV2aCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0IGluXG4gICAgICBjdXIgOj0gdDtcbiAgICAgIHRcbiAgICAgID4+PSBmdW4gZSAtPlxuICAgICAgTHd0LmFzeW5jIChmdW4gKCkgLT4gd2l0aF9lcnJvcl9sb2cgKGhhbmRsZXIgZSkgbHQpO1xuICAgICAgYXV4ICgpKVxuICAgIGVsc2UgTHd0LnJldHVybiAoKVxuICBpblxuICBMd3QuYXN5bmMgKGNhdGNoX2NhbmNlbCBhdXgpO1xuICBsdFxuXG5sZXQgYnVmZmVyZWRfbG9vcFxuICAgIGV2aFxuICAgID8oY2FuY2VsX2hhbmRsZXIgPSBmYWxzZSlcbiAgICA/KGNhbmNlbF9xdWV1ZSA9IHRydWUpXG4gICAgP3VzZV9jYXB0dXJlXG4gICAgP3Bhc3NpdmVcbiAgICB0YXJnZXRcbiAgICBoYW5kbGVyID1cbiAgbGV0IGNhbmNlbGxlZCA9IHJlZiBmYWxzZSBpblxuICBsZXQgcXVldWUgPSByZWYgW10gaW5cbiAgbGV0IGN1ciA9IHJlZiAoTHd0LmZhaWwgKEZhaWx1cmUgXCJMd3RfanNfZXZlbnRcIikpIGluXG4gIGxldCBjdXJfaGFuZGxlciA9IHJlZiAoTHd0LnJldHVybiAoKSkgaW5cbiAgbGV0IGx0LCBfbHcgPSBMd3QudGFzayAoKSBpblxuICBsZXQgc3Bhd24gPSBMd3RfY29uZGl0aW9uLmNyZWF0ZSAoKSBpblxuICBMd3Qub25fY2FuY2VsIGx0IChmdW4gKCkgLT5cbiAgICAgIEx3dC5jYW5jZWwgIWN1cjtcbiAgICAgIGlmIGNhbmNlbF9oYW5kbGVyIHRoZW4gTHd0LmNhbmNlbCAhY3VyX2hhbmRsZXI7XG4gICAgICBpZiBjYW5jZWxfcXVldWUgdGhlbiBxdWV1ZSA6PSBbXTtcbiAgICAgIGNhbmNlbGxlZCA6PSB0cnVlKTtcbiAgbGV0IHJlYyBzcGF3bmVyICgpID1cbiAgICBpZiBub3QgIWNhbmNlbGxlZFxuICAgIHRoZW4gKFxuICAgICAgbGV0IHQgPSBldmggP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCBpblxuICAgICAgY3VyIDo9IHQ7XG4gICAgICB0XG4gICAgICA+Pj0gZnVuIGUgLT5cbiAgICAgIHF1ZXVlIDo9IGUgOjogIXF1ZXVlO1xuICAgICAgTHd0X2NvbmRpdGlvbi5zaWduYWwgc3Bhd24gKCk7XG4gICAgICBzcGF3bmVyICgpKVxuICAgIGVsc2UgTHd0LnJldHVybiAoKVxuICBpblxuICBsZXQgcmVjIHJ1bm5lciAoKSA9XG4gICAgY3VyX2hhbmRsZXIgOj0gTHd0LnJldHVybiAoKTtcbiAgICBpZiBub3QgIWNhbmNlbGxlZFxuICAgIHRoZW4gKFxuICAgICAgbWF0Y2ggIXF1ZXVlIHdpdGhcbiAgICAgIHwgW10gLT4gTHd0X2NvbmRpdGlvbi53YWl0IHNwYXduID4+PSBydW5uZXJcbiAgICAgIHwgZSA6OiB0bCAtPlxuICAgICAgICAgIHF1ZXVlIDo9IHRsO1xuICAgICAgICAgIGN1cl9oYW5kbGVyIDo9IHdpdGhfZXJyb3JfbG9nIChoYW5kbGVyIGUpIGx0O1xuICAgICAgICAgICFjdXJfaGFuZGxlciA+Pj0gcnVubmVyKVxuICAgIGVsc2UgTHd0LnJldHVybiAoKVxuICBpblxuICBMd3QuYXN5bmMgKGNhdGNoX2NhbmNlbCBzcGF3bmVyKTtcbiAgTHd0LmFzeW5jIHJ1bm5lcjtcbiAgbHRcblxubGV0IGZ1bmNfbGltaXRlZF9sb29wIGV2ZW50IGxpbWl0ZWRfZnVuYyA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0IGhhbmRsZXIgPVxuICBsZXQgY291bnQgPSByZWYgMCBpblxuICBhc3luY19sb29wIGV2ZW50ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgKGZ1biBldiBsdCAtPlxuICAgICAgaW5jciBjb3VudDtcbiAgICAgIGxldCBuYiA9ICFjb3VudCBpblxuICAgICAgbGltaXRlZF9mdW5jICgpID4+PSBmdW4gXyAtPiBpZiAhY291bnQgPSBuYiB0aGVuIGhhbmRsZXIgZXYgbHQgZWxzZSBMd3QucmV0dXJuICgpKVxuXG5sZXQgbGltaXRlZF9sb29wIGV2ZW50ID8oZWxhcHNlZF90aW1lID0gMC4xKSA9XG4gIGZ1bmNfbGltaXRlZF9sb29wIGV2ZW50IChmdW4gKCkgLT4gTHd0X2pzLnNsZWVwIGVsYXBzZWRfdGltZSlcblxubGV0IGNsaWNrID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmNsaWNrID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGNvcHkgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuY29weSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBjdXQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuY3V0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHBhc3RlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBhc3RlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGRibGNsaWNrID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmRibGNsaWNrID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IG1vdXNlZG93biA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5tb3VzZWRvd24gP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgbW91c2V1cCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5tb3VzZXVwID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IG1vdXNlb3ZlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5tb3VzZW92ZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgbW91c2Vtb3ZlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50Lm1vdXNlbW92ZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBtb3VzZW91dCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5tb3VzZW91dCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBrZXlwcmVzcyA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5rZXlwcmVzcyA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBrZXlkb3duID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmtleWRvd24gP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQga2V5dXAgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQua2V5dXAgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgY2hhbmdlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmNoYW5nZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBpbnB1dCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5pbnB1dCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCB0aW1ldXBkYXRlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnRpbWV1cGRhdGUgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgZHJhZ3N0YXJ0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmRyYWdzdGFydCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBkcmFnZW5kID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmRyYWdlbmQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgZHJhZ2VudGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmRyYWdlbnRlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBkcmFnb3ZlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5kcmFnb3ZlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBkcmFnbGVhdmUgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuZHJhZ2xlYXZlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGRyYWcgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuZHJhZyA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBkcm9wID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmRyb3AgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgZm9jdXMgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuZm9jdXMgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgYmx1ciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5ibHVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHNjcm9sbCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5zY3JvbGwgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgc3VibWl0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnN1Ym1pdCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBzZWxlY3QgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuc2VsZWN0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGFib3J0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmFib3J0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGVycm9yID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmVycm9yID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGxvYWQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQubG9hZCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBjYW5wbGF5ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmNhbnBsYXkgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgY2FucGxheXRocm91Z2ggP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuY2FucGxheXRocm91Z2ggP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgZHVyYXRpb25jaGFuZ2UgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuZHVyYXRpb25jaGFuZ2UgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgZW1wdGllZCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5lbXB0aWVkID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGVuZGVkID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmVuZGVkID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGxvYWRlZGRhdGEgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQubG9hZGVkZGF0YSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBsb2FkZWRtZXRhZGF0YSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5sb2FkZWRtZXRhZGF0YSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBsb2Fkc3RhcnQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQubG9hZHN0YXJ0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHBhdXNlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBhdXNlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHBsYXkgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQucGxheSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBwbGF5aW5nID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBsYXlpbmcgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgcmF0ZWNoYW5nZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5yYXRlY2hhbmdlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHNlZWtlZCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5zZWVrZWQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgc2Vla2luZyA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5zZWVraW5nID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHN0YWxsZWQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuc3RhbGxlZCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBzdXNwZW5kID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnN1c3BlbmQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgdm9sdW1lY2hhbmdlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnZvbHVtZWNoYW5nZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCB3YWl0aW5nID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LndhaXRpbmcgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG4oKiBzcGVjaWFsIGNhc2UgZm9yIG1vdXNld2hlZWwsIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiB0aGUgYnJvd3NlciAqKVxubGV0IG1vdXNld2hlZWwgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIGxldCBlbCA9IHJlZiBKcy5udWxsIGluXG4gIGxldCB0LCB3ID0gTHd0LnRhc2sgKCkgaW5cbiAgbGV0IGNhbmNlbCAoKSA9IEpzLk9wdC5pdGVyICFlbCBEb21faHRtbC5yZW1vdmVFdmVudExpc3RlbmVyIGluXG4gIEx3dC5vbl9jYW5jZWwgdCBjYW5jZWw7XG4gIGVsIDo9XG4gICAgSnMuc29tZVxuICAgICAgKERvbV9odG1sLmFkZE1vdXNld2hlZWxFdmVudExpc3RlbmVyV2l0aE9wdGlvbnNcbiAgICAgICAgID9jYXB0dXJlOihvcHRfbWFwIEpzLmJvb2wgdXNlX2NhcHR1cmUpXG4gICAgICAgICA/cGFzc2l2ZToob3B0X21hcCBKcy5ib29sIHBhc3NpdmUpXG4gICAgICAgICB0YXJnZXRcbiAgICAgICAgIChmdW4gKGV2IDogI0RvbV9odG1sLmV2ZW50IEpzLnQpIH5keCB+ZHkgLT5cbiAgICAgICAgICAgRmlyZWJ1Zy5jb25zb2xlIyNsb2cgZXY7XG4gICAgICAgICAgIGNhbmNlbCAoKTtcbiAgICAgICAgICAgTHd0Lndha2V1cCB3IChldiwgKGR4LCBkeSkpO1xuICAgICAgICAgICBKcy5ib29sIHRydWUpXG4gICAgICAgICAoKiB0cnVlIGJlY2F1c2Ugd2UgZG8gbm90IHdhbnQgdG8gcHJldmVudCBkZWZhdWx0IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdXNlciBjYW4gdXNlIHRoZSBwcmV2ZW50RGVmYXVsdCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdmUuICopKTtcbiAgdFxuXG4oKiBsZXQgX0RPTU1vdXNlU2Nyb2xsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5fRE9NTW91c2VTY3JvbGwgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuKilcblxubGV0IHdoZWVsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LndoZWVsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHRvdWNoc3RhcnQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQudG91Y2hzdGFydCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCB0b3VjaG1vdmUgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQudG91Y2htb3ZlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHRvdWNoZW5kID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnRvdWNoZW5kID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IHRvdWNoY2FuY2VsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnRvdWNoY2FuY2VsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXRcblxubGV0IGxvc3Rwb2ludGVyY2FwdHVyZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5sb3N0cG9pbnRlcmNhcHR1cmUgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgZ290cG9pbnRlcmNhcHR1cmUgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuZ290cG9pbnRlcmNhcHR1cmUgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgcG9pbnRlcmVudGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBvaW50ZXJlbnRlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBwb2ludGVyY2FuY2VsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBvaW50ZXJjYW5jZWwgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgcG9pbnRlcmRvd24gP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQucG9pbnRlcmRvd24gP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgcG9pbnRlcmxlYXZlID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBvaW50ZXJsZWF2ZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBwb2ludGVybW92ZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC5wb2ludGVybW92ZSA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCBwb2ludGVyb3V0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBvaW50ZXJvdXQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgcG9pbnRlcm92ZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldCA9XG4gIG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQucG9pbnRlcm92ZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRhcmdldFxuXG5sZXQgcG9pbnRlcnVwID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0YXJnZXQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnBvaW50ZXJ1cCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdGFyZ2V0XG5cbmxldCB0cmFuc2l0aW9uZW5kID91c2VfY2FwdHVyZSA/cGFzc2l2ZSBlbHQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnRyYW5zaXRpb25lbmQgP3VzZV9jYXB0dXJlID9wYXNzaXZlIGVsdFxuXG5sZXQgdHJhbnNpdGlvbnN0YXJ0ID91c2VfY2FwdHVyZSA/cGFzc2l2ZSBlbHQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnRyYW5zaXRpb25zdGFydCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgZWx0XG5cbmxldCB0cmFuc2l0aW9ucnVuID91c2VfY2FwdHVyZSA/cGFzc2l2ZSBlbHQgPVxuICBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnRyYW5zaXRpb25ydW4gP3VzZV9jYXB0dXJlID9wYXNzaXZlIGVsdFxuXG5sZXQgdHJhbnNpdGlvbmNhbmNlbCA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgZWx0ID1cbiAgbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC50cmFuc2l0aW9uY2FuY2VsID91c2VfY2FwdHVyZSA/cGFzc2l2ZSBlbHRcblxubGV0IGNsaWNrcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBjbGljayA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGNvcGllcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBjb3B5ID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgY3V0cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBjdXQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBwYXN0ZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgcGFzdGUgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBkYmxjbGlja3MgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgZGJsY2xpY2sgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBtb3VzZWRvd25zID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIG1vdXNlZG93biA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IG1vdXNldXBzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIG1vdXNldXAgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBtb3VzZW92ZXJzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIG1vdXNlb3ZlciA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IG1vdXNlbW92ZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgbW91c2Vtb3ZlID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgbW91c2VvdXRzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIG1vdXNlb3V0ID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQga2V5cHJlc3NlcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBrZXlwcmVzcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGtleWRvd25zID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGtleWRvd24gP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBrZXl1cHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3Aga2V5dXAgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBjaGFuZ2VzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGNoYW5nZSA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGlucHV0cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBpbnB1dCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHRpbWV1cGRhdGVzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHRpbWV1cGRhdGUgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBkcmFnc3RhcnRzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGRyYWdzdGFydCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGRyYWdlbmRzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGRyYWdlbmQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBkcmFnZW50ZXJzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGRyYWdlbnRlciA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGRyYWdvdmVycyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBkcmFnb3ZlciA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGRyYWdsZWF2ZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgZHJhZ2xlYXZlID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgZHJhZ3MgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgZHJhZyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGRyb3BzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGRyb3AgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBtb3VzZXdoZWVscyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBtb3VzZXdoZWVsID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgd2hlZWxzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHdoZWVsID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgdG91Y2hzdGFydHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgdG91Y2hzdGFydCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHRvdWNobW92ZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgdG91Y2htb3ZlID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgdG91Y2hlbmRzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHRvdWNoZW5kID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgdG91Y2hjYW5jZWxzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHRvdWNoY2FuY2VsID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgZm9jdXNlcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBmb2N1cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGJsdXJzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGJsdXIgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBzY3JvbGxzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHNjcm9sbCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHN1Ym1pdHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3Agc3VibWl0ID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgc2VsZWN0cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBzZWxlY3QgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBhYm9ydHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgYWJvcnQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBlcnJvcnMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgZXJyb3IgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBsb2FkcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBsb2FkID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgY2FucGxheXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgY2FucGxheSA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGNhbnBsYXl0aHJvdWdocyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBjYW5wbGF5dGhyb3VnaCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGR1cmF0aW9uY2hhbmdlcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBkdXJhdGlvbmNoYW5nZSA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGVtcHRpZWRzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGVtcHRpZWQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBlbmRlZHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgZW5kZWQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBsb2FkZWRkYXRhcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBsb2FkZWRkYXRhID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgbG9hZGVkbWV0YWRhdGFzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGxvYWRlZG1ldGFkYXRhID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgbG9hZHN0YXJ0cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBsb2Fkc3RhcnQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBwYXVzZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgcGF1c2UgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBwbGF5cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBwbGF5ID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgcGxheWluZ3MgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgcGxheWluZyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHJhdGVjaGFuZ2VzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHJhdGVjaGFuZ2UgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBzZWVrZWRzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHNlZWtlZCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHNlZWtpbmdzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHNlZWtpbmcgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBzdGFsbGVkcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBzdGFsbGVkID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgc3VzcGVuZHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3Agc3VzcGVuZCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHZvbHVtZWNoYW5nZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3Agdm9sdW1lY2hhbmdlID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgd2FpdGluZ3MgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3Agd2FpdGluZyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IGxvc3Rwb2ludGVyY2FwdHVyZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgbG9zdHBvaW50ZXJjYXB0dXJlID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgZ290cG9pbnRlcmNhcHR1cmVzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIGdvdHBvaW50ZXJjYXB0dXJlID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgcG9pbnRlcmVudGVycyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBwb2ludGVyZW50ZXIgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBwb2ludGVyY2FuY2VscyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBwb2ludGVyY2FuY2VsID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgcG9pbnRlcmRvd25zID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHBvaW50ZXJkb3duID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgcG9pbnRlcmxlYXZlcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBwb2ludGVybGVhdmUgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBwb2ludGVybW92ZXMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgcG9pbnRlcm1vdmUgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCBwb2ludGVyb3V0cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBwb2ludGVyb3V0ID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgcG9pbnRlcm92ZXJzID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdCA9XG4gIHNlcV9sb29wIHBvaW50ZXJvdmVyID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgcG9pbnRlcnVwcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCBwb2ludGVydXAgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCB0cmFuc2l0aW9uZW5kcyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCB0cmFuc2l0aW9uZW5kID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgdHJhbnNpdGlvbnN0YXJ0cyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCB0cmFuc2l0aW9uc3RhcnQgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0XG5cbmxldCB0cmFuc2l0aW9ucnVucyA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHQgPVxuICBzZXFfbG9vcCB0cmFuc2l0aW9ucnVuID9jYW5jZWxfaGFuZGxlciA/dXNlX2NhcHR1cmUgP3Bhc3NpdmUgdFxuXG5sZXQgdHJhbnNpdGlvbmNhbmNlbHMgP2NhbmNlbF9oYW5kbGVyID91c2VfY2FwdHVyZSA/cGFzc2l2ZSB0ID1cbiAgc2VxX2xvb3AgdHJhbnNpdGlvbmNhbmNlbCA/Y2FuY2VsX2hhbmRsZXIgP3VzZV9jYXB0dXJlID9wYXNzaXZlIHRcblxubGV0IHJlcXVlc3RfYW5pbWF0aW9uX2ZyYW1lICgpID1cbiAgbGV0IHQsIHMgPSBMd3Qud2FpdCAoKSBpblxuICBsZXQgKF8gOiBEb21faHRtbC5hbmltYXRpb25fZnJhbWVfcmVxdWVzdF9pZCkgPVxuICAgIERvbV9odG1sLndpbmRvdyMjcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAoSnMud3JhcF9jYWxsYmFjayAoZnVuIChfIDogSnMubnVtYmVyX3QpIC0+IEx3dC53YWtldXAgcyAoKSkpXG4gIGluXG4gIHRcblxubGV0IG9ubG9hZCAoKSA9IG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQubG9hZCBEb21faHRtbC53aW5kb3dcblxubGV0IGRvbUNvbnRlbnRMb2FkZWQgPVxuICBsZXQgY29tcGxldGUgPSBKcy5zdHJpbmcgXCJjb21wbGV0ZVwiIGluXG4gIGxldCBkb2MgPSBEb21faHRtbC53aW5kb3cjIy5kb2N1bWVudCBpblxuICBmdW4gKCkgLT5cbiAgICBpZiBkb2MjIy5yZWFkeVN0YXRlID09IGNvbXBsZXRlXG4gICAgdGhlbiBMd3QucmV0dXJuX3VuaXRcbiAgICBlbHNlXG4gICAgICBsZXQgdCwgdyA9IEx3dC50YXNrICgpIGluXG4gICAgICBsZXQgd2FrZXVwIHcgXyA9IGlmIEx3dC5pc19zbGVlcGluZyB0IHRoZW4gTHd0Lndha2V1cCB3ICgpIGluXG4gICAgICBsZXQgd2FrZXVwX2V4biB3IGUgPSBpZiBMd3QuaXNfc2xlZXBpbmcgdCB0aGVuIEx3dC53YWtldXBfZXhuIHcgZSBpblxuICAgICAgKCogaHR0cHM6Ly9naXRodWIuY29tL2RwZXJpbmkvQ29udGVudExvYWRlZC9ibG9iL21hc3Rlci9zcmMvY29udGVudGxvYWRlZC5qcyAqKVxuICAgICAgbGV0IHJlZ3VsYXIgPSBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmRvbUNvbnRlbnRMb2FkZWQgZG9jIGluXG4gICAgICBMd3Qub25fYW55IHJlZ3VsYXIgKHdha2V1cCB3KSAod2FrZXVwX2V4biB3KTtcbiAgICAgICgqIGllOCAqKVxuICAgICAgbGV0IHJlYWR5c3RhdGVjaGFuZ2UgPVxuICAgICAgICBhc3luY19sb29wXG4gICAgICAgICAgKG1ha2VfZXZlbnQgKERvbS5FdmVudC5tYWtlIFwicmVhZHlzdGF0ZWNoYW5nZVwiKSlcbiAgICAgICAgICBkb2NcbiAgICAgICAgICAoZnVuIGUgXyAtPlxuICAgICAgICAgICAgaWYgZG9jIyMucmVhZHlTdGF0ZSA9PSBjb21wbGV0ZSB0aGVuIHdha2V1cCB3IGU7XG4gICAgICAgICAgICBMd3QucmV0dXJuX3VuaXQpXG4gICAgICBpblxuICAgICAgKCogZmFsbGJhY2ssIGp1c3QgaW4gY2FzZSAqKVxuICAgICAgbGV0IGluaXQgPSBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LmxvYWQgRG9tX2h0bWwud2luZG93IGluXG4gICAgICBMd3Qub25fYW55IGluaXQgKHdha2V1cCB3KSAod2FrZXVwX2V4biB3KTtcbiAgICAgICgqIGNsZWFuIGFuZCByZXR1cm4gKilcbiAgICAgIEx3dC5iaW5kIHQgKGZ1biBfZSAtPlxuICAgICAgICAgIEx3dC5jYW5jZWwgcmVndWxhcjtcbiAgICAgICAgICBMd3QuY2FuY2VsIHJlYWR5c3RhdGVjaGFuZ2U7XG4gICAgICAgICAgTHd0LmNhbmNlbCBpbml0O1xuICAgICAgICAgIEx3dC5yZXR1cm5fdW5pdClcblxubGV0IG9udW5sb2FkICgpID0gbWFrZV9ldmVudCBEb21faHRtbC5FdmVudC51bmxvYWQgRG9tX2h0bWwud2luZG93XG5cbmxldCBvbmJlZm9yZXVubG9hZCAoKSA9IG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQuYmVmb3JldW5sb2FkIERvbV9odG1sLndpbmRvd1xuXG5sZXQgb25yZXNpemUgKCkgPSBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50LnJlc2l6ZSBEb21faHRtbC53aW5kb3dcblxubGV0IG9ub3JpZW50YXRpb25jaGFuZ2UgKCkgPSBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50Lm9yaWVudGF0aW9uY2hhbmdlIERvbV9odG1sLndpbmRvd1xuXG5sZXQgb25wb3BzdGF0ZSAoKSA9IG1ha2VfZXZlbnQgRG9tX2h0bWwuRXZlbnQucG9wc3RhdGUgRG9tX2h0bWwud2luZG93XG5cbmxldCBvbmhhc2hjaGFuZ2UgKCkgPSBtYWtlX2V2ZW50IERvbV9odG1sLkV2ZW50Lmhhc2hjaGFuZ2UgRG9tX2h0bWwud2luZG93XG5cbmxldCBvbm9yaWVudGF0aW9uY2hhbmdlX29yX29ucmVzaXplICgpID0gTHd0LnBpY2sgWyBvbnJlc2l6ZSAoKTsgb25vcmllbnRhdGlvbmNoYW5nZSAoKSBdXG5cbmxldCBvbnJlc2l6ZXMgdCA9IHNlcV9sb29wIChmdW4gP3VzZV9jYXB0dXJlOl8gP3Bhc3NpdmU6XyAoKSAtPiBvbnJlc2l6ZSAoKSkgKCkgdFxuXG5sZXQgb25vcmllbnRhdGlvbmNoYW5nZXMgdCA9XG4gIHNlcV9sb29wIChmdW4gP3VzZV9jYXB0dXJlOl8gP3Bhc3NpdmU6XyAoKSAtPiBvbm9yaWVudGF0aW9uY2hhbmdlICgpKSAoKSB0XG5cbmxldCBvbnBvcHN0YXRlcyB0ID0gc2VxX2xvb3AgKGZ1biA/dXNlX2NhcHR1cmU6XyA/cGFzc2l2ZTpfICgpIC0+IG9ucG9wc3RhdGUgKCkpICgpIHRcblxubGV0IG9uaGFzaGNoYW5nZXMgdCA9IHNlcV9sb29wIChmdW4gP3VzZV9jYXB0dXJlOl8gP3Bhc3NpdmU6XyAoKSAtPiBvbmhhc2hjaGFuZ2UgKCkpICgpIHRcblxubGV0IG9ub3JpZW50YXRpb25jaGFuZ2VzX29yX29ucmVzaXplcyB0ID1cbiAgc2VxX2xvb3AgKGZ1biA/dXNlX2NhcHR1cmU6XyA/cGFzc2l2ZTpfICgpIC0+IG9ub3JpZW50YXRpb25jaGFuZ2Vfb3Jfb25yZXNpemUgKCkpICgpIHRcblxubGV0IGxpbWl0ZWRfb25yZXNpemVzID9lbGFwc2VkX3RpbWUgdCA9XG4gIGxpbWl0ZWRfbG9vcCAoZnVuID91c2VfY2FwdHVyZTpfID9wYXNzaXZlOl8gKCkgLT4gb25yZXNpemUgKCkpID9lbGFwc2VkX3RpbWUgKCkgdFxuXG5sZXQgbGltaXRlZF9vbm9yaWVudGF0aW9uY2hhbmdlcyA/ZWxhcHNlZF90aW1lIHQgPVxuICBsaW1pdGVkX2xvb3BcbiAgICAoZnVuID91c2VfY2FwdHVyZTpfID9wYXNzaXZlOl8gKCkgLT4gb25vcmllbnRhdGlvbmNoYW5nZSAoKSlcbiAgICA/ZWxhcHNlZF90aW1lXG4gICAgKClcbiAgICB0XG5cbmxldCBsaW1pdGVkX29ub3JpZW50YXRpb25jaGFuZ2VzX29yX29ucmVzaXplcyA/ZWxhcHNlZF90aW1lIHQgPVxuICBsaW1pdGVkX2xvb3BcbiAgICAoZnVuID91c2VfY2FwdHVyZTpfID9wYXNzaXZlOl8gKCkgLT4gb25vcmllbnRhdGlvbmNoYW5nZV9vcl9vbnJlc2l6ZSAoKSlcbiAgICA/ZWxhcHNlZF90aW1lXG4gICAgKClcbiAgICB0XG4iXSwiaWdub3JlTGlzdCI6WzBdfX0seyJvZmZzZXQiOnsibGluZSI6MjE3MCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJqc19vZl9vY2FtbF9sd3QuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImNhbWxfbWF5YmVfYXR0YWNoX2JhY2t0cmFjZSIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJnbG9iYWxfZGF0YSIsIkpzX29mX29jYW1sX0ZpbGUiLCJKc19vZl9vY2FtbF9KcyIsIkFzc2VydF9mYWlsdXJlIiwiTHd0IiwiSnNfb2Zfb2NhbWxfRG9tIiwicmVhZGVyIiwia2luZCIsImZpbGUiLCJmaWxlUmVhZGVyIiwibWF0Y2giLCJ3IiwicmVzIiwidDMiLCJwYXJhbSIsInMiLCJ0MTEiLCJyZWFkQXNCaW5hcnlTdHJpbmciLCJyZWFkQXNUZXh0IiwicmVhZEFzVGV4dF93aXRoRW5jb2RpbmciLCJlIiwicmVhZEFzRGF0YVVSTCIsIkpzX29mX29jYW1sX2x3dF9Md3RfZmlsZSJdLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIiwiL2hvbWUvYmVlbGlndWwvLm9wYW0vb2NhbWwtNS4yLjAvbGliL2pzX29mX29jYW1sLWx3dC9sd3RfZmlsZS5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyw4QkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUEsSUFBQUMsTUFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUE7QUFBQSxZQUFBQyxPQUFBQyxNQUFBQztBQUFBQTtBQUFBQSxLQUFBQyxhQ2lEdUI7QUFBQSxLQUFBSCxTQXRCUjtBQUFBLEtBQUFJLFFBQ0E7QUFBQSxLQUFBQyxJQUFXO0FBQUEsS0FBQUMsTUFBQTtBQUFBLEtBQUFDO0FBQUFBLE9BRXRCO0FBQUE7QUFBQSxrQkFBQUM7QUFBQUEsVUFDMEI7QUFBQTtBQUFBLGtCQUlHO0FBQUEsWUFBQUosUUFBZDtBQUFBLFdBQStDO0FBQUEsWUFDNUM7QUFBQSxlQUFBSyxJQUQ0QztBQUFBLFdBRnhEO0FBQUE7QUFBQSxVQU9GO0FBQUEsU0FBUztBQUFBLElBWGY7QUFBQSxJQVlBLGtDQUFBRCxPQUE2QixxQkFBYTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BSzdCO0FBQUE7QUFBQSxNQUZIO0FBQUE7QUFBQSxNQURRO0FBQUEsYUFBQUUsTUFGd0IsU0FJakI7QUFBQSxJQUUxQjtBQUFBLEdBRThEO0FBQUEsWUFBQUMsbUJBQUFULE1BRWxDLGdDQUF5QjtBQUFBLFlBQUFVLFdBQUFWLE1BRWpDLDhCQUFpQjtBQUFBLFlBQUFXLHdCQUFBWCxNQUFBWSxHQUVGLHVDQUFrQztBQUFBO0FBQUEsWUFBQUMsY0FBQWIsTUFFOUMsK0JBQW9CO0FBQUE7QUFBQSxJQUFBYztBQUFBQSxNRHpEN0MiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIigqIEpzX29mX29jYW1sIGxpYnJhcnlcbiAqIGh0dHA6Ly93d3cub2NzaWdlbi5vcmcvanNfb2Zfb2NhbWwvXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTEgUGllcnJlIENoYW1iYXJ0XG4gKiBMYWJvcmF0b2lyZSBQUFMgLSBDTlJTIFVuaXZlcnNpdMOpIFBhcmlzIERpZGVyb3RcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCB3aXRoIGxpbmtpbmcgZXhjZXB0aW9uO1xuICogZWl0aGVyIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFjZSAtIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3LCBVU0EuXG4gKilcblxub3BlbiBKc19vZl9vY2FtbFxub3BlbiBKc1xub3BlbiBEb21cbm9wZW4gRmlsZVxub3BlbiEgSW1wb3J0XG5cbmxldCByZWFkX3dpdGhfZmlsZXJlYWRlciAoZmlsZVJlYWRlciA6IGZpbGVSZWFkZXIgdCBjb25zdHIpIGtpbmQgZmlsZSA9XG4gIGxldCByZWFkZXIgPSBuZXclanMgZmlsZVJlYWRlciBpblxuICBsZXQgcmVzLCB3ID0gTHd0LnRhc2sgKCkgaW5cbiAgcmVhZGVyIyMub25sb2FkZW5kIDo9XG4gICAgaGFuZGxlciAoZnVuIF8gLT5cbiAgICAgICAgaWYgcmVhZGVyIyMucmVhZHlTdGF0ZSA9PSBET05FXG4gICAgICAgIHRoZW5cbiAgICAgICAgICBMd3Qud2FrZXVwXG4gICAgICAgICAgICB3XG4gICAgICAgICAgICAobWF0Y2ggT3B0LnRvX29wdGlvbiAoQ29lcmNlVG8uc3RyaW5nIHJlYWRlciMjLnJlc3VsdCkgd2l0aFxuICAgICAgICAgICAgfCBOb25lIC0+IGFzc2VydCBmYWxzZSAoKiBjYW4ndCBoYXBwZW46IGNhbGxlZCB3aXRoIGdvb2QgcmVhZEFzXyAqKVxuICAgICAgICAgICAgfCBTb21lIHMgLT4gcylcbiAgICAgICAgZWxzZSAoKTtcbiAgICAgICAgKCogQ0NDIFRPRE86IGhhbmRsZSBlcnJvcnMgKilcbiAgICAgICAgSnMuX2ZhbHNlKTtcbiAgTHd0Lm9uX2NhbmNlbCByZXMgKGZ1biAoKSAtPiByZWFkZXIjI2Fib3J0KTtcbiAgKG1hdGNoIGtpbmQgd2l0aFxuICB8IGBCaW5hcnlTdHJpbmcgLT4gcmVhZGVyIyNyZWFkQXNCaW5hcnlTdHJpbmcgZmlsZVxuICB8IGBUZXh0IC0+IHJlYWRlciMjcmVhZEFzVGV4dCBmaWxlXG4gIHwgYFRleHRfd2l0aEVuY29kaW5nIGUgLT4gcmVhZGVyIyNyZWFkQXNUZXh0X3dpdGhFbmNvZGluZyBmaWxlIGVcbiAgfCBgRGF0YVVSTCAtPiByZWFkZXIjI3JlYWRBc0RhdGFVUkwgZmlsZSk7XG4gIHJlc1xuXG5sZXQgcmVhZGVyIGtpbmQgZmlsZSA9IHJlYWRfd2l0aF9maWxlcmVhZGVyIGZpbGVSZWFkZXIga2luZCBmaWxlXG5cbmxldCByZWFkQXNCaW5hcnlTdHJpbmcgZmlsZSA9IHJlYWRlciBgQmluYXJ5U3RyaW5nIGZpbGVcblxubGV0IHJlYWRBc1RleHQgZmlsZSA9IHJlYWRlciBgVGV4dCBmaWxlXG5cbmxldCByZWFkQXNUZXh0X3dpdGhFbmNvZGluZyBmaWxlIGUgPSByZWFkZXIgKGBUZXh0X3dpdGhFbmNvZGluZyBlKSBmaWxlXG5cbmxldCByZWFkQXNEYXRhVVJMIGZpbGUgPSByZWFkZXIgYERhdGFVUkwgZmlsZVxuIl0sImlnbm9yZUxpc3QiOlswXX19LHsib2Zmc2V0Ijp7ImxpbmUiOjIyNDgsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNfb2Zfb2NhbWxfbHd0LmNtYS5qcyIsIm5hbWVzIjpbInJ1bnRpbWUiLCJnbG9iYWxfZGF0YSIsIkpzX29mX29jYW1sX1htbEh0dHBSZXF1ZXN0IiwiSnNfb2Zfb2NhbWxfbHd0X0x3dF94bWxIdHRwUmVxIiwiSnNfb2Zfb2NhbWxfRmlsZSIsIkpzX29mX29jYW1sX2x3dF9Md3RfZmlsZSIsImNyZWF0ZSIsIkV2ZW50IiwiV3JvbmdfaGVhZGVycyIsInBlcmZvcm1fcmF3IiwicGVyZm9ybV9yYXdfdXJsIiwicGVyZm9ybSIsImdldCIsIlhtbEh0dHBSZXF1ZXN0IiwiYmxvYl9mcm9tX3N0cmluZyIsImJsb2JfZnJvbV9hbnkiLCJDb2VyY2VUbyIsIlJlYWRlckV2ZW50IiwiZmlsZW5hbWUiLCJmaWxlUmVhZGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlYWRBc0JpbmFyeVN0cmluZyIsInJlYWRBc1RleHQiLCJyZWFkQXNUZXh0X3dpdGhFbmNvZGluZyIsInJlYWRBc0RhdGFVUkwiLCJGaWxlIiwiSnNfb2Zfb2NhbWxfbHd0Il0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiXSwibWFwcGluZ3MiOiJJQUFBQSxVQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLDZCQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsMkJBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLE1BQUE7QUFBQSxJQUFBQztBQUFBQSxNQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsMEJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDO0FBQUFBLE1BQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsa0JBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSJdLCJpZ25vcmVMaXN0IjpbMF19fV19
