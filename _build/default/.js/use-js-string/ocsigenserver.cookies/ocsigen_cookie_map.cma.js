// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Ocsigen_cookie_map
//# unitInfo: Requires: Stdlib, Stdlib__Map, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_String = global_data.Stdlib__String,
    compare = runtime.caml_compare,
    Map_path = caml_call1(Stdlib_Map[1], [0, compare]),
    Map_inner = caml_call1(Stdlib_Map[1], [0, Stdlib_String[10]]),
    empty = Map_path[1];
   function add(path, n, v, m){
    try{var _f_ = caml_call2(Map_path[17], path, m), m$0 = _f_;}
    catch(_g_){
     var _d_ = caml_wrap_exception(_g_);
     if(_d_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_d_, 0);
     var m$0 = Map_inner[1];
    }
    var _e_ = caml_call3(Map_inner[2], n, v, m$0);
    return caml_call3(Map_path[2], path, _e_, m);
   }
   var
    add_multi =
      caml_call1
       (Map_path[24],
        function(path){
         return caml_call1
                 (Map_inner[24],
                  function(n, v, beg){
                   if(! v) return add(path, n, 0, beg);
                   var secure = v[3], v$0 = v[2], expo = v[1];
                   return add(path, n, [0, expo, v$0, secure], beg);
                  });
        });
   function remove(path, n, m){
    try{
     var
      m$0 = caml_call2(Map_path[17], path, m),
      m$1 = caml_call2(Map_inner[6], n, m$0),
      _b_ =
        caml_call1(Map_inner[31], m$1)
         ? caml_call2(Map_path[6], path, m)
         : caml_call3(Map_path[2], path, m$1, m);
     return _b_;
    }
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_ === Stdlib[8]) return m;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var
    Poly = [0, add, remove],
    Ocsigen_cookie_map =
      [0, Map_path, Map_inner, empty, add, add_multi, remove, Poly];
   runtime.caml_register_global(3, Ocsigen_cookie_map, "Ocsigen_cookie_map");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NzaWdlbl9jb29raWVfbWFwLmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6OSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJvY3NpZ2VuX2Nvb2tpZV9tYXAuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImNhbWxfbWF5YmVfYXR0YWNoX2JhY2t0cmFjZSIsImNhbWxfd3JhcF9leGNlcHRpb24iLCJjYW1sX2NhbGwxIiwiZiIsImEwIiwiY2FtbF9jYWxsMiIsImExIiwiY2FtbF9jYWxsMyIsImEyIiwiZ2xvYmFsX2RhdGEiLCJTdGRsaWIiLCJTdGRsaWJfTWFwIiwiU3RkbGliX1N0cmluZyIsImNvbXBhcmUiLCJNYXBfcGF0aCIsIk1hcF9pbm5lciIsImVtcHR5IiwiYWRkIiwicGF0aCIsIm4iLCJ2IiwibSIsImFkZF9tdWx0aSIsImJlZyIsInNlY3VyZSIsImV4cG8iLCJyZW1vdmUiLCJQb2x5IiwiT2NzaWdlbl9jb29raWVfbWFwIl0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvaG9tZS9iZWVsaWd1bC8ub3BhbS9vY2FtbC01LjIuMC9saWIvb2NzaWdlbnNlcnZlci9jb29raWVzL29jc2lnZW5fY29va2llX21hcC5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyw4QkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBSixHQUFBQyxJQUFBRSxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsU0FBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxZQUFBQyxJQUFBQyxNQUFBQyxHQUFBQyxHQUFBQztBQUFBQSxJQ2dDRSxjQUFhLG1DQUFBQSxNQUFBO0FBQUE7QUFBQSxlRGhDZjtBQUFBO0FBQUEsU0FBQUEsTUNnQ3NEO0FBQUE7QUFBQSxjQUVsQztBQUFBLElBQXNCLDRDQUFFO0FBQUE7QUFBQTtBQUFBLElBQUFDO0FBQUFBLE1BTTFDO0FBQUE7QUFBQSxpQkFBQUo7QUFBQUEsU0FDQTtBQUFBO0FBQUEsMkJBQUFDLEdBQUFDLEdBQUFHO0FBQUFBLG1CQUNBLFFBRVksMkJBQXNCO0FBQUEsdUJBQUFDLFNBRmxDLE1BQUFKLE1BQUEsTUFBQUssT0FBQTtBQUFBLG1CQUM0QixnREFDTTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxPQUFBUixNQUFBQyxHQUFBRTtBQUFBQSxJQUdsQztBQUFBO0FBQUEsTUFBQUEsTUFDVztBQUFBLE1BQUFBLE1BQ0E7QUFBQTtBQUFBLFFBQ047QUFBQSxXQUNFO0FBQUEsV0FFSDtBQUFBO0FBQUE7QUFBQTtBQUFBLGVEckROO0FBQUEsMkJDc0RvQjtBQUFBLEtEdERwQjtBQUFBO0FBQUEsR0NzRHFCO0FBQUE7QUFBQSxJQUFBTSxPQVZlO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQSxFRDVDcEMiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIigqIE9jc2lnZW5cbiAqIENvcHlyaWdodCAoQykgMjAxMCBWaW5jZW50IEJhbGF0XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgd2l0aCBsaW5raW5nIGV4Y2VwdGlvbjtcbiAqIGVpdGhlciB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1wbGUgUGxhY2UgLSBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgMDIxMTEtMTMwNywgVVNBLlxuICopXG5cbm1vZHVsZSBNYXBfcGF0aCA9IE1hcC5NYWtlIChzdHJ1Y3RcbiAgICB0eXBlIHQgPSBzdHJpbmcgbGlzdFxuXG4gICAgbGV0IGNvbXBhcmUgPSBjb21wYXJlXG4gIGVuZClcblxubW9kdWxlIE1hcF9pbm5lciA9IE1hcC5NYWtlIChTdHJpbmcpXG5cbnR5cGUgY29va2llID0gT1NldCBvZiBmbG9hdCBvcHRpb24gKiBzdHJpbmcgKiBib29sIHwgT1Vuc2V0XG50eXBlIHQgPSBjb29raWUgTWFwX2lubmVyLnQgTWFwX3BhdGgudFxuXG5sZXQgZW1wdHkgPSBNYXBfcGF0aC5lbXB0eVxuXG5sZXQgYWRkIH5wYXRoIG4gdiBtID1cbiAgbGV0IG0nID0gdHJ5IE1hcF9wYXRoLmZpbmQgcGF0aCBtIHdpdGggTm90X2ZvdW5kIC0+IE1hcF9pbm5lci5lbXB0eSBpblxuICAoKiBXZSByZXBsYWNlIHRoZSBvbGQgdmFsdWUgaWYgaXQgZXhpc3RzICopXG4gIE1hcF9wYXRoLmFkZCBwYXRoIChNYXBfaW5uZXIuYWRkIG4gdiBtJykgbVxuXG4oKiBbYWRkX211bHRpIG5ldyBvbGRdIGFkZHMgdGhlIGNvb2tpZXMgZnJvbSBbbmV3XSB0byBbb2xkXS4gSWZcbiAgIGNvb2tpZXMgYXJlIGFscmVhZHkgYm91bmQgaW4gb2xkY29va2llcywgdGhlIHByZXZpb3VzIGJpbmRpbmdcbiAgIGRpc2FwcGVhci4gKilcbmxldCBhZGRfbXVsdGkgPVxuICBNYXBfcGF0aC5mb2xkIEBAIGZ1biBwYXRoIC0+XG4gIE1hcF9pbm5lci5mb2xkIEBAIGZ1biBuIHYgYmVnIC0+XG4gIG1hdGNoIHYgd2l0aFxuICB8IE9TZXQgKGV4cG8sIHYsIHNlY3VyZSkgLT4gYWRkIH5wYXRoIG4gKE9TZXQgKGV4cG8sIHYsIHNlY3VyZSkpIGJlZ1xuICB8IE9VbnNldCAtPiBhZGQgfnBhdGggbiBPVW5zZXQgYmVnXG5cbmxldCByZW1vdmUgfnBhdGggbiBtID1cbiAgdHJ5XG4gICAgbGV0IG0nID0gTWFwX3BhdGguZmluZCBwYXRoIG0gaW5cbiAgICBsZXQgbScgPSBNYXBfaW5uZXIucmVtb3ZlIG4gbScgaW5cbiAgICBpZiBNYXBfaW5uZXIuaXNfZW1wdHkgbSdcbiAgICB0aGVuIE1hcF9wYXRoLnJlbW92ZSBwYXRoIG1cbiAgICBlbHNlICgqIFdlIHJlcGxhY2UgdGhlIG9sZCB2YWx1ZSAqKVxuICAgICAgTWFwX3BhdGguYWRkIHBhdGggbScgbVxuICB3aXRoIE5vdF9mb3VuZCAtPiBtXG5cbm1vZHVsZSBQb2x5ID0gc3RydWN0XG4gIGxldCBhZGQgPSBhZGRcbiAgbGV0IHJlbW92ZSA9IHJlbW92ZVxuZW5kXG4iXSwiaWdub3JlTGlzdCI6WzBdfX1dfQ==
